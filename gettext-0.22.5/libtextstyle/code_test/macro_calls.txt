m4/00gnulib.m4:AC_DEFUN([gl_COMPILER_CLANG],
m4/00gnulib.m4:    [gl_cv_compiler_clang],
m4/00gnulib.m4:        [gl_cv_compiler_clang=no],
m4/00gnulib.m4:        [gl_cv_compiler_clang=yes])
m4/00gnulib.m4:AC_DEFUN([gl_COMPILER_PREPARE_CHECK_DECL],
m4/00gnulib.m4:dnl AC_REQUIRE([gl_COMPILER_CLANG])
m4/00gnulib.m4:    [gl_cv_compiler_check_decl_option],
m4/00gnulib.m4:    [if test $gl_cv_compiler_clang = yes; then
m4/00gnulib.m4:         [gl_cv_compiler_check_decl_option='-Werror=implicit-function-declaration'],
m4/00gnulib.m4:         [gl_cv_compiler_check_decl_option=none])
m4/00gnulib.m4:       gl_cv_compiler_check_decl_option=none
m4/00gnulib.m4:  if test "x$gl_cv_compiler_check_decl_option" != xnone; then
m4/00gnulib.m4:    ac_compile_for_check_decl="$ac_compile $gl_cv_compiler_check_decl_option"
m4/00gnulib.m4:# gl_00GNULIB
m4/00gnulib.m4:AC_DEFUN([gl_00GNULIB])
m4/abort-debug.m4:AC_DEFUN([gl_ABORT_DEBUG],
m4/abort-debug.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/abort-debug.m4:  AC_REQUIRE([gl_STACK_TRACE_EARLY])
m4/absolute-header.m4:# gl_ABSOLUTE_HEADER(HEADER1 HEADER2 ...)
m4/absolute-header.m4:AC_DEFUN([gl_ABSOLUTE_HEADER],
m4/absolute-header.m4:m4_foreach_w([gl_HEADER_NAME], [$1],
m4/absolute-header.m4:  [AS_VAR_PUSHDEF([gl_absolute_header],
m4/absolute-header.m4:                  [gl_cv_absolute_]m4_defn([gl_HEADER_NAME]))dnl
m4/absolute-header.m4:  AC_CACHE_CHECK([absolute name of <]m4_defn([gl_HEADER_NAME])[>],
m4/absolute-header.m4:    [gl_absolute_header],
m4/absolute-header.m4:                    [ac_cv_header_]m4_defn([gl_HEADER_NAME]))dnl
m4/absolute-header.m4:    AC_CHECK_HEADERS_ONCE(m4_defn([gl_HEADER_NAME]))dnl
m4/absolute-header.m4:      gl_ABSOLUTE_HEADER_ONE(m4_defn([gl_HEADER_NAME]))
m4/absolute-header.m4:  AC_DEFINE_UNQUOTED(AS_TR_CPP([ABSOLUTE_]m4_defn([gl_HEADER_NAME])),
m4/absolute-header.m4:                     ["AS_VAR_GET([gl_absolute_header])"],
m4/absolute-header.m4:                     [Define this to an absolute name of <]m4_defn([gl_HEADER_NAME])[>.])
m4/absolute-header.m4:  AS_VAR_POPDEF([gl_absolute_header])dnl
m4/absolute-header.m4:])# gl_ABSOLUTE_HEADER
m4/absolute-header.m4:# gl_ABSOLUTE_HEADER_ONE(HEADER)
m4/absolute-header.m4:# Like gl_ABSOLUTE_HEADER, except that:
m4/absolute-header.m4:AC_DEFUN([gl_ABSOLUTE_HEADER_ONE],
m4/absolute-header.m4:    aix*) gl_absname_cpp="$ac_cpp -C" ;;
m4/absolute-header.m4:    *)    gl_absname_cpp="$ac_cpp" ;;
m4/absolute-header.m4:      gl_dirsep_regex='[/\\]'
m4/absolute-header.m4:      gl_dirsep_regex='\/'
m4/absolute-header.m4:  gl_make_literal_regex_sed='s,[]$^\\.*/[],\\&,g'
m4/absolute-header.m4:  gl_header_literal_regex=`echo '$1' \
m4/absolute-header.m4:                           | sed -e "$gl_make_literal_regex_sed"`
m4/absolute-header.m4:  gl_absolute_header_sed="/${gl_dirsep_regex}${gl_header_literal_regex}/"'{
m4/absolute-header.m4:      s/.*"\(.*'"${gl_dirsep_regex}${gl_header_literal_regex}"'\)".*/\1/
m4/absolute-header.m4:  dnl eval is necessary to expand gl_absname_cpp.
m4/absolute-header.m4:  AS_VAR_SET([gl_cv_absolute_]AS_TR_SH([[$1]]),
m4/absolute-header.m4:[`(eval "$gl_absname_cpp conftest.$ac_ext") 2>&AS_MESSAGE_LOG_FD |
m4/absolute-header.m4:  sed -n "$gl_absolute_header_sed"`])
m4/accept4.m4:AC_DEFUN([gl_FUNC_ACCEPT4],
m4/accept4.m4:  AC_REQUIRE([gl_SYS_SOCKET_H_DEFAULTS])
m4/access.m4:AC_DEFUN([gl_FUNC_ACCESS],
m4/access.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/access.m4:        [gl_cv_func_access_slash_works],
m4/access.m4:             [gl_cv_func_access_slash_works=yes],
m4/access.m4:             [gl_cv_func_access_slash_works=no],
m4/access.m4:                linux-* | linux)   gl_cv_func_access_slash_works="guessing yes" ;;
m4/access.m4:                midipix*)          gl_cv_func_access_slash_works="guessing yes" ;;
m4/access.m4:                *-gnu*)            gl_cv_func_access_slash_works="guessing yes" ;;
m4/access.m4:                *)                 gl_cv_func_access_slash_works="$gl_cross_guess_normal" ;;
m4/access.m4:           gl_cv_func_access_slash_works="guessing yes"
m4/access.m4:      case "$gl_cv_func_access_slash_works" in
m4/acl.m4:AC_DEFUN([gl_FUNC_ACL_ARG],
m4/acl.m4:  gl_need_lib_has_acl=
m4/acl.m4:AC_DEFUN_ONCE([gl_FUNC_ACL],
m4/acl.m4:  AC_REQUIRE([gl_FUNC_ACL_ARG])
m4/acl.m4:      gl_saved_LIBS=$LIBS
m4/acl.m4:           gl_ACL_GET_FILE([use_acl=1], [])
m4/acl.m4:               [gl_cv_acl_ACL_FIRST_ENTRY],
m4/acl.m4:                  [gl_cv_acl_ACL_FIRST_ENTRY=yes],
m4/acl.m4:                  [gl_cv_acl_ACL_FIRST_ENTRY=no])])
m4/acl.m4:             if test $gl_cv_acl_ACL_FIRST_ENTRY = yes; then
m4/acl.m4:               [gl_cv_acl_ACL_TYPE_EXTENDED],
m4/acl.m4:                  [gl_cv_acl_ACL_TYPE_EXTENDED=yes],
m4/acl.m4:                  [gl_cv_acl_ACL_TYPE_EXTENDED=no])])
m4/acl.m4:             if test $gl_cv_acl_ACL_TYPE_EXTENDED = yes; then
m4/acl.m4:      LIBS=$gl_saved_LIBS
m4/acl.m4:  if test -n "$gl_need_lib_has_acl"; then
m4/acl.m4:# gl_ACL_GET_FILE(IF-WORKS, IF-NOT)
m4/acl.m4:AC_DEFUN([gl_ACL_GET_FILE],
m4/acl.m4:  AC_CACHE_CHECK([for working acl_get_file], [gl_cv_func_working_acl_get_file],
m4/acl.m4:    [gl_cv_func_working_acl_get_file=no
m4/acl.m4:          gl_cv_func_working_acl_get_file="guessing yes"
m4/acl.m4:          gl_cv_func_working_acl_get_file=yes
m4/acl.m4:  AS_IF([test "$gl_cv_func_working_acl_get_file" != no], [$1], [$2])
m4/acl.m4:AC_DEFUN([gl_FILE_HAS_ACL],
m4/acl.m4:  AC_REQUIRE([gl_FUNC_ACL_ARG])
m4/acl.m4:      [dnl Set gl_need_lib_has_acl to a nonempty value, so that any
m4/acl.m4:       dnl later gl_FUNC_ACL call will set FILE_HAS_ACL_LIB=$LIB_ACL.
m4/acl.m4:       gl_need_lib_has_acl=1
m4/acl.m4:AC_DEFUN([gl_QCOPY_ACL],
m4/acl.m4:  AC_REQUIRE([gl_FUNC_ACL])
m4/acl.m4:  gl_FUNC_XATTR
m4/acos.m4:AC_DEFUN([gl_FUNC_ACOS],
m4/acos.m4:  gl_COMMON_DOUBLE_MATHFUNC([acos])
m4/acosf.m4:AC_DEFUN([gl_FUNC_ACOSF],
m4/acosf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/acosf.m4:  AC_REQUIRE([gl_FUNC_ACOS])
m4/acosf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/acosl.m4:AC_DEFUN([gl_FUNC_ACOSL],
m4/acosl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/acosl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/acosl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/acosl.m4:    [gl_cv_func_acosl_no_libm],
m4/acosl.m4:        [gl_cv_func_acosl_no_libm=yes],
m4/acosl.m4:        [gl_cv_func_acosl_no_libm=no])
m4/acosl.m4:  if test $gl_cv_func_acosl_no_libm = no; then
m4/acosl.m4:      [gl_cv_func_acosl_in_libm],
m4/acosl.m4:          [gl_cv_func_acosl_in_libm=yes],
m4/acosl.m4:          [gl_cv_func_acosl_in_libm=no])
m4/acosl.m4:    if test $gl_cv_func_acosl_in_libm = yes; then
m4/acosl.m4:  if test $gl_cv_func_acosl_no_libm = yes \
m4/acosl.m4:     || test $gl_cv_func_acosl_in_libm = yes; then
m4/acosl.m4:      AC_REQUIRE([gl_FUNC_ACOS])
m4/acosl.m4:      AC_REQUIRE([gl_FUNC_ASINL])
m4/acosl.m4:      AC_REQUIRE([gl_FUNC_SQRTL])
m4/af_alg.m4:AC_DEFUN_ONCE([gl_AF_ALG],
m4/af_alg.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])
m4/af_alg.m4:    [gl_cv_header_linux_if_alg_salg],
m4/af_alg.m4:       [gl_cv_header_linux_if_alg_salg=yes],
m4/af_alg.m4:       [gl_cv_header_linux_if_alg_salg=no])])
m4/af_alg.m4:  if test "$gl_cv_header_linux_if_alg_salg" = yes; then
m4/af_alg.m4:  if test "$gl_cv_header_linux_if_alg_salg" != yes; then
m4/alignalloc.m4:AC_DEFUN([gl_ALIGNALLOC],
m4/alignalloc.m4:  gl_CHECK_FUNCS_ANDROID([posix_memalign], [[#include <stdlib.h>]])
m4/aligned_alloc.m4:AC_DEFUN([gl_FUNC_ALIGNED_ALLOC],
m4/aligned_alloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/aligned_alloc.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/aligned_alloc.m4:  gl_CHECK_FUNCS_ANDROID([aligned_alloc], [[#include <stdlib.h>]])
m4/aligned_alloc.m4:      [gl_cv_func_aligned_alloc_works],
m4/aligned_alloc.m4:         [gl_cv_func_aligned_alloc_works=yes],
m4/aligned_alloc.m4:         [gl_cv_func_aligned_alloc_works=no],
m4/aligned_alloc.m4:            aix*)    gl_cv_func_aligned_alloc_works="guessing no" ;;
m4/aligned_alloc.m4:            darwin*) gl_cv_func_aligned_alloc_works="guessing no" ;;
m4/aligned_alloc.m4:            *)       gl_cv_func_aligned_alloc_works="$gl_cross_guess_normal" ;;
m4/aligned_alloc.m4:    case "$gl_cv_func_aligned_alloc_works" in
m4/aligned_alloc.m4:    case "$gl_cv_onwards_func_aligned_alloc" in
m4/alloca.m4:AC_DEFUN([gl_FUNC_ALLOCA],
m4/alloca.m4:    gl_PREREQ_ALLOCA
m4/alloca.m4:    AC_CACHE_CHECK([for alloca as a compiler built-in], [gl_cv_rpl_alloca], [
m4/alloca.m4:        ], [gl_cv_rpl_alloca=yes], [gl_cv_rpl_alloca=no])
m4/alloca.m4:    if test $gl_cv_rpl_alloca = yes; then
m4/alloca.m4:AC_DEFUN([gl_PREREQ_ALLOCA], [:])
m4/alphasort.m4:AC_DEFUN([gl_FUNC_ALPHASORT],
m4/alphasort.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/alphasort.m4:AC_DEFUN([gl_PREREQ_ALPHASORT], [:])
m4/ansi-c++.m4:# macro gl_CXX_CHOICE_DEFAULT_NO, then the default is 'no'. In both cases,
m4/ansi-c++.m4:AC_DEFUN([gl_CXX_CHOICE],
m4/ansi-c++.m4:    [m4_ifdef([gl_CXX_CHOICE_DEFAULT_NO],
m4/ansi-c++.m4:    [m4_ifdef([gl_CXX_CHOICE_DEFAULT_NO],
m4/ansi-c++.m4:# gl_PROG_ANSI_CXX([ANSICXX_VARIABLE], [ANSICXX_CONDITIONAL])
m4/ansi-c++.m4:AC_DEFUN([gl_PROG_ANSI_CXX],
m4/ansi-c++.m4:  AC_REQUIRE([gl_CXX_CHOICE])
m4/ansi-c++.m4:    [gl_saved_CXX="$CXX"])
m4/ansi-c++.m4:      gl_cv_prog_ansicxx_works=yes
m4/ansi-c++.m4:        gl_cv_prog_ansicxx_cross=no
m4/ansi-c++.m4:        gl_cv_prog_ansicxx_cross=yes
m4/ansi-c++.m4:      gl_cv_prog_ansicxx_works=no
m4/ansi-c++.m4:    AC_MSG_RESULT([$gl_cv_prog_ansicxx_works])
m4/ansi-c++.m4:    if test $gl_cv_prog_ansicxx_works = no; then
m4/ansi-c++.m4:        gl_cv_prog_ansicxx_namespaces=yes
m4/ansi-c++.m4:        gl_cv_prog_ansicxx_namespaces=no
m4/ansi-c++.m4:      AC_MSG_RESULT([$gl_cv_prog_ansicxx_namespaces])
m4/ansi-c++.m4:      if test $gl_cv_prog_ansicxx_namespaces = no; then
m4/ansi-c++.m4:     CXX="$gl_saved_CXX"])
m4/ansi-c++.m4:# gl_ANSI_CXX
m4/ansi-c++.m4:AC_DEFUN([gl_ANSI_CXX],
m4/ansi-c++.m4:  gl_PROG_ANSI_CXX([CXX], [ANSICXX])
m4/arctwo.m4:AC_DEFUN([gl_ARCTWO], [:])
m4/argp.m4:AC_DEFUN([gl_ARGP],
m4/argp.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/argp.m4:AC_DEFUN([gl_REPLACE_GETOPT_ALWAYS], [])
m4/argz.m4:AC_DEFUN([gl_FUNC_ARGZ],
m4/argz.m4:[gl_PREREQ_ARGZ
m4/argz.m4:             lt_cv_sys_argz_works="$gl_cross_guess_normal"
m4/argz.m4:AC_DEFUN([gl_PREREQ_ARGZ], [:])
m4/arpa_inet_h.m4:AC_DEFUN_ONCE([gl_ARPA_INET_H],
m4/arpa_inet_h.m4:  AC_REQUIRE([gl_ARPA_INET_H_DEFAULTS])
m4/arpa_inet_h.m4:  gl_CHECK_NEXT_HEADERS([arpa/inet.h])
m4/arpa_inet_h.m4:  AC_REQUIRE([gl_FEATURES_H])
m4/arpa_inet_h.m4:  gl_PREREQ_SYS_H_WS2TCPIP
m4/arpa_inet_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/arpa_inet_h.m4:# gl_ARPA_INET_MODULE_INDICATOR([modulename])
m4/arpa_inet_h.m4:AC_DEFUN([gl_ARPA_INET_MODULE_INDICATOR],
m4/arpa_inet_h.m4:  gl_ARPA_INET_H_REQUIRE_DEFAULTS
m4/arpa_inet_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/arpa_inet_h.m4:AC_DEFUN([gl_ARPA_INET_H_REQUIRE_DEFAULTS],
m4/arpa_inet_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_INET_NTOP])
m4/arpa_inet_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_INET_PTON])
m4/arpa_inet_h.m4:  AC_REQUIRE([gl_ARPA_INET_H_DEFAULTS])
m4/arpa_inet_h.m4:AC_DEFUN([gl_ARPA_INET_H_DEFAULTS],
m4/asin.m4:AC_DEFUN([gl_FUNC_ASIN],
m4/asin.m4:  gl_COMMON_DOUBLE_MATHFUNC([asin])
m4/asinf.m4:AC_DEFUN([gl_FUNC_ASINF],
m4/asinf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/asinf.m4:  AC_REQUIRE([gl_FUNC_ASIN])
m4/asinf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/asinl.m4:AC_DEFUN([gl_FUNC_ASINL],
m4/asinl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/asinl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/asinl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/asinl.m4:    [gl_cv_func_asinl_no_libm],
m4/asinl.m4:        [gl_cv_func_asinl_no_libm=yes],
m4/asinl.m4:        [gl_cv_func_asinl_no_libm=no])
m4/asinl.m4:  if test $gl_cv_func_asinl_no_libm = no; then
m4/asinl.m4:      [gl_cv_func_asinl_in_libm],
m4/asinl.m4:          [gl_cv_func_asinl_in_libm=yes],
m4/asinl.m4:          [gl_cv_func_asinl_in_libm=no])
m4/asinl.m4:    if test $gl_cv_func_asinl_in_libm = yes; then
m4/asinl.m4:  if test $gl_cv_func_asinl_no_libm = yes \
m4/asinl.m4:     || test $gl_cv_func_asinl_in_libm = yes; then
m4/asinl.m4:      AC_REQUIRE([gl_FUNC_ASIN])
m4/asinl.m4:      AC_REQUIRE([gl_FUNC_SQRTL])
m4/asm-underscore.m4:# gl_ASM_SYMBOL_PREFIX
m4/asm-underscore.m4:AC_DEFUN([gl_ASM_SYMBOL_PREFIX],
m4/asm-underscore.m4:  AC_REQUIRE([gl_C_ASM])
m4/asm-underscore.m4:    [gl_cv_prog_as_underscore],
m4/asm-underscore.m4:     AC_TRY_COMMAND(${CC-cc} $CFLAGS $CPPFLAGS $gl_c_asm_opt conftest.c) >/dev/null 2>&1
m4/asm-underscore.m4:     if LC_ALL=C $EGREP '(^|[[^a-zA-Z0-9_]])_foo([[^a-zA-Z0-9_]]|$)' conftest.$gl_asmext >/dev/null; then
m4/asm-underscore.m4:       gl_cv_prog_as_underscore=yes
m4/asm-underscore.m4:       gl_cv_prog_as_underscore=no
m4/asm-underscore.m4:  if test $gl_cv_prog_as_underscore = yes; then
m4/asm-underscore.m4:# gl_C_ASM
m4/asm-underscore.m4:#   gl_asmext - the extension of assembly language output,
m4/asm-underscore.m4:#   gl_c_asm_opt - the C compiler option that produces assembly language output.
m4/asm-underscore.m4:AC_DEFUN([gl_C_ASM],
m4/asm-underscore.m4:       gl_asmext='s'
m4/asm-underscore.m4:       gl_c_asm_opt='-S'
m4/asm-underscore.m4:       gl_asmext='asm'
m4/asm-underscore.m4:       gl_c_asm_opt='-c -Fa'
m4/asm-underscore.m4:    [gl_asmext='s'
m4/asm-underscore.m4:     gl_c_asm_opt='-S'
m4/assert.m4:AC_DEFUN([gl_ASSERT],
m4/assert_h.m4:AC_DEFUN([gl_ASSERT_H],
m4/assert_h.m4:  AC_CACHE_CHECK([for static_assert], [gl_cv_static_assert],
m4/assert_h.m4:    [gl_saved_CFLAGS=$CFLAGS
m4/assert_h.m4:     for gl_working in "yes, a keyword" "yes, an <assert.h> macro"; do
m4/assert_h.m4:      AS_CASE([$gl_working],
m4/assert_h.m4:        [*assert.h*], [CFLAGS="$gl_saved_CFLAGS -DINCLUDE_ASSERT_H"])
m4/assert_h.m4:       [gl_cv_static_assert=$gl_working],
m4/assert_h.m4:       [gl_cv_static_assert=no])
m4/assert_h.m4:      CFLAGS=$gl_saved_CFLAGS
m4/assert_h.m4:      test "$gl_cv_static_assert" != no && break
m4/assert_h.m4:  AS_CASE([$gl_cv_static_assert],
m4/assert_h.m4:       gl_NEXT_HEADERS([assert.h])])
m4/atan.m4:AC_DEFUN([gl_FUNC_ATAN],
m4/atan.m4:  gl_COMMON_DOUBLE_MATHFUNC([atan])
m4/atan2.m4:AC_DEFUN([gl_FUNC_ATAN2],
m4/atan2.m4:  gl_COMMON_DOUBLE_MATHFUNC([atan2])
m4/atan2f.m4:AC_DEFUN([gl_FUNC_ATAN2F],
m4/atan2f.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/atan2f.m4:  AC_REQUIRE([gl_FUNC_ATAN2])
m4/atan2f.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/atanf.m4:AC_DEFUN([gl_FUNC_ATANF],
m4/atanf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/atanf.m4:  AC_REQUIRE([gl_FUNC_ATAN])
m4/atanf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/atanl.m4:AC_DEFUN([gl_FUNC_ATANL],
m4/atanl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/atanl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/atanl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/atanl.m4:    [gl_cv_func_atanl_no_libm],
m4/atanl.m4:        [gl_cv_func_atanl_no_libm=yes],
m4/atanl.m4:        [gl_cv_func_atanl_no_libm=no])
m4/atanl.m4:  if test $gl_cv_func_atanl_no_libm = no; then
m4/atanl.m4:      [gl_cv_func_atanl_in_libm],
m4/atanl.m4:          [gl_cv_func_atanl_in_libm=yes],
m4/atanl.m4:          [gl_cv_func_atanl_in_libm=no])
m4/atanl.m4:    if test $gl_cv_func_atanl_in_libm = yes; then
m4/atanl.m4:  if test $gl_cv_func_atanl_no_libm = yes \
m4/atanl.m4:     || test $gl_cv_func_atanl_in_libm = yes; then
m4/atanl.m4:      AC_REQUIRE([gl_FUNC_ATAN])
m4/atanl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/atexit.m4:AC_DEFUN([gl_FUNC_ATEXIT],
m4/atexit.m4:AC_DEFUN([gl_PREREQ_ATEXIT], [
m4/atoll.m4:AC_DEFUN([gl_FUNC_ATOLL],
m4/atoll.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/atoll.m4:AC_DEFUN([gl_PREREQ_ATOLL], [
m4/atomic-cas.m4:AC_DEFUN([gl_ATOMIC_COMPARE_AND_SWAP],
m4/atomic-cas.m4:    [gl_cv_builtin_sync_bool_compare_and_swap],
m4/atomic-cas.m4:       [gl_cv_builtin_sync_bool_compare_and_swap=yes],
m4/atomic-cas.m4:       [gl_cv_builtin_sync_bool_compare_and_swap=no])
m4/atomic-cas.m4:  if test $gl_cv_builtin_sync_bool_compare_and_swap = yes; then
m4/backupfile.m4:AC_DEFUN([gl_BACKUPFILE],
m4/backupfile.m4:  AC_REQUIRE([gl_CHECK_TYPE_STRUCT_DIRENT_D_INO])
m4/base32.m4:AC_DEFUN([gl_FUNC_BASE32],
m4/base32.m4:  gl_PREREQ_BASE32
m4/base32.m4:AC_DEFUN([gl_PREREQ_BASE32], [
m4/base64.m4:AC_DEFUN([gl_FUNC_BASE64],
m4/base64.m4:  gl_PREREQ_BASE64
m4/base64.m4:AC_DEFUN([gl_PREREQ_BASE64], [
m4/bison.m4:#     gl_PROG_BISON([VARIABLE], [MIN_BISON_VERSION])
m4/bison.m4:#     gl_PROG_BISON([PARSE_DATETIME_BISON], [2.4])
m4/bison.m4:#       time, add an invocation of gl_BISON to the configure.ac, and write
m4/bison.m4:AC_DEFUN([gl_PROG_BISON],
m4/bison.m4:AC_DEFUN([gl_BISON],
m4/btowc.m4:AC_DEFUN([gl_FUNC_BTOWC],
m4/btowc.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/btowc.m4:  AC_REQUIRE([gl_WCHAR_H_INLINE_OK])
m4/btowc.m4:      [gl_cv_func_btowc_nul],
m4/btowc.m4:          [gl_cv_func_btowc_nul=yes],
m4/btowc.m4:          [gl_cv_func_btowc_nul=no],
m4/btowc.m4:             cygwin*)           gl_cv_func_btowc_nul="guessing no" ;;
m4/btowc.m4:             mingw* | windows*) gl_cv_func_btowc_nul="guessing yes" ;;
m4/btowc.m4:             *)                 gl_cv_func_btowc_nul="guessing yes" ;;
m4/btowc.m4:      [gl_cv_func_btowc_eof],
m4/btowc.m4:          irix*)             gl_cv_func_btowc_eof="guessing no" ;;
m4/btowc.m4:          mingw* | windows*) gl_cv_func_btowc_eof="guessing yes" ;;
m4/btowc.m4:          *)                 gl_cv_func_btowc_eof="guessing yes" ;;
m4/btowc.m4:            [gl_cv_func_btowc_eof=yes],
m4/btowc.m4:            [gl_cv_func_btowc_eof=no],
m4/btowc.m4:      [gl_cv_func_btowc_consistent],
m4/btowc.m4:          [gl_cv_func_btowc_consistent=yes],
m4/btowc.m4:          [gl_cv_func_btowc_consistent=no],
m4/btowc.m4:                 [gl_cv_func_btowc_consistent="guessing no"],
m4/btowc.m4:                 [gl_cv_func_btowc_consistent="guessing yes"])
m4/btowc.m4:             *) gl_cv_func_btowc_consistent="guessing yes" ;;
m4/btowc.m4:    case "$gl_cv_func_btowc_nul" in
m4/btowc.m4:    case "$gl_cv_func_btowc_eof" in
m4/btowc.m4:    case "$gl_cv_func_btowc_consistent" in
m4/btowc.m4:      gl_MBRTOWC_C_LOCALE
m4/btowc.m4:      case "$gl_cv_func_mbrtowc_C_locale_sans_EILSEQ" in
m4/btowc.m4:AC_DEFUN([gl_PREREQ_BTOWC], [
m4/build-to-host.m4:dnl gl_BUILD_TO_HOST([somedir])
m4/build-to-host.m4:AC_DEFUN([gl_BUILD_TO_HOST],
m4/build-to-host.m4:  AC_REQUIRE([gl_BUILD_TO_HOST_INIT])
m4/build-to-host.m4:  gl_final_[$1]="$[$1]"
m4/build-to-host.m4:          gl_final_[$1]=`cygpath -w "$gl_final_[$1]"` ;;
m4/build-to-host.m4:  [$1]_c=`printf '%s\n' "$gl_final_[$1]" | sed -e "$gl_sed_double_backslashes" -e "$gl_sed_escape_doublequotes" | tr -d "$gl_tr_cr"`
m4/build-to-host.m4:  [$1]_c_make=`printf '%s\n' "$[$1]_c" | sed -e "$gl_sed_escape_for_make_1" -e "$gl_sed_escape_for_make_2" | tr -d "$gl_tr_cr"`
m4/build-to-host.m4:  if test "$[$1]_c_make" = '\"'"${gl_final_[$1]}"'\"'; then
m4/build-to-host.m4:dnl Some initializations for gl_BUILD_TO_HOST.
m4/build-to-host.m4:AC_DEFUN([gl_BUILD_TO_HOST_INIT],
m4/build-to-host.m4:  gl_sed_double_backslashes='s/\\/\\\\/g'
m4/build-to-host.m4:  gl_sed_escape_doublequotes='s/"/\\"/g'
m4/build-to-host.m4:  gl_sed_escape_for_make_1="s,\\([ \"&'();<>\\\\\`|]\\),\\\\\\1,g"
m4/build-to-host.m4:  gl_sed_escape_for_make_2='s,\$,\\$$,g'
m4/build-to-host.m4:    '') gl_tr_cr='\015' ;;
m4/build-to-host.m4:    *)  gl_tr_cr='\r' ;;
m4/builtin-expect.m4:AC_DEFUN([gl___BUILTIN_EXPECT],
m4/builtin-expect.m4:    [gl_cv___builtin_expect],
m4/builtin-expect.m4:       [gl_cv___builtin_expect=yes],
m4/builtin-expect.m4:          [gl_cv___builtin_expect="in <builtins.h>"],
m4/builtin-expect.m4:          [gl_cv___builtin_expect=no])])])
m4/builtin-expect.m4:  if test "$gl_cv___builtin_expect" = yes; then
m4/builtin-expect.m4:  elif test "$gl_cv___builtin_expect" = "in <builtins.h>"; then
m4/byteswap.m4:AC_DEFUN([gl_BYTESWAP],
m4/byteswap.m4:      [gl_cv_header_working_byteswap_h],
m4/byteswap.m4:      [gl_cv_header_working_byteswap_h=no
m4/byteswap.m4:         [gl_cv_header_working_byteswap_h=yes],
m4/byteswap.m4:         [gl_cv_header_working_byteswap_h=no])
m4/byteswap.m4:  if test "$gl_cv_header_working_byteswap_h" = yes; then
m4/c-bool.m4:AC_DEFUN([gl_C_BOOL],
m4/c-bool.m4:  AC_CACHE_CHECK([for bool, true, false], [gl_cv_c_bool],
m4/c-bool.m4:       [gl_cv_c_bool=yes],
m4/c-bool.m4:       [gl_cv_c_bool=no])])
m4/c-bool.m4:  if test "$gl_cv_c_bool" = yes; then
m4/c-nstrftime.m4:AC_DEFUN([gl_C_GNU_STRFTIME],
m4/c-nstrftime.m4:  AC_REQUIRE([gl_TM_GMTOFF])
m4/c-nstrftime.m4:  gl_CHECK_FUNCS_ANDROID([strftime_l], [[#include <time.h>]])
m4/c-stack.m4:AC_DEFUN([gl_C_STACK],
m4/c-stack.m4:  AC_REQUIRE([gl_SIGSEGV])
m4/c-stack.m4:  if test $gl_sigsegv_uses_libsigsegv = yes; then
m4/c-strtod.m4:AC_DEFUN([gl_C_STRTOD],
m4/c-strtod.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/c-strtod.m4:  gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/c-strtod.m4:  AC_CACHE_CHECK([for strtod_l], [gl_cv_func_strtod_l],
m4/c-strtod.m4:       [gl_cv_func_strtod_l=yes],
m4/c-strtod.m4:       [gl_cv_func_strtod_l=no])
m4/c-strtod.m4:  if test $gl_cv_func_strtod_l = yes; then
m4/c-strtod.m4:AC_DEFUN([gl_C_STRTOF],
m4/c-strtod.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/c-strtod.m4:  gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/c-strtod.m4:  AC_CACHE_CHECK([for strtof_l], [gl_cv_func_strtof_l],
m4/c-strtod.m4:       [gl_cv_func_strtof_l=yes],
m4/c-strtod.m4:       [gl_cv_func_strtof_l=no])
m4/c-strtod.m4:  if test $gl_cv_func_strtof_l = yes; then
m4/c-strtod.m4:AC_DEFUN([gl_C_STRTOLD],
m4/c-strtod.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/c-strtod.m4:  gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/c-strtod.m4:  gl_CHECK_FUNCS_ANDROID([strtold_l], [[#include <stdlib.h>]])
m4/c32rtomb.m4:AC_DEFUN([gl_FUNC_C32RTOMB],
m4/c32rtomb.m4:  AC_REQUIRE([gl_UCHAR_H_DEFAULTS])
m4/c32rtomb.m4:  AC_REQUIRE([gl_MBRTOC32_SANITYCHECK])
m4/c32rtomb.m4:  AC_REQUIRE([gl_C32RTOMB_SANITYCHECK])
m4/c32rtomb.m4:  AC_REQUIRE([gl_CHECK_FUNC_C32RTOMB])
m4/c32rtomb.m4:  if test $gl_cv_func_c32rtomb = no; then
m4/c32rtomb.m4:      [gl_cv_func_c32rtomb_retval],
m4/c32rtomb.m4:          aix*) gl_cv_func_c32rtomb_retval="guessing no" ;;
m4/c32rtomb.m4:          *)    gl_cv_func_c32rtomb_retval="guessing yes" ;;
m4/c32rtomb.m4:          [gl_cv_func_c32rtomb_retval=yes],
m4/c32rtomb.m4:          [gl_cv_func_c32rtomb_retval=no],
m4/c32rtomb.m4:    case "$gl_cv_func_c32rtomb_retval" in
m4/c32rtomb.m4:AC_DEFUN([gl_CHECK_FUNC_C32RTOMB],
m4/c32rtomb.m4:  dnl Cf. gl_CHECK_FUNCS_ANDROID
m4/c32rtomb.m4:    AC_CACHE_CHECK([for c32rtomb], [gl_cv_func_c32rtomb],
m4/c32rtomb.m4:         [gl_cv_func_c32rtomb=yes],
m4/c32rtomb.m4:         [gl_cv_func_c32rtomb=no])
m4/c32rtomb.m4:    gl_cv_func_c32rtomb=no
m4/c32rtomb.m4:AC_DEFUN([gl_C32RTOMB_SANITYCHECK],
m4/c32rtomb.m4:  AC_REQUIRE([gl_TYPE_CHAR32_T])
m4/c32rtomb.m4:  AC_REQUIRE([gl_CHECK_FUNC_C32RTOMB])
m4/c32rtomb.m4:  if test $GNULIBHEADERS_OVERRIDE_CHAR32_T = 1 || test $gl_cv_func_c32rtomb = no; then
m4/c32rtomb.m4:      [gl_cv_func_c32rtomb_sanitycheck],
m4/c32rtomb.m4:              gl_cv_func_c32rtomb_sanitycheck="guessing yes"
m4/c32rtomb.m4:              gl_cv_func_c32rtomb_sanitycheck="guessing no"
m4/c32rtomb.m4:            gl_cv_func_c32rtomb_sanitycheck="guessing yes"
m4/c32rtomb.m4:            [gl_cv_func_c32rtomb_sanitycheck=yes],
m4/c32rtomb.m4:            [gl_cv_func_c32rtomb_sanitycheck=no],
m4/c32rtomb.m4:    case "$gl_cv_func_c32rtomb_sanitycheck" in
m4/calloc.m4:         *)                  ac_cv_func_calloc_0_nonnull="$gl_cross_guess_normal" ;;
m4/calloc.m4:# gl_FUNC_CALLOC_GNU
m4/calloc.m4:AC_DEFUN([gl_FUNC_CALLOC_GNU],
m4/calloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/calloc.m4:  AC_REQUIRE([gl_FUNC_CALLOC_POSIX])
m4/calloc.m4:])# gl_FUNC_CALLOC_GNU
m4/calloc.m4:# gl_FUNC_CALLOC_POSIX
m4/calloc.m4:AC_DEFUN([gl_FUNC_CALLOC_POSIX],
m4/calloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/calloc.m4:  AC_REQUIRE([gl_FUNC_MALLOC_POSIX])
m4/call_once.m4:AC_DEFUN([gl_FUNC_CALL_ONCE],
m4/call_once.m4:  AC_REQUIRE([gl_THREADS_H])
m4/call_once.m4:  gl_CHECK_FUNCS_ANDROID([call_once], [[#include <threads.h>]])
m4/call_once.m4:  case "$gl_cv_onwards_func_call_once" in
m4/call_once.m4:        [gl_cv_func_call_once_works],
m4/call_once.m4:           cygwin*) gl_cv_func_call_once_works="guessing no" ;;
m4/call_once.m4:           *)       gl_cv_func_call_once_works="yes" ;;
m4/call_once.m4:      case "$gl_cv_func_call_once_works" in
m4/canon-host.m4:AC_DEFUN([gl_PREREQ_CANON_HOST], [
m4/canonicalize.m4:AC_DEFUN([gl_FUNC_CANONICALIZE_FILENAME_MODE],
m4/canonicalize.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/canonicalize.m4:  AC_REQUIRE([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
m4/canonicalize.m4:  gl_CHECK_FUNCS_ANDROID([faccessat], [[#include <unistd.h>]])
m4/canonicalize.m4:  AC_REQUIRE([gl_DOUBLE_SLASH_ROOT])
m4/canonicalize.m4:  AC_REQUIRE([gl_FUNC_REALPATH_WORKS])
m4/canonicalize.m4:    case "$gl_cv_func_realpath_works" in
m4/canonicalize.m4:AC_DEFUN([gl_CANONICALIZE_LGPL],
m4/canonicalize.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/canonicalize.m4:  AC_REQUIRE([gl_CANONICALIZE_LGPL_SEPARATE])
m4/canonicalize.m4:      case "$gl_cv_func_realpath_works" in
m4/canonicalize.m4:    case "$gl_cv_func_realpath_works" in
m4/canonicalize.m4:# Like gl_CANONICALIZE_LGPL, except prepare for separate compilation
m4/canonicalize.m4:AC_DEFUN([gl_CANONICALIZE_LGPL_SEPARATE],
m4/canonicalize.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/canonicalize.m4:  AC_REQUIRE([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
m4/canonicalize.m4:  gl_CHECK_FUNCS_ANDROID([faccessat], [[#include <unistd.h>]])
m4/canonicalize.m4:  AC_REQUIRE([gl_DOUBLE_SLASH_ROOT])
m4/canonicalize.m4:  AC_REQUIRE([gl_FUNC_REALPATH_WORKS])
m4/canonicalize.m4:AC_DEFUN([gl_FUNC_REALPATH_WORKS],
m4/canonicalize.m4:  AC_CACHE_CHECK([whether realpath works], [gl_cv_func_realpath_works], [
m4/canonicalize.m4:     [gl_cv_func_realpath_works=yes],
m4/canonicalize.m4:        32) gl_cv_func_realpath_works=nearly ;;
m4/canonicalize.m4:        *)  gl_cv_func_realpath_works=no ;;
m4/canonicalize.m4:        *-gnu* | gnu*)     gl_cv_func_realpath_works="guessing yes" ;;
m4/canonicalize.m4:        *-musl*)           gl_cv_func_realpath_works="guessing nearly" ;;
m4/canonicalize.m4:        darwin*)           gl_cv_func_realpath_works="guessing no" ;;
m4/canonicalize.m4:        cygwin*)           gl_cv_func_realpath_works="guessing no" ;;
m4/canonicalize.m4:        mingw* | windows*) gl_cv_func_realpath_works="guessing no" ;;
m4/canonicalize.m4:        *)                 gl_cv_func_realpath_works="$gl_cross_guess_normal" ;;
m4/canonicalize.m4:  case "$gl_cv_func_realpath_works" in
m4/cbrt.m4:AC_DEFUN([gl_FUNC_CBRT],
m4/cbrt.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/cbrt.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/cbrt.m4:  gl_COMMON_DOUBLE_MATHFUNC([cbrt])
m4/cbrt.m4:    AC_REQUIRE([gl_FUNC_FABS])
m4/cbrt.m4:    AC_REQUIRE([gl_FUNC_FREXP])
m4/cbrt.m4:    AC_REQUIRE([gl_FUNC_LDEXP])
m4/cbrtf.m4:AC_DEFUN([gl_FUNC_CBRTF],
m4/cbrtf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/cbrtf.m4:  AC_REQUIRE([gl_FUNC_CBRT])
m4/cbrtf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/cbrtf.m4:    gl_FUNC_CBRTF_WORKS
m4/cbrtf.m4:    case "$gl_cv_func_cbrtf_works" in
m4/cbrtf.m4:    AC_REQUIRE([gl_FUNC_FABSF])
m4/cbrtf.m4:    AC_REQUIRE([gl_FUNC_FREXPF])
m4/cbrtf.m4:    AC_REQUIRE([gl_FUNC_LDEXPF])
m4/cbrtf.m4:AC_DEFUN([gl_FUNC_CBRTF_WORKS],
m4/cbrtf.m4:  AC_CACHE_CHECK([whether cbrtf works], [gl_cv_func_cbrtf_works],
m4/cbrtf.m4:        [gl_cv_func_cbrtf_works=yes],
m4/cbrtf.m4:        [gl_cv_func_cbrtf_works=no],
m4/cbrtf.m4:           irix*)             gl_cv_func_cbrtf_works="guessing no";;
m4/cbrtf.m4:           mingw* | windows*) gl_cv_func_cbrtf_works="guessing yes";;
m4/cbrtf.m4:           *)                 gl_cv_func_cbrtf_works="guessing yes";;
m4/cbrtl-ieee.m4:dnl module description), so that gl_FUNC_CBRTL can test whether 'aclocal' has
m4/cbrtl-ieee.m4:AC_DEFUN([gl_FUNC_CBRTL_IEEE],
m4/cbrtl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_cbrtl_required=ieee])
m4/cbrtl-ieee.m4:  AC_REQUIRE([gl_FUNC_CBRTL])
m4/cbrtl.m4:AC_DEFUN([gl_FUNC_CBRTL],
m4/cbrtl.m4:  m4_divert_text([DEFAULTS], [gl_cbrtl_required=plain])
m4/cbrtl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/cbrtl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/cbrtl.m4:  AC_REQUIRE([gl_FUNC_CBRT])
m4/cbrtl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/cbrtl.m4:    gl_FUNC_CBRTL_WORKS
m4/cbrtl.m4:    case "$gl_cv_func_cbrtl_works" in
m4/cbrtl.m4:    m4_ifdef([gl_FUNC_CBRTL_IEEE], [
m4/cbrtl.m4:      if test $gl_cbrtl_required = ieee && test $REPLACE_CBRTL = 0; then
m4/cbrtl.m4:          [gl_cv_func_cbrtl_ieee],
m4/cbrtl.m4:]gl_LONG_DOUBLE_MINUS_ZERO_CODE[
m4/cbrtl.m4:]gl_LONG_DOUBLE_SIGNBIT_CODE[
m4/cbrtl.m4:              [gl_cv_func_cbrtl_ieee=yes],
m4/cbrtl.m4:              [gl_cv_func_cbrtl_ieee=no],
m4/cbrtl.m4:                 *-gnu* | gnu*)      gl_cv_func_cbrtl_ieee="guessing yes" ;;
m4/cbrtl.m4:                 *-musl* | midipix*) gl_cv_func_cbrtl_ieee="guessing yes" ;;
m4/cbrtl.m4:                 mingw* | windows*)  gl_cv_func_cbrtl_ieee="guessing yes" ;;
m4/cbrtl.m4:                 *)                  gl_cv_func_cbrtl_ieee="$gl_cross_guess_normal" ;;
m4/cbrtl.m4:        case "$gl_cv_func_cbrtl_ieee" in
m4/cbrtl.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/cbrtl.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/cbrtl.m4:AC_DEFUN([gl_FUNC_CBRTL_WORKS],
m4/cbrtl.m4:  AC_CACHE_CHECK([whether cbrtl works], [gl_cv_func_cbrtl_works],
m4/cbrtl.m4:        [gl_cv_func_cbrtl_works=yes],
m4/cbrtl.m4:        [gl_cv_func_cbrtl_works=no],
m4/cbrtl.m4:           openbsd*)          gl_cv_func_cbrtl_works="guessing no";;
m4/cbrtl.m4:           mingw* | windows*) gl_cv_func_cbrtl_works="guessing yes";;
m4/cbrtl.m4:           *)                 gl_cv_func_cbrtl_works="guessing yes";;
m4/ceil-ieee.m4:dnl module description), so that gl_FUNC_CEIL can test whether 'aclocal' has
m4/ceil-ieee.m4:AC_DEFUN([gl_FUNC_CEIL_IEEE],
m4/ceil-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_ceil_required=ieee])
m4/ceil-ieee.m4:  AC_REQUIRE([gl_FUNC_CEIL])
m4/ceil.m4:AC_DEFUN([gl_FUNC_CEIL],
m4/ceil.m4:  m4_divert_text([DEFAULTS], [gl_ceil_required=plain])
m4/ceil.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ceil.m4:  gl_FUNC_CEIL_LIBS
m4/ceil.m4:  m4_ifdef([gl_FUNC_CEIL_IEEE], [
m4/ceil.m4:    if test $gl_ceil_required = ieee && test $REPLACE_CEIL = 0; then
m4/ceil.m4:        [gl_cv_func_ceil_ieee],
m4/ceil.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/ceil.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/ceil.m4:            [gl_cv_func_ceil_ieee=yes],
m4/ceil.m4:            [gl_cv_func_ceil_ieee=no],
m4/ceil.m4:               *-gnu* | gnu*)      gl_cv_func_ceil_ieee="guessing yes" ;;
m4/ceil.m4:               *-musl* | midipix*) gl_cv_func_ceil_ieee="guessing yes" ;;
m4/ceil.m4:               mingw* | windows*)  gl_cv_func_ceil_ieee="guessing yes" ;;
m4/ceil.m4:               *)                  gl_cv_func_ceil_ieee="$gl_cross_guess_normal" ;;
m4/ceil.m4:      case "$gl_cv_func_ceil_ieee" in
m4/ceil.m4:AC_DEFUN([gl_FUNC_CEIL_LIBS],
m4/ceil.m4:  gl_CACHE_VAL_SILENT([gl_cv_func_ceil_libm], [
m4/ceil.m4:    gl_cv_func_ceil_libm=?
m4/ceil.m4:      [gl_cv_func_ceil_libm=])
m4/ceil.m4:    if test "$gl_cv_func_ceil_libm" = "?"; then
m4/ceil.m4:        [gl_cv_func_ceil_libm="-lm"])
m4/ceil.m4:  CEIL_LIBM="$gl_cv_func_ceil_libm"
m4/ceilf-ieee.m4:dnl module description), so that gl_FUNC_CEILF can test whether 'aclocal' has
m4/ceilf-ieee.m4:AC_DEFUN([gl_FUNC_CEILF_IEEE],
m4/ceilf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_ceilf_required=ieee])
m4/ceilf-ieee.m4:  AC_REQUIRE([gl_FUNC_CEILF])
m4/ceilf.m4:AC_DEFUN([gl_FUNC_CEILF],
m4/ceilf.m4:  m4_divert_text([DEFAULTS], [gl_ceilf_required=plain])
m4/ceilf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ceilf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ceilf.m4:    gl_FUNC_CEILF_LIBS
m4/ceilf.m4:    m4_ifdef([gl_FUNC_CEILF_IEEE], [
m4/ceilf.m4:      if test $gl_ceilf_required = ieee && test $REPLACE_CEILF = 0; then
m4/ceilf.m4:          [gl_cv_func_ceilf_ieee],
m4/ceilf.m4:]gl_FLOAT_MINUS_ZERO_CODE[
m4/ceilf.m4:]gl_FLOAT_SIGNBIT_CODE[
m4/ceilf.m4:              [gl_cv_func_ceilf_ieee=yes],
m4/ceilf.m4:              [gl_cv_func_ceilf_ieee=no],
m4/ceilf.m4:                 *-gnu* | gnu*)      gl_cv_func_ceilf_ieee="guessing yes" ;;
m4/ceilf.m4:                 *-musl* | midipix*) gl_cv_func_ceilf_ieee="guessing yes" ;;
m4/ceilf.m4:                 mingw* | windows*)  gl_cv_func_ceilf_ieee="guessing yes" ;;
m4/ceilf.m4:                 *)                  gl_cv_func_ceilf_ieee="$gl_cross_guess_normal" ;;
m4/ceilf.m4:        case "$gl_cv_func_ceilf_ieee" in
m4/ceilf.m4:AC_DEFUN([gl_FUNC_CEILF_LIBS],
m4/ceilf.m4:  gl_CACHE_VAL_SILENT([gl_cv_func_ceilf_libm], [
m4/ceilf.m4:    gl_cv_func_ceilf_libm=?
m4/ceilf.m4:      [gl_cv_func_ceilf_libm=])
m4/ceilf.m4:    if test "$gl_cv_func_ceilf_libm" = "?"; then
m4/ceilf.m4:        [gl_cv_func_ceilf_libm="-lm"])
m4/ceilf.m4:  CEILF_LIBM="$gl_cv_func_ceilf_libm"
m4/ceill-ieee.m4:dnl module description), so that gl_FUNC_CEILL can test whether 'aclocal' has
m4/ceill-ieee.m4:AC_DEFUN([gl_FUNC_CEILL_IEEE],
m4/ceill-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_ceill_required=ieee])
m4/ceill-ieee.m4:  AC_REQUIRE([gl_FUNC_CEILL])
m4/ceill.m4:AC_DEFUN([gl_FUNC_CEILL],
m4/ceill.m4:  m4_divert_text([DEFAULTS], [gl_ceill_required=plain])
m4/ceill.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ceill.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/ceill.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ceill.m4:    gl_FUNC_CEILL_LIBS
m4/ceill.m4:    m4_ifdef([gl_FUNC_CEILL_IEEE], [
m4/ceill.m4:      if test $gl_ceill_required = ieee && test $REPLACE_CEILL = 0; then
m4/ceill.m4:          [gl_cv_func_ceill_ieee],
m4/ceill.m4:]gl_LONG_DOUBLE_MINUS_ZERO_CODE[
m4/ceill.m4:]gl_LONG_DOUBLE_SIGNBIT_CODE[
m4/ceill.m4:              [gl_cv_func_ceill_ieee=yes],
m4/ceill.m4:              [gl_cv_func_ceill_ieee=no],
m4/ceill.m4:                 *-gnu* | gnu*)      gl_cv_func_ceill_ieee="guessing yes" ;;
m4/ceill.m4:                 *-musl* | midipix*) gl_cv_func_ceill_ieee="guessing yes" ;;
m4/ceill.m4:                 mingw* | windows*)  gl_cv_func_ceill_ieee="guessing yes" ;;
m4/ceill.m4:                 *)                  gl_cv_func_ceill_ieee="$gl_cross_guess_normal" ;;
m4/ceill.m4:        case "$gl_cv_func_ceill_ieee" in
m4/ceill.m4:      [gl_cv_func_ceill_works],
m4/ceill.m4:         [gl_cv_func_ceill_works=yes],
m4/ceill.m4:         [gl_cv_func_ceill_works=no],
m4/ceill.m4:            openbsd*) gl_cv_func_ceill_works="guessing no" ;;
m4/ceill.m4:            mingw* | windows*) gl_cv_func_ceill_works="guessing yes" ;;
m4/ceill.m4:            *)                 gl_cv_func_ceill_works="guessing yes" ;;
m4/ceill.m4:    case "$gl_cv_func_ceill_works" in
m4/ceill.m4:      AC_REQUIRE([gl_FUNC_CEIL])
m4/ceill.m4:AC_DEFUN([gl_FUNC_CEILL_LIBS],
m4/ceill.m4:  gl_CACHE_VAL_SILENT([gl_cv_func_ceill_libm], [
m4/ceill.m4:    gl_cv_func_ceill_libm=?
m4/ceill.m4:      [gl_cv_func_ceill_libm=])
m4/ceill.m4:    if test "$gl_cv_func_ceill_libm" = "?"; then
m4/ceill.m4:        [gl_cv_func_ceill_libm="-lm"])
m4/ceill.m4:  CEILL_LIBM="$gl_cv_func_ceill_libm"
m4/chdir-long.m4:AC_DEFUN([gl_FUNC_CHDIR_LONG],
m4/chdir-long.m4:  AC_REQUIRE([gl_PATHMAX_SNIPPET_PREREQ])
m4/chdir-long.m4:    [gl_cv_have_unlimited_file_name_length],
m4/chdir-long.m4:                  gl_PATHMAX_SNIPPET[
m4/chdir-long.m4:    [gl_cv_have_unlimited_file_name_length=no],
m4/chdir-long.m4:    [gl_cv_have_unlimited_file_name_length=yes])])
m4/chdir-long.m4:AC_DEFUN([gl_PREREQ_CHDIR_LONG], [:])
m4/check-math-lib.m4:dnl gl_CHECK_MATH_LIB (VARIABLE, TYPE, EXPRESSION [, EXTRA-CODE])
m4/check-math-lib.m4:dnl Example: gl_CHECK_MATH_LIB([ROUNDF_LIBM], [float], [x = roundf (x);])
m4/check-math-lib.m4:AC_DEFUN([gl_CHECK_MATH_LIB], [
m4/chmod.m4:AC_DEFUN([gl_FUNC_CHMOD],
m4/chmod.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/chmod.m4:    [gl_cv_func_chmod_works],
m4/chmod.m4:       [gl_cv_func_chmod_works=yes],
m4/chmod.m4:       [gl_cv_func_chmod_works=no],
m4/chmod.m4:            gl_cv_func_chmod_works="guessing no" ;;
m4/chmod.m4:            gl_cv_func_chmod_works="guessing yes" ;;
m4/chmod.m4:            gl_cv_func_chmod_works="guessing yes" ;;
m4/chmod.m4:            gl_cv_func_chmod_works="$gl_cross_guess_normal" ;;
m4/chmod.m4:  case "$gl_cv_func_chmod_works" in
m4/chmod.m4:AC_DEFUN([gl_PREREQ_CHMOD],
m4/chown.m4:          *)                 ac_cv_func_chown_works="$gl_cross_guess_normal" ;;
m4/chown.m4:AC_DEFUN_ONCE([gl_FUNC_CHOWN],
m4/chown.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/chown.m4:  AC_REQUIRE([gl_FUNC_CHOWN_FOLLOWS_SYMLINK])
m4/chown.m4:    case "$gl_cv_func_chown_follows_symlink" in
m4/chown.m4:      [gl_cv_func_chown_slash_works],
m4/chown.m4:        [gl_cv_func_chown_slash_works=yes],
m4/chown.m4:        [gl_cv_func_chown_slash_works=no],
m4/chown.m4:           *-gnu*)  gl_cv_func_chown_slash_works="guessing yes" ;;
m4/chown.m4:           *-musl*) gl_cv_func_chown_slash_works="guessing yes" ;;
m4/chown.m4:           *)       gl_cv_func_chown_slash_works="$gl_cross_guess_normal" ;;
m4/chown.m4:    case "$gl_cv_func_chown_slash_works" in
m4/chown.m4:      [gl_cv_func_chown_ctime_works],
m4/chown.m4:        [gl_cv_func_chown_ctime_works=yes],
m4/chown.m4:        [gl_cv_func_chown_ctime_works=no],
m4/chown.m4:           *-gnu*)  gl_cv_func_chown_ctime_works="guessing yes" ;;
m4/chown.m4:           *-musl*) gl_cv_func_chown_ctime_works="guessing yes" ;;
m4/chown.m4:           *)       gl_cv_func_chown_ctime_works="$gl_cross_guess_normal" ;;
m4/chown.m4:    case "$gl_cv_func_chown_ctime_works" in
m4/chown.m4:AC_DEFUN_ONCE([gl_FUNC_CHOWN_FOLLOWS_SYMLINK],
m4/chown.m4:    [gl_cv_func_chown_follows_symlink],
m4/chown.m4:        [gl_cv_func_chown_follows_symlink=yes],
m4/chown.m4:        [gl_cv_func_chown_follows_symlink=no],
m4/chown.m4:        [gl_cv_func_chown_follows_symlink="guessing yes"]
m4/chown.m4:  case "$gl_cv_func_chown_follows_symlink" in
m4/clock_time.m4:AC_DEFUN([gl_CLOCK_TIME],
m4/clock_time.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/clock_time.m4:      gl_saved_libs=$LIBS
m4/clock_time.m4:      LIBS=$gl_saved_libs
m4/close.m4:AC_DEFUN_ONCE([gl_FUNC_CLOSE],
m4/close.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/close.m4:  m4_ifdef([gl_MSVC_INVAL], [
m4/close.m4:    AC_REQUIRE([gl_MSVC_INVAL])
m4/close.m4:  m4_ifdef([gl_PREREQ_SYS_H_WINSOCK2], [
m4/close.m4:    gl_PREREQ_SYS_H_WINSOCK2
m4/close.m4:  m4_ifdef([gl_FUNC_FCHDIR], [
m4/close.m4:      gl_TEST_FCHDIR
m4/closedir.m4:AC_DEFUN([gl_FUNC_CLOSEDIR],
m4/closedir.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/closedir.m4:    AC_REQUIRE([gl_DIRENT_DIR])
m4/closedir.m4:    m4_ifdef([gl_FUNC_FCHDIR], [
m4/closedir.m4:      gl_TEST_FCHDIR
m4/cnd.m4:AC_DEFUN([gl_FUNC_CND_INIT],
m4/cnd.m4:  AC_REQUIRE([gl_THREADS_H])
m4/cnd.m4:  gl_CHECK_FUNCS_ANDROID([cnd_init], [[#include <threads.h>]])
m4/cnd.m4:  case "$gl_cv_onwards_func_cnd_init" in
m4/cond.m4:AC_DEFUN([gl_COND],
m4/cond.m4:  AC_REQUIRE([gl_THREADLIB])
m4/config-h.m4:AC_DEFUN([gl_CONFIG_H],
m4/configmake.m4:# gl_CONFIGMAKE_PREP
m4/configmake.m4:AC_DEFUN([gl_CONFIGMAKE_PREP],
m4/configmake.m4:  dnl gl_CONFIGMAKE can compute the final values at configure time.
m4/configmake.m4:# gl_CONFIGMAKE
m4/configmake.m4:AC_DEFUN([gl_CONFIGMAKE],
m4/configmake.m4:  AC_REQUIRE([gl_CONFIGMAKE_PREP])
m4/configmake.m4:  gl_saved_prefix="${prefix}"
m4/configmake.m4:  gl_saved_exec_prefix="${exec_prefix}"
m4/configmake.m4:  gl_saved_bindir="${bindir}"
m4/configmake.m4:  gl_saved_sbindir="${sbindir}"
m4/configmake.m4:  gl_saved_libexecdir="${libexecdir}"
m4/configmake.m4:  gl_saved_datarootdir="${datarootdir}"
m4/configmake.m4:  gl_saved_datadir="${datadir}"
m4/configmake.m4:  gl_saved_sysconfdir="${sysconfdir}"
m4/configmake.m4:  gl_saved_sharedstatedir="${sharedstatedir}"
m4/configmake.m4:  gl_saved_localstatedir="${localstatedir}"
m4/configmake.m4:  gl_saved_runstatedir="${runstatedir}"
m4/configmake.m4:  gl_saved_includedir="${includedir}"
m4/configmake.m4:  gl_saved_oldincludedir="${oldincludedir}"
m4/configmake.m4:  gl_saved_docdir="${docdir}"
m4/configmake.m4:  gl_saved_infodir="${infodir}"
m4/configmake.m4:  gl_saved_htmldir="${htmldir}"
m4/configmake.m4:  gl_saved_dvidir="${dvidir}"
m4/configmake.m4:  gl_saved_pdfdir="${pdfdir}"
m4/configmake.m4:  gl_saved_psdir="${psdir}"
m4/configmake.m4:  gl_saved_libdir="${libdir}"
m4/configmake.m4:  gl_saved_lispdir="${lispdir}"
m4/configmake.m4:  gl_saved_localedir="${localedir}"
m4/configmake.m4:  gl_saved_mandir="${mandir}"
m4/configmake.m4:  gl_saved_pkgdatadir="${pkgdatadir}"
m4/configmake.m4:  gl_saved_pkgincludedir="${pkgincludedir}"
m4/configmake.m4:  gl_saved_pkglibdir="${pkglibdir}"
m4/configmake.m4:  gl_saved_pkglibexecdir="${pkglibexecdir}"
m4/configmake.m4:  gl_BUILD_TO_HOST([prefix])
m4/configmake.m4:  gl_BUILD_TO_HOST([exec_prefix])
m4/configmake.m4:  gl_BUILD_TO_HOST([bindir])
m4/configmake.m4:  gl_BUILD_TO_HOST([sbindir])
m4/configmake.m4:  gl_BUILD_TO_HOST([libexecdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([datarootdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([datadir])
m4/configmake.m4:  gl_BUILD_TO_HOST([sysconfdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([sharedstatedir])
m4/configmake.m4:  gl_BUILD_TO_HOST([localstatedir])
m4/configmake.m4:  gl_BUILD_TO_HOST([runstatedir])
m4/configmake.m4:  gl_BUILD_TO_HOST([includedir])
m4/configmake.m4:  gl_BUILD_TO_HOST([oldincludedir])
m4/configmake.m4:  gl_BUILD_TO_HOST([docdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([infodir])
m4/configmake.m4:  gl_BUILD_TO_HOST([htmldir])
m4/configmake.m4:  gl_BUILD_TO_HOST([dvidir])
m4/configmake.m4:  gl_BUILD_TO_HOST([pdfdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([psdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([libdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([lispdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([localedir])
m4/configmake.m4:  gl_BUILD_TO_HOST([mandir])
m4/configmake.m4:  gl_BUILD_TO_HOST([pkgdatadir])
m4/configmake.m4:  gl_BUILD_TO_HOST([pkgincludedir])
m4/configmake.m4:  gl_BUILD_TO_HOST([pkglibdir])
m4/configmake.m4:  gl_BUILD_TO_HOST([pkglibexecdir])
m4/configmake.m4:  pkglibexecdir="${gl_saved_pkglibexecdir}"
m4/configmake.m4:  pkglibdir="${gl_saved_pkglibdir}"
m4/configmake.m4:  pkgincludedir="${gl_saved_pkgincludedir}"
m4/configmake.m4:  pkgdatadir="${gl_saved_pkgdatadir}"
m4/configmake.m4:  mandir="${gl_saved_mandir}"
m4/configmake.m4:  localedir="${gl_saved_localedir}"
m4/configmake.m4:  lispdir="${gl_saved_lispdir}"
m4/configmake.m4:  libdir="${gl_saved_libdir}"
m4/configmake.m4:  psdir="${gl_saved_psdir}"
m4/configmake.m4:  pdfdir="${gl_saved_pdfdir}"
m4/configmake.m4:  dvidir="${gl_saved_dvidir}"
m4/configmake.m4:  htmldir="${gl_saved_htmldir}"
m4/configmake.m4:  infodir="${gl_saved_infodir}"
m4/configmake.m4:  docdir="${gl_saved_docdir}"
m4/configmake.m4:  oldincludedir="${gl_saved_oldincludedir}"
m4/configmake.m4:  includedir="${gl_saved_includedir}"
m4/configmake.m4:  runstatedir="${gl_saved_runstatedir}"
m4/configmake.m4:  localstatedir="${gl_saved_localstatedir}"
m4/configmake.m4:  sharedstatedir="${gl_saved_sharedstatedir}"
m4/configmake.m4:  sysconfdir="${gl_saved_sysconfdir}"
m4/configmake.m4:  datadir="${gl_saved_datadir}"
m4/configmake.m4:  datarootdir="${gl_saved_datarootdir}"
m4/configmake.m4:  libexecdir="${gl_saved_libexecdir}"
m4/configmake.m4:  sbindir="${gl_saved_sbindir}"
m4/configmake.m4:  bindir="${gl_saved_bindir}"
m4/configmake.m4:  exec_prefix="${gl_saved_exec_prefix}"
m4/configmake.m4:  prefix="${gl_saved_prefix}"
m4/copy-file-range.m4:AC_DEFUN([gl_FUNC_COPY_FILE_RANGE],
m4/copy-file-range.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/copy-file-range.m4:      AC_CACHE_CHECK([for copy_file_range], [gl_cv_func_copy_file_range],
m4/copy-file-range.m4:           [gl_cv_func_copy_file_range=yes],
m4/copy-file-range.m4:           [gl_cv_func_copy_file_range=no])
m4/copy-file-range.m4:      gl_cv_onwards_func_copy_file_range="$gl_cv_func_copy_file_range"
m4/copy-file-range.m4:      gl_CHECK_FUNCS_ANDROID([copy_file_range], [[#include <unistd.h>]])
m4/copy-file-range.m4:      gl_cv_func_copy_file_range="$ac_cv_func_copy_file_range"
m4/copy-file-range.m4:  if test "$gl_cv_func_copy_file_range" != yes; then
m4/copy-file-range.m4:    case "$gl_cv_onwards_func_copy_file_range" in
m4/copy-file.m4:AC_DEFUN([gl_COPY_FILE],
m4/copysign.m4:AC_DEFUN([gl_FUNC_COPYSIGN],
m4/copysign.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/copysign.m4:  gl_MATHFUNC([copysign], [double], [(double, double)])
m4/copysign.m4:  if test $gl_cv_func_copysign_no_libm = no \
m4/copysign.m4:     && test $gl_cv_func_copysign_in_libm = no; then
m4/copysignf.m4:AC_DEFUN([gl_FUNC_COPYSIGNF],
m4/copysignf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/copysignf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/copysignf.m4:  gl_MATHFUNC([copysignf], [float], [(float, float)],
m4/copysignf.m4:  if test $gl_cv_func_copysignf_no_libm = yes \
m4/copysignf.m4:     || test $gl_cv_func_copysignf_in_libm = yes; then
m4/copysignl.m4:AC_DEFUN([gl_FUNC_COPYSIGNL],
m4/copysignl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/copysignl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/copysignl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/copysignl.m4:  gl_MATHFUNC([copysignl], [long double], [(long double, long double)])
m4/copysignl.m4:  if test $gl_cv_func_copysignl_no_libm = no \
m4/copysignl.m4:     && test $gl_cv_func_copysignl_in_libm = no; then
m4/copysignl.m4:      AC_REQUIRE([gl_FUNC_COPYSIGN])
m4/cos.m4:AC_DEFUN([gl_FUNC_COS],
m4/cos.m4:  gl_COMMON_DOUBLE_MATHFUNC([cos])
m4/cosf.m4:AC_DEFUN([gl_FUNC_COSF],
m4/cosf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/cosf.m4:  AC_REQUIRE([gl_FUNC_COS])
m4/cosf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/cosh.m4:AC_DEFUN([gl_FUNC_COSH],
m4/cosh.m4:  gl_COMMON_DOUBLE_MATHFUNC([cosh])
m4/coshf.m4:AC_DEFUN([gl_FUNC_COSHF],
m4/coshf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/coshf.m4:  AC_REQUIRE([gl_FUNC_COSH])
m4/coshf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/cosl.m4:AC_DEFUN([gl_FUNC_COSL],
m4/cosl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/cosl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/cosl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/cosl.m4:    [gl_cv_func_cosl_no_libm],
m4/cosl.m4:        [gl_cv_func_cosl_no_libm=yes],
m4/cosl.m4:        [gl_cv_func_cosl_no_libm=no])
m4/cosl.m4:  if test $gl_cv_func_cosl_no_libm = no; then
m4/cosl.m4:      [gl_cv_func_cosl_in_libm],
m4/cosl.m4:          [gl_cv_func_cosl_in_libm=yes],
m4/cosl.m4:          [gl_cv_func_cosl_in_libm=no])
m4/cosl.m4:    if test $gl_cv_func_cosl_in_libm = yes; then
m4/cosl.m4:  if test $gl_cv_func_cosl_no_libm = yes \
m4/cosl.m4:     || test $gl_cv_func_cosl_in_libm = yes; then
m4/cosl.m4:      AC_REQUIRE([gl_FUNC_COS])
m4/cosl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/cosl.m4:      AC_REQUIRE([gl_FUNC_FLOOR])
m4/cosl.m4:      AC_REQUIRE([gl_FUNC_FLOORL])
m4/creat.m4:AC_DEFUN([gl_FUNC_CREAT],
m4/creat.m4:      gl_OPEN_TRAILING_SLASH_BUG
m4/creat.m4:      case "$gl_cv_func_open_slash" in
m4/ctime.m4:AC_DEFUN([gl_FUNC_CTIME],
m4/ctime.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/ctype_h.m4:AC_DEFUN_ONCE([gl_CTYPE_H],
m4/ctype_h.m4:  AC_REQUIRE([gl_CTYPE_H_DEFAULTS])
m4/ctype_h.m4:  gl_NEXT_HEADERS([ctype.h])
m4/ctype_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <ctype.h>
m4/ctype_h.m4:# gl_CTYPE_MODULE_INDICATOR([modulename])
m4/ctype_h.m4:AC_DEFUN([gl_CTYPE_MODULE_INDICATOR],
m4/ctype_h.m4:  gl_CTYPE_H_REQUIRE_DEFAULTS
m4/ctype_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/ctype_h.m4:AC_DEFUN([gl_CTYPE_H_REQUIRE_DEFAULTS],
m4/ctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISBLANK])
m4/ctype_h.m4:  AC_REQUIRE([gl_CTYPE_H_DEFAULTS])
m4/ctype_h.m4:AC_DEFUN([gl_CTYPE_H_DEFAULTS],
m4/curses.m4:# Sets gl_curses_allowed to yes or no.
m4/curses.m4:AC_DEFUN([gl_CURSES],
m4/curses.m4:    [gl_curses_allowed="$enableval"],
m4/curses.m4:    [gl_curses_allowed=yes])
m4/curses.m4:  AC_MSG_RESULT([$gl_curses_allowed])
m4/cycle-check.m4:AC_DEFUN([gl_CYCLE_CHECK], [:])
m4/d-ino.m4:AC_DEFUN([gl_CHECK_TYPE_STRUCT_DIRENT_D_INO],
m4/d-ino.m4:                  [gl_cv_struct_dirent_d_ino],
m4/d-ino.m4:           [gl_cv_struct_dirent_d_ino=yes],
m4/d-ino.m4:           [gl_cv_struct_dirent_d_ino=no],
m4/d-ino.m4:              linux*-gnu*)       gl_cv_struct_dirent_d_ino="guessing yes" ;;
m4/d-ino.m4:              linux*-musl*)      gl_cv_struct_dirent_d_ino="guessing yes" ;;
m4/d-ino.m4:              midipix*)          gl_cv_struct_dirent_d_ino="guessing yes" ;;
m4/d-ino.m4:              mingw* | windows*) gl_cv_struct_dirent_d_ino="guessing no" ;;
m4/d-ino.m4:              *)                 gl_cv_struct_dirent_d_ino="$gl_cross_guess_normal" ;;
m4/d-ino.m4:   case "$gl_cv_struct_dirent_d_ino" in
m4/d-type.m4:AC_DEFUN([gl_CHECK_TYPE_STRUCT_DIRENT_D_TYPE],
m4/d-type.m4:                  [gl_cv_struct_dirent_d_type],
m4/d-type.m4:       [gl_cv_struct_dirent_d_type=yes],
m4/d-type.m4:       [gl_cv_struct_dirent_d_type=no])
m4/d-type.m4:   if test $gl_cv_struct_dirent_d_type = yes; then
m4/dirent-safer.m4:AC_DEFUN([gl_DIRENT_SAFER],
m4/dirent_h.m4:AC_DEFUN_ONCE([gl_DIRENT_H],
m4/dirent_h.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/dirent_h.m4:  gl_CHECK_NEXT_HEADERS([dirent.h])
m4/dirent_h.m4:  gl_DIRENT_DIR
m4/dirent_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <dirent.h>
m4/dirent_h.m4:AC_DEFUN_ONCE([gl_DIRENT_DIR],
m4/dirent_h.m4:  dnl We could use the findings from gl_FUNC_DIRFD and gl_PREREQ_DIRFD, but
m4/dirent_h.m4:# gl_DIRENT_MODULE_INDICATOR([modulename])
m4/dirent_h.m4:AC_DEFUN([gl_DIRENT_MODULE_INDICATOR],
m4/dirent_h.m4:  gl_DIRENT_H_REQUIRE_DEFAULTS
m4/dirent_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/dirent_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/dirent_h.m4:AC_DEFUN([gl_DIRENT_H_REQUIRE_DEFAULTS],
m4/dirent_h.m4:    gl_UNISTD_H_REQUIRE_DEFAULTS dnl for REPLACE_FCHDIR
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OPENDIR])
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_READDIR])
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REWINDDIR])
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CLOSEDIR])
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_DIRFD])
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FDOPENDIR])
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SCANDIR])
m4/dirent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ALPHASORT])
m4/dirent_h.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/dirent_h.m4:AC_DEFUN([gl_DIRENT_H_DEFAULTS],
m4/dirfd.m4:AC_DEFUN([gl_FUNC_DIRFD],
m4/dirfd.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/dirfd.m4:    [gl_cv_func_dirfd_macro],
m4/dirfd.m4:       [gl_cv_func_dirfd_macro=yes],
m4/dirfd.m4:       [gl_cv_func_dirfd_macro=no])])
m4/dirfd.m4:  if test $ac_cv_func_dirfd = no && test $gl_cv_func_dirfd_macro = no; then
m4/dirfd.m4:    AC_REQUIRE([gl_DIRENT_DIR])
m4/dirfd.m4:AC_DEFUN([gl_PREREQ_DIRFD],
m4/dirfd.m4:                 [gl_cv_sys_dir_fd_member_name],
m4/dirfd.m4:      gl_saved_CFLAGS=$CFLAGS
m4/dirfd.m4:        CFLAGS=$gl_saved_CFLAGS
m4/dirfd.m4:      gl_cv_sys_dir_fd_member_name=$ac_expr
m4/dirfd.m4:  if test $gl_cv_sys_dir_fd_member_name != no_such_member; then
m4/dirfd.m4:      [$gl_cv_sys_dir_fd_member_name],
m4/double-slash-root.m4:AC_DEFUN([gl_DOUBLE_SLASH_ROOT],
m4/double-slash-root.m4:  AC_CACHE_CHECK([whether // is distinct from /], [gl_cv_double_slash_root],
m4/double-slash-root.m4:            gl_cv_double_slash_root=yes ;;
m4/double-slash-root.m4:            gl_cv_double_slash_root='unknown, assuming no' ;;
m4/double-slash-root.m4:          gl_cv_double_slash_root=no
m4/double-slash-root.m4:          gl_cv_double_slash_root=yes
m4/double-slash-root.m4:  if test "$gl_cv_double_slash_root" = yes; then
m4/dprintf-gnu.m4:AC_DEFUN([gl_FUNC_DPRINTF_GNU],
m4/dprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_DPRINTF_IS_POSIX])
m4/dprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/dprintf-gnu.m4:  gl_cv_func_dprintf_gnu=no
m4/dprintf-gnu.m4:  if test $gl_cv_func_dprintf_posix = yes; then
m4/dprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/dprintf-gnu.m4:        gl_cv_func_dprintf_gnu=yes
m4/dprintf-gnu.m4:  if test $gl_cv_func_dprintf_gnu = no; then
m4/dprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/dprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/dprintf-gnu.m4:    gl_REPLACE_DPRINTF
m4/dprintf-posix.m4:AC_DEFUN([gl_FUNC_DPRINTF_POSIX],
m4/dprintf-posix.m4:  AC_REQUIRE([gl_FUNC_DPRINTF_IS_POSIX])
m4/dprintf-posix.m4:  if test $gl_cv_func_dprintf_posix = no; then
m4/dprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/dprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/dprintf-posix.m4:    gl_REPLACE_DPRINTF
m4/dprintf-posix.m4:dnl Result is gl_cv_func_dprintf_posix.
m4/dprintf-posix.m4:AC_DEFUN([gl_FUNC_DPRINTF_IS_POSIX],
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/dprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/dprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/dprintf-posix.m4:  gl_cv_func_dprintf_posix=no
m4/dprintf-posix.m4:  gl_CHECK_FUNCS_ANDROID([dprintf], [[#include <stdio.h>]])
m4/dprintf-posix.m4:    case "$gl_cv_func_printf_sizes_c99" in
m4/dprintf-posix.m4:        case "$gl_cv_func_printf_sizes_c23" in
m4/dprintf-posix.m4:            case "$gl_cv_func_printf_long_double" in
m4/dprintf-posix.m4:                case "$gl_cv_func_printf_infinite" in
m4/dprintf-posix.m4:                    case "$gl_cv_func_printf_infinite_long_double" in
m4/dprintf-posix.m4:                        case "$gl_cv_func_printf_directive_a" in
m4/dprintf-posix.m4:                            case "$gl_cv_func_printf_directive_b" in
m4/dprintf-posix.m4:                                case "$gl_cv_func_printf_directive_f" in
m4/dprintf-posix.m4:                                    case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/dprintf-posix.m4:                                        case "$gl_cv_func_printf_directive_ls" in
m4/dprintf-posix.m4:                                            case "$gl_cv_func_printf_directive_lc" in
m4/dprintf-posix.m4:                                                case "$gl_cv_func_printf_positions" in
m4/dprintf-posix.m4:                                                    case "$gl_cv_func_printf_flag_grouping" in
m4/dprintf-posix.m4:                                                        case "$gl_cv_func_printf_flag_leftadjust" in
m4/dprintf-posix.m4:                                                            case "$gl_cv_func_printf_flag_zero" in
m4/dprintf-posix.m4:                                                                case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/dprintf-posix.m4:                                                                    case "$gl_cv_func_printf_precision" in
m4/dprintf-posix.m4:                                                                        case "$gl_cv_func_printf_enomem" in
m4/dprintf-posix.m4:                                                                            gl_cv_func_dprintf_posix=yes
m4/dprintf.m4:AC_DEFUN([gl_FUNC_DPRINTF],
m4/dprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/dprintf.m4:  gl_CHECK_FUNCS_ANDROID([dprintf], [[#include <stdio.h>]])
m4/dprintf.m4:    gl_REPLACE_DPRINTF
m4/dprintf.m4:AC_DEFUN([gl_REPLACE_DPRINTF],
m4/dprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/dprintf.m4:     || case "$gl_cv_onwards_func_dprintf" in \
m4/dprintf.m4:  gl_PREREQ_DPRINTF
m4/dprintf.m4:AC_DEFUN([gl_PREREQ_DPRINTF], [:])
m4/dup.m4:AC_DEFUN([gl_FUNC_DUP],
m4/dup.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/dup.m4:  m4_ifdef([gl_MSVC_INVAL], [
m4/dup.m4:    AC_REQUIRE([gl_MSVC_INVAL])
m4/dup.m4:  m4_ifdef([gl_FUNC_FCHDIR], [
m4/dup.m4:    gl_TEST_FCHDIR
m4/dup.m4:  AC_CACHE_CHECK([whether dup works], [gl_cv_func_dup_works],
m4/dup.m4:      [gl_cv_func_dup_works=yes],
m4/dup.m4:      [gl_cv_func_dup_works=no],
m4/dup.m4:         mingw* | windows*) gl_cv_func_dup_works="guessing no" ;;
m4/dup.m4:         *)                 gl_cv_func_dup_works="guessing yes" ;;
m4/dup.m4:  case "$gl_cv_func_dup_works" in
m4/dup.m4:AC_DEFUN([gl_PREREQ_DUP], [:])
m4/dup2.m4:AC_DEFUN([gl_FUNC_DUP2],
m4/dup2.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/dup2.m4:  AC_CACHE_CHECK([whether dup2 works], [gl_cv_func_dup2_works],
m4/dup2.m4:      [gl_cv_func_dup2_works=yes], [gl_cv_func_dup2_works=no],
m4/dup2.m4:           gl_cv_func_dup2_works="guessing no" ;;
m4/dup2.m4:           gl_cv_func_dup2_works="guessing no" ;;
m4/dup2.m4:           gl_cv_func_dup2_works="guessing no" ;;
m4/dup2.m4:           gl_cv_func_dup2_works="guessing no" ;;
m4/dup2.m4:           gl_cv_func_dup2_works="guessing no" ;;
m4/dup2.m4:           gl_cv_func_dup2_works="guessing no" ;;
m4/dup2.m4:         *) gl_cv_func_dup2_works="guessing yes" ;;
m4/dup2.m4:  case "$gl_cv_func_dup2_works" in
m4/dup2.m4:  m4_ifdef([gl_FUNC_FCHDIR], [
m4/dup2.m4:    gl_TEST_FCHDIR
m4/dup2.m4:AC_DEFUN([gl_PREREQ_DUP2], [])
m4/dup3.m4:AC_DEFUN([gl_FUNC_DUP3],
m4/dup3.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/dup3.m4:  gl_CHECK_FUNCS_ANDROID([dup3], [[#include <unistd.h>]])
m4/dup3.m4:    case "$gl_cv_onwards_func_dup3" in
m4/dup3.m4:dnl  m4_ifdef([gl_FUNC_FCHDIR], [
m4/dup3.m4:dnl    gl_TEST_FCHDIR
m4/duplocale.m4:AC_DEFUN([gl_FUNC_DUPLOCALE],
m4/duplocale.m4:  AC_REQUIRE([gl_LOCALE_H_DEFAULTS])
m4/duplocale.m4:  AC_REQUIRE([gl_FUNC_SETLOCALE_NULL])
m4/duplocale.m4:  gl_CHECK_FUNCS_ANDROID([duplocale], [[#include <locale.h>]])
m4/duplocale.m4:    AC_REQUIRE([gl_LOCALE_H])
m4/duplocale.m4:      gl_CHECK_FUNCS_ANDROID([nl_langinfo_l], [[#include <langinfo.h>]])
m4/duplocale.m4:        [gl_cv_func_duplocale_works],
m4/duplocale.m4:           [gl_cv_func_duplocale_works=yes],
m4/duplocale.m4:           [gl_cv_func_duplocale_works=no],
m4/duplocale.m4:              aix* | netbsd*) gl_cv_func_duplocale_works="guessing no";;
m4/duplocale.m4:                  [gl_cv_func_duplocale_works="guessing no"],
m4/duplocale.m4:                  [gl_cv_func_duplocale_works="guessing yes"])
m4/duplocale.m4:              *) gl_cv_func_duplocale_works="guessing yes";;
m4/duplocale.m4:      case "$gl_cv_func_duplocale_works" in
m4/duplocale.m4:    case "$gl_cv_onwards_func_duplocale" in
m4/duplocale.m4:AC_DEFUN([gl_PREREQ_DUPLOCALE],
m4/eaccess.m4:AC_DEFUN([gl_FUNC_EACCESS],
m4/eealloc.m4:AC_DEFUN([gl_EEALLOC],
m4/eealloc.m4:  AC_REQUIRE([gl_EEMALLOC])
m4/eealloc.m4:  AC_REQUIRE([gl_EEREALLOC])
m4/eealloc.m4:AC_DEFUN([gl_EEMALLOC],
m4/eealloc.m4:    [gl_cv_func_malloc_0_nonnull=1],
m4/eealloc.m4:    [gl_cv_func_malloc_0_nonnull=0])
m4/eealloc.m4:  AC_DEFINE_UNQUOTED([MALLOC_0_IS_NONNULL], [$gl_cv_func_malloc_0_nonnull],
m4/eealloc.m4:AC_DEFUN([gl_EEREALLOC],
m4/eealloc.m4:    [gl_cv_func_realloc_0_nonnull=1],
m4/eealloc.m4:    [gl_cv_func_realloc_0_nonnull=0])
m4/eealloc.m4:  AC_DEFINE_UNQUOTED([REALLOC_0_IS_NONNULL], [$gl_cv_func_realloc_0_nonnull],
m4/endian_h.m4:AC_DEFUN_ONCE([gl_ENDIAN_H],
m4/endian_h.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/endian_h.m4:  gl_CHECK_NEXT_HEADERS([endian.h])
m4/endian_h.m4:      [gl_cv_header_endian_h_stdint_types],
m4/endian_h.m4:      [gl_cv_header_endian_h_stdint_types=yes],
m4/endian_h.m4:      [gl_cv_header_endian_h_stdint_types=no])
m4/endian_h.m4:      [gl_cv_header_working_endian_h],
m4/endian_h.m4:      [gl_cv_header_working_endian_h=no
m4/endian_h.m4:         [gl_cv_header_working_endian_h=yes],
m4/endian_h.m4:         [gl_cv_header_working_endian_h=no])
m4/endian_h.m4:  if test "$gl_cv_header_endian_h_stdint_types" = yes \
m4/endian_h.m4:     && test "$gl_cv_header_working_endian_h" = yes; then
m4/endian_h.m4:    if test "$gl_cv_header_working_endian_h" = yes; then
m4/environ.m4:AC_DEFUN_ONCE([gl_ENVIRON],
m4/environ.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/environ.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/errno_h.m4:AC_DEFUN_ONCE([gl_HEADER_ERRNO_H],
m4/errno_h.m4:  AC_CACHE_CHECK([for complete errno.h], [gl_cv_header_errno_h_complete], [
m4/errno_h.m4:      [gl_cv_header_errno_h_complete=no],
m4/errno_h.m4:      [gl_cv_header_errno_h_complete=yes])
m4/errno_h.m4:  if test $gl_cv_header_errno_h_complete = yes; then
m4/errno_h.m4:    gl_NEXT_HEADERS([errno.h])
m4/errno_h.m4:  gl_REPLACE_ERRNO_VALUE([EMULTIHOP])
m4/errno_h.m4:  gl_REPLACE_ERRNO_VALUE([ENOLINK])
m4/errno_h.m4:  gl_REPLACE_ERRNO_VALUE([EOVERFLOW])
m4/errno_h.m4:AC_DEFUN([gl_REPLACE_ERRNO_VALUE],
m4/errno_h.m4:    AC_CACHE_CHECK([for ]$1[ value], [gl_cv_header_errno_h_]$1, [
m4/errno_h.m4:      [gl_cv_header_errno_h_]$1[=yes],
m4/errno_h.m4:      [gl_cv_header_errno_h_]$1[=no])
m4/errno_h.m4:      if test $gl_cv_header_errno_h_]$1[ = no; then
m4/errno_h.m4:          ], [gl_cv_header_errno_h_]$1[=hidden])
m4/errno_h.m4:        if test $gl_cv_header_errno_h_]$1[ = hidden; then
m4/errno_h.m4:          AC_COMPUTE_INT([gl_cv_header_errno_h_]$1, $1, [
m4/errno_h.m4:    case $gl_cv_header_errno_h_]$1[ in
m4/errno_h.m4:        ]$1[_HIDDEN=1; ]$1[_VALUE="$gl_cv_header_errno_h_]$1["
m4/error.m4:AC_DEFUN([gl_ERROR],
m4/error.m4:AC_DEFUN([gl_PREREQ_ERROR],
m4/error.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/error_h.m4:AC_DEFUN_ONCE([gl_ERROR_H],
m4/error_h.m4:  gl_CHECK_NEXT_HEADERS([error.h])
m4/error_h.m4:  gl_CHECK_FUNCS_ANDROID([error], [[#include <error.h>]])
m4/error_h.m4:    case "$gl_cv_onwards_func_error" in
m4/error_h.m4:  dnl We need to notice a missing declaration, like gl_CHECK_FUNCS_ANDROID does.
m4/error_h.m4:      [gl_cv_func_working_error],
m4/error_h.m4:                gl_cv_func_working_error=no
m4/error_h.m4:                gl_cv_func_working_error=yes
m4/error_h.m4:              gl_cv_func_working_error=no
m4/error_h.m4:           [gl_cv_func_working_error=no])
m4/error_h.m4:              *-gnu* | gnu*)   gl_cv_func_working_error="guessing yes" ;;
m4/error_h.m4:              linux*-android*) gl_cv_func_working_error="guessing no" ;;
m4/error_h.m4:              *)               gl_cv_func_working_error="$gl_cross_guess_normal" ;;
m4/error_h.m4:           [gl_cv_func_working_error=no])
m4/error_h.m4:    case "$gl_cv_func_working_error" in
m4/error_h.m4:  m4_ifdef([gl_HAVE_MODULE_VERROR],
m4/euidaccess.m4:AC_DEFUN([gl_FUNC_NONREENTRANT_EUIDACCESS],
m4/euidaccess.m4:  AC_REQUIRE([gl_FUNC_EUIDACCESS])
m4/euidaccess.m4:AC_DEFUN([gl_FUNC_EUIDACCESS],
m4/euidaccess.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/euidaccess.m4:AC_DEFUN([gl_PREREQ_EUIDACCESS], [
m4/euidaccess.m4:  gl_CHECK_FUNCS_ANDROID([faccessat], [[#include <unistd.h>]])
m4/euidaccess.m4:  gl_saved_libs=$LIBS
m4/euidaccess.m4:  LIBS=$gl_saved_libs
m4/execinfo.m4:AC_DEFUN([gl_EXECINFO_H],
m4/execinfo.m4:    gl_saved_libs=$LIBS
m4/execinfo.m4:    LIBS=$gl_saved_libs
m4/execl.m4:AC_DEFUN([gl_FUNC_EXECL],
m4/execl.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/execle.m4:AC_DEFUN([gl_FUNC_EXECLE],
m4/execle.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/execlp.m4:AC_DEFUN([gl_FUNC_EXECLP],
m4/execlp.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/execute.m4:AC_DEFUN([gl_EXECUTE],
m4/execv.m4:AC_DEFUN([gl_FUNC_EXECV],
m4/execv.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/execve.m4:AC_DEFUN([gl_FUNC_EXECVE],
m4/execve.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/execvp.m4:AC_DEFUN([gl_FUNC_EXECVP],
m4/execvp.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/execvpe.m4:AC_DEFUN([gl_FUNC_EXECVPE],
m4/execvpe.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/execvpe.m4:      gl_CHECK_FUNCS_ANDROID([execvpe], [[#include <unistd.h>]])
m4/execvpe.m4:        case "$gl_cv_onwards_func_execvpe" in
m4/exp.m4:AC_DEFUN([gl_FUNC_EXP],
m4/exp.m4:  gl_COMMON_DOUBLE_MATHFUNC([exp])
m4/exp2.m4:AC_DEFUN([gl_FUNC_EXP2],
m4/exp2.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/exp2.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/exp2.m4:    [gl_cv_func_exp2_no_libm],
m4/exp2.m4:        [gl_cv_func_exp2_no_libm=yes],
m4/exp2.m4:        [gl_cv_func_exp2_no_libm=no])
m4/exp2.m4:  if test $gl_cv_func_exp2_no_libm = no; then
m4/exp2.m4:      [gl_cv_func_exp2_in_libm],
m4/exp2.m4:          [gl_cv_func_exp2_in_libm=yes],
m4/exp2.m4:          [gl_cv_func_exp2_in_libm=no])
m4/exp2.m4:    if test $gl_cv_func_exp2_in_libm = yes; then
m4/exp2.m4:  if test $gl_cv_func_exp2_no_libm = yes \
m4/exp2.m4:     || test $gl_cv_func_exp2_in_libm = yes; then
m4/exp2.m4:    gl_FUNC_EXP2_WORKS
m4/exp2.m4:    case "$gl_cv_func_exp2_works" in
m4/exp2.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/exp2.m4:    AC_REQUIRE([gl_FUNC_ROUND])
m4/exp2.m4:    AC_REQUIRE([gl_FUNC_LDEXP])
m4/exp2.m4:AC_DEFUN([gl_FUNC_EXP2_WORKS],
m4/exp2.m4:  AC_CACHE_CHECK([whether exp2 works], [gl_cv_func_exp2_works],
m4/exp2.m4:        [gl_cv_func_exp2_works=yes],
m4/exp2.m4:        [gl_cv_func_exp2_works=no],
m4/exp2.m4:           openbsd*)          gl_cv_func_exp2_works="guessing no" ;;
m4/exp2.m4:           mingw* | windows*) gl_cv_func_exp2_works="guessing yes" ;;
m4/exp2.m4:           *)                 gl_cv_func_exp2_works="guessing yes" ;;
m4/exp2f.m4:AC_DEFUN([gl_FUNC_EXP2F],
m4/exp2f.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/exp2f.m4:  AC_REQUIRE([gl_FUNC_EXP2])
m4/exp2f.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/exp2l-ieee.m4:dnl module description), so that gl_FUNC_EXP2L can test whether 'aclocal' has
m4/exp2l-ieee.m4:AC_DEFUN([gl_FUNC_EXP2L_IEEE],
m4/exp2l-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_exp2l_required=ieee])
m4/exp2l-ieee.m4:  AC_REQUIRE([gl_FUNC_EXP2L])
m4/exp2l.m4:AC_DEFUN([gl_FUNC_EXP2L],
m4/exp2l.m4:  m4_divert_text([DEFAULTS], [gl_exp2l_required=plain])
m4/exp2l.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/exp2l.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/exp2l.m4:  AC_REQUIRE([gl_FUNC_EXP2])
m4/exp2l.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/exp2l.m4:        [gl_cv_func_exp2l_works],
m4/exp2l.m4:            [gl_cv_func_exp2l_works=yes],
m4/exp2l.m4:            [gl_cv_func_exp2l_works=no],
m4/exp2l.m4:               *-gnu* | gnu*)      gl_cv_func_exp2l_works="guessing yes" ;;
m4/exp2l.m4:               *-musl* | midipix*) gl_cv_func_exp2l_works="guessing yes" ;;
m4/exp2l.m4:               mingw* | windows*)  gl_cv_func_exp2l_works="guessing yes" ;;
m4/exp2l.m4:               *)                  gl_cv_func_exp2l_works="$gl_cross_guess_normal" ;;
m4/exp2l.m4:      case "$gl_cv_func_exp2l_works" in
m4/exp2l.m4:    m4_ifdef([gl_FUNC_EXP2L_IEEE], [
m4/exp2l.m4:      if test $gl_exp2l_required = ieee && test $REPLACE_EXP2L = 0; then
m4/exp2l.m4:          [gl_cv_func_exp2l_ieee],
m4/exp2l.m4:              [gl_cv_func_exp2l_ieee=yes],
m4/exp2l.m4:              [gl_cv_func_exp2l_ieee=no],
m4/exp2l.m4:                 *-gnu* | gnu*)      gl_cv_func_exp2l_ieee="guessing yes" ;;
m4/exp2l.m4:                 *-musl* | midipix*) gl_cv_func_exp2l_ieee="guessing yes" ;;
m4/exp2l.m4:                 mingw* | windows*)  gl_cv_func_exp2l_ieee="guessing yes" ;;
m4/exp2l.m4:                 *)                  gl_cv_func_exp2l_ieee="$gl_cross_guess_normal" ;;
m4/exp2l.m4:        case "$gl_cv_func_exp2l_ieee" in
m4/exp2l.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/exp2l.m4:      AC_REQUIRE([gl_FUNC_ROUNDL])
m4/exp2l.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/expf.m4:AC_DEFUN([gl_FUNC_EXPF],
m4/expf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/expf.m4:  AC_REQUIRE([gl_FUNC_EXP])
m4/expf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/expl.m4:AC_DEFUN([gl_FUNC_EXPL],
m4/expl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/expl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/expl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/expl.m4:    [gl_cv_func_expl_no_libm],
m4/expl.m4:        [gl_cv_func_expl_no_libm=yes],
m4/expl.m4:        [gl_cv_func_expl_no_libm=no])
m4/expl.m4:  if test $gl_cv_func_expl_no_libm = no; then
m4/expl.m4:      [gl_cv_func_expl_in_libm],
m4/expl.m4:          [gl_cv_func_expl_in_libm=yes],
m4/expl.m4:          [gl_cv_func_expl_in_libm=no])
m4/expl.m4:    if test $gl_cv_func_expl_in_libm = yes; then
m4/expl.m4:  if test $gl_cv_func_expl_no_libm = yes \
m4/expl.m4:     || test $gl_cv_func_expl_in_libm = yes; then
m4/expl.m4:        [gl_cv_func_expl_works],
m4/expl.m4:            [gl_cv_func_expl_works=yes],
m4/expl.m4:            [gl_cv_func_expl_works=no],
m4/expl.m4:               *-gnu* | gnu*)      gl_cv_func_expl_works="guessing yes" ;;
m4/expl.m4:               *-musl* | midipix*) gl_cv_func_expl_works="guessing no" ;;
m4/expl.m4:               mingw* | windows*)  gl_cv_func_expl_works="guessing yes" ;;
m4/expl.m4:               *)                  gl_cv_func_expl_works="$gl_cross_guess_normal" ;;
m4/expl.m4:      case "$gl_cv_func_expl_works" in
m4/expl.m4:      AC_REQUIRE([gl_FUNC_EXP])
m4/expl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/expl.m4:      AC_REQUIRE([gl_FUNC_ROUNDL])
m4/expl.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/explicit_bzero.m4:AC_DEFUN([gl_FUNC_EXPLICIT_BZERO],
m4/explicit_bzero.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/expm1-ieee.m4:dnl module description), so that gl_FUNC_EXPM1 can test whether 'aclocal' has
m4/expm1-ieee.m4:AC_DEFUN([gl_FUNC_EXPM1_IEEE],
m4/expm1-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_expm1_required=ieee])
m4/expm1-ieee.m4:  AC_REQUIRE([gl_FUNC_EXPM1])
m4/expm1.m4:AC_DEFUN([gl_FUNC_EXPM1],
m4/expm1.m4:  m4_divert_text([DEFAULTS], [gl_expm1_required=plain])
m4/expm1.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/expm1.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/expm1.m4:    [gl_cv_func_expm1_no_libm],
m4/expm1.m4:        [gl_cv_func_expm1_no_libm=yes],
m4/expm1.m4:        [gl_cv_func_expm1_no_libm=no])
m4/expm1.m4:  if test $gl_cv_func_expm1_no_libm = no; then
m4/expm1.m4:      [gl_cv_func_expm1_in_libm],
m4/expm1.m4:          [gl_cv_func_expm1_in_libm=yes],
m4/expm1.m4:          [gl_cv_func_expm1_in_libm=no])
m4/expm1.m4:    if test $gl_cv_func_expm1_in_libm = yes; then
m4/expm1.m4:  if test $gl_cv_func_expm1_no_libm = yes \
m4/expm1.m4:     || test $gl_cv_func_expm1_in_libm = yes; then
m4/expm1.m4:    m4_ifdef([gl_FUNC_EXPM1_IEEE], [
m4/expm1.m4:      if test $gl_expm1_required = ieee && test $REPLACE_EXPM1 = 0; then
m4/expm1.m4:          [gl_cv_func_expm1_ieee],
m4/expm1.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/expm1.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/expm1.m4:              [gl_cv_func_expm1_ieee=yes],
m4/expm1.m4:              [gl_cv_func_expm1_ieee=no],
m4/expm1.m4:                 *-gnu* | gnu*)      gl_cv_func_expm1_ieee="guessing yes" ;;
m4/expm1.m4:                 *-musl* | midipix*) gl_cv_func_expm1_ieee="guessing yes" ;;
m4/expm1.m4:                 mingw* | windows*)  gl_cv_func_expm1_ieee="guessing yes" ;;
m4/expm1.m4:                 *)                  gl_cv_func_expm1_ieee="$gl_cross_guess_normal" ;;
m4/expm1.m4:        case "$gl_cv_func_expm1_ieee" in
m4/expm1.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/expm1.m4:    AC_REQUIRE([gl_FUNC_EXP])
m4/expm1.m4:    AC_REQUIRE([gl_FUNC_ROUND])
m4/expm1.m4:    AC_REQUIRE([gl_FUNC_LDEXP])
m4/expm1f-ieee.m4:dnl module description), so that gl_FUNC_EXPM1F can test whether 'aclocal' has
m4/expm1f-ieee.m4:AC_DEFUN([gl_FUNC_EXPM1F_IEEE],
m4/expm1f-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_expm1f_required=ieee])
m4/expm1f-ieee.m4:  AC_REQUIRE([gl_FUNC_EXPM1F])
m4/expm1f.m4:AC_DEFUN([gl_FUNC_EXPM1F],
m4/expm1f.m4:  m4_divert_text([DEFAULTS], [gl_expm1f_required=plain])
m4/expm1f.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/expm1f.m4:  AC_REQUIRE([gl_FUNC_EXPM1])
m4/expm1f.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/expm1f.m4:    gl_FUNC_EXPM1F_WORKS
m4/expm1f.m4:    case "$gl_cv_func_expm1f_works" in
m4/expm1f.m4:    m4_ifdef([gl_FUNC_EXPM1F_IEEE], [
m4/expm1f.m4:      if test $gl_expm1f_required = ieee && test $REPLACE_EXPM1F = 0; then
m4/expm1f.m4:          [gl_cv_func_expm1f_ieee],
m4/expm1f.m4:]gl_FLOAT_MINUS_ZERO_CODE[
m4/expm1f.m4:]gl_FLOAT_SIGNBIT_CODE[
m4/expm1f.m4:              [gl_cv_func_expm1f_ieee=yes],
m4/expm1f.m4:              [gl_cv_func_expm1f_ieee=no],
m4/expm1f.m4:                 *-gnu* | gnu*)      gl_cv_func_expm1f_ieee="guessing yes" ;;
m4/expm1f.m4:                 *-musl* | midipix*) gl_cv_func_expm1f_ieee="guessing yes" ;;
m4/expm1f.m4:                 mingw* | windows*)  gl_cv_func_expm1f_ieee="guessing yes" ;;
m4/expm1f.m4:                 aix*)               gl_cv_func_expm1f_ieee="guessing no" ;;
m4/expm1f.m4:                 *)                  gl_cv_func_expm1f_ieee="$gl_cross_guess_normal" ;;
m4/expm1f.m4:        case "$gl_cv_func_expm1f_ieee" in
m4/expm1f.m4:AC_DEFUN([gl_FUNC_EXPM1F_WORKS],
m4/expm1f.m4:  AC_CACHE_CHECK([whether expm1f works], [gl_cv_func_expm1f_works],
m4/expm1f.m4:        [gl_cv_func_expm1f_works=yes],
m4/expm1f.m4:        [gl_cv_func_expm1f_works=no],
m4/expm1f.m4:           irix*)             gl_cv_func_expm1f_works="guessing no" ;;
m4/expm1f.m4:           mingw* | windows*) gl_cv_func_expm1f_works="guessing yes" ;;
m4/expm1f.m4:           *)                 gl_cv_func_expm1f_works="guessing yes" ;;
m4/expm1l.m4:AC_DEFUN([gl_FUNC_EXPM1L],
m4/expm1l.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/expm1l.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/expm1l.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/expm1l.m4:    [gl_cv_func_expm1l_no_libm],
m4/expm1l.m4:        [gl_cv_func_expm1l_no_libm=yes],
m4/expm1l.m4:        [gl_cv_func_expm1l_no_libm=no])
m4/expm1l.m4:  if test $gl_cv_func_expm1l_no_libm = no; then
m4/expm1l.m4:      [gl_cv_func_expm1l_in_libm],
m4/expm1l.m4:          [gl_cv_func_expm1l_in_libm=yes],
m4/expm1l.m4:          [gl_cv_func_expm1l_in_libm=no])
m4/expm1l.m4:    if test $gl_cv_func_expm1l_in_libm = yes; then
m4/expm1l.m4:  if test $gl_cv_func_expm1l_no_libm = yes \
m4/expm1l.m4:     || test $gl_cv_func_expm1l_in_libm = yes; then
m4/expm1l.m4:        [gl_cv_func_expm1l_works],
m4/expm1l.m4:            [gl_cv_func_expm1l_works=yes],
m4/expm1l.m4:            [gl_cv_func_expm1l_works=no],
m4/expm1l.m4:               *-gnu* | gnu*)      gl_cv_func_expm1l_works="guessing yes" ;;
m4/expm1l.m4:               *-musl* | midipix*) gl_cv_func_expm1l_works="guessing no" ;;
m4/expm1l.m4:               netbsd*)            gl_cv_func_expm1l_works="guessing no" ;;
m4/expm1l.m4:               mingw* | windows*)  gl_cv_func_expm1l_works="guessing yes" ;;
m4/expm1l.m4:               *)                  gl_cv_func_expm1l_works="$gl_cross_guess_normal" ;;
m4/expm1l.m4:      case "$gl_cv_func_expm1l_works" in
m4/expm1l.m4:      AC_REQUIRE([gl_FUNC_EXPM1])
m4/expm1l.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/expm1l.m4:      AC_REQUIRE([gl_FUNC_EXPL])
m4/expm1l.m4:      AC_REQUIRE([gl_FUNC_ROUNDL])
m4/expm1l.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/exponentd.m4:AC_DEFUN_ONCE([gl_DOUBLE_EXPONENT_LOCATION],
m4/exponentd.m4:    [gl_cv_cc_double_expbit0],
m4/exponentd.m4:        [gl_cv_cc_double_expbit0=`cat conftest.out`],
m4/exponentd.m4:        [gl_cv_cc_double_expbit0="unknown"],
m4/exponentd.m4:            [gl_cv_cc_double_expbit0="unknown"],
m4/exponentd.m4:                [gl_cv_cc_double_expbit0="word 0 bit 20"],
m4/exponentd.m4:                [gl_cv_cc_double_expbit0="word 1 bit 20"],
m4/exponentd.m4:                [gl_cv_cc_double_expbit0="unknown"])
m4/exponentd.m4:  case "$gl_cv_cc_double_expbit0" in
m4/exponentd.m4:      word=`echo "$gl_cv_cc_double_expbit0" | sed -e 's/word //' -e 's/ bit.*//'`
m4/exponentd.m4:      bit=`echo "$gl_cv_cc_double_expbit0" | sed -e 's/word.*bit //'`
m4/exponentf.m4:AC_DEFUN_ONCE([gl_FLOAT_EXPONENT_LOCATION],
m4/exponentf.m4:    [gl_cv_cc_float_expbit0],
m4/exponentf.m4:        [gl_cv_cc_float_expbit0=`cat conftest.out`],
m4/exponentf.m4:        [gl_cv_cc_float_expbit0="unknown"],
m4/exponentf.m4:        [gl_cv_cc_float_expbit0="word 0 bit 23"])
m4/exponentf.m4:  case "$gl_cv_cc_float_expbit0" in
m4/exponentf.m4:      word=`echo "$gl_cv_cc_float_expbit0" | sed -e 's/word //' -e 's/ bit.*//'`
m4/exponentf.m4:      bit=`echo "$gl_cv_cc_float_expbit0" | sed -e 's/word.*bit //'`
m4/exponentl.m4:AC_DEFUN_ONCE([gl_LONG_DOUBLE_EXPONENT_LOCATION],
m4/exponentl.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/exponentl.m4:    [gl_cv_cc_long_double_expbit0],
m4/exponentl.m4:        [gl_cv_cc_long_double_expbit0=`cat conftest.out`],
m4/exponentl.m4:        [gl_cv_cc_long_double_expbit0="unknown"],
m4/exponentl.m4:          gl_cv_cc_long_double_expbit0="unknown"
m4/exponentl.m4:                ], [gl_cv_cc_long_double_expbit0="word 2 bit 0"])
m4/exponentl.m4:                ], [gl_cv_cc_long_double_expbit0="word 1 bit 20"])
m4/exponentl.m4:  case "$gl_cv_cc_long_double_expbit0" in
m4/exponentl.m4:      word=`echo "$gl_cv_cc_long_double_expbit0" | sed -e 's/word //' -e 's/ bit.*//'`
m4/exponentl.m4:      bit=`echo "$gl_cv_cc_long_double_expbit0" | sed -e 's/word.*bit //'`
m4/extensions-aix.m4:# defined by gl_USE_SYSTEM_EXTENSIONS.  gl_USE_AIX_EXTENSIONS additionally
m4/extensions-aix.m4:AC_DEFUN_ONCE([gl_USE_AIX_EXTENSIONS],
m4/extensions.m4:#        AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/extensions.m4:#      its dependencies. This will ensure that the gl_USE_SYSTEM_EXTENSIONS
m4/extensions.m4:#      invocation occurs in gl_EARLY, not in gl_INIT.
m4/extensions.m4:# gl_USE_SYSTEM_EXTENSIONS
m4/extensions.m4:AC_DEFUN_ONCE([gl_USE_SYSTEM_EXTENSIONS],
m4/extern-inline.m4:AC_DEFUN([gl_EXTERN_INLINE],
m4/extern-inline.m4:    [gl_cv_have___header_inline],
m4/extern-inline.m4:       [gl_cv_have___header_inline=yes],
m4/extern-inline.m4:       [gl_cv_have___header_inline=no])])
m4/extern-inline.m4:  if test "$gl_cv_have___header_inline" = yes; then
m4/fabs.m4:AC_DEFUN([gl_FUNC_FABS],
m4/fabs.m4:  gl_MATHFUNC([fabs], [double], [(double)])
m4/fabsf.m4:AC_DEFUN([gl_FUNC_FABSF],
m4/fabsf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fabsf.m4:  AC_REQUIRE([gl_FUNC_FABS])
m4/fabsf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fabsf.m4:  gl_MATHFUNC([fabsf], [float], [(float)])
m4/fabsf.m4:  if test $gl_cv_func_fabsf_no_libm = no \
m4/fabsf.m4:     && test $gl_cv_func_fabsf_in_libm = no; then
m4/fabsl.m4:AC_DEFUN([gl_FUNC_FABSL],
m4/fabsl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fabsl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/fabsl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fabsl.m4:  gl_MATHFUNC([fabsl], [long double], [(long double)])
m4/fabsl.m4:  if test $gl_cv_func_fabsl_no_libm = yes \
m4/fabsl.m4:     || test $gl_cv_func_fabsl_in_libm = yes; then
m4/fabsl.m4:    gl_FUNC_FABSL_WORKS
m4/fabsl.m4:    case "$gl_cv_func_fabsl_works" in
m4/fabsl.m4:      AC_REQUIRE([gl_FUNC_FABS])
m4/fabsl.m4:AC_DEFUN([gl_FUNC_FABSL_WORKS],
m4/fabsl.m4:  AC_CACHE_CHECK([whether fabsl works], [gl_cv_func_fabsl_works],
m4/fabsl.m4:        [gl_cv_func_fabsl_works=yes],
m4/fabsl.m4:        [gl_cv_func_fabsl_works=no],
m4/fabsl.m4:           irix*)             gl_cv_func_fabsl_works="guessing no" ;;
m4/fabsl.m4:           mingw* | windows*) gl_cv_func_fabsl_works="guessing yes" ;;
m4/fabsl.m4:           *)                 gl_cv_func_fabsl_works="guessing yes" ;;
m4/faccessat.m4:AC_DEFUN([gl_FUNC_FACCESSAT],
m4/faccessat.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/faccessat.m4:  AC_REQUIRE([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
m4/faccessat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/faccessat.m4:  gl_CHECK_FUNCS_ANDROID([faccessat], [[#include <unistd.h>]])
m4/faccessat.m4:    case "$gl_cv_onwards_func_faccessat" in
m4/faccessat.m4:    case $gl_cv_func_lstat_dereferences_slashed_symlink in
m4/faccessat.m4:AC_DEFUN([gl_PREREQ_FACCESSAT],
m4/fatal-signal.m4:AC_DEFUN([gl_FATAL_SIGNAL],
m4/fatal-signal.m4:  gl_PREREQ_SIG_HANDLER_H
m4/fbufmode.m4:AC_DEFUN([gl_FUNC_FBUFMODE],
m4/fbufmode.m4:  gl_CHECK_FUNCS_ANDROID([__flbf], [[#include <stdio_ext.h>]])
m4/fbufmode.m4:  gl_CHECK_FUNCS_ANDROID([__fbufsize], [[#include <stdio_ext.h>]])
m4/fchdir.m4:AC_DEFUN([gl_FUNC_FCHDIR],
m4/fchdir.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/fchdir.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/fchdir.m4:  AC_REQUIRE([gl_TEST_FCHDIR])
m4/fchdir.m4:    AC_REQUIRE([gl_DIRENT_DIR])
m4/fchdir.m4:      [gl_cv_func_open_directory_works],
m4/fchdir.m4:         [gl_cv_func_open_directory_works=yes],
m4/fchdir.m4:         [gl_cv_func_open_directory_works=no],
m4/fchdir.m4:            linux-* | linux)   gl_cv_func_open_directory_works="guessing yes" ;;
m4/fchdir.m4:            midipix*)          gl_cv_func_open_directory_works="guessing yes" ;;
m4/fchdir.m4:            *-gnu* | gnu*)     gl_cv_func_open_directory_works="guessing yes" ;;
m4/fchdir.m4:            mingw* | windows*) gl_cv_func_open_directory_works="guessing no" ;;
m4/fchdir.m4:            *)                 gl_cv_func_open_directory_works="$gl_cross_guess_normal" ;;
m4/fchdir.m4:    case "$gl_cv_func_open_directory_works" in
m4/fchdir.m4:AC_DEFUN([gl_TEST_FCHDIR],
m4/fchdir.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/fchdir.m4:AC_DEFUN([gl_PREREQ_FCHDIR], [:])
m4/fchmodat.m4:AC_DEFUN([gl_FUNC_FCHMODAT],
m4/fchmodat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/fchmodat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fchmodat.m4:      [gl_cv_func_fchmodat_works],
m4/fchmodat.m4:         [gl_cv_func_fchmodat_works=yes],
m4/fchmodat.m4:            2) gl_cv_func_fchmodat_works='nearly' ;;
m4/fchmodat.m4:            *) gl_cv_func_fchmodat_works=no ;;
m4/fchmodat.m4:            linux*-gnu* | cygwin*) gl_cv_func_fchmodat_works="guessing no" ;;
m4/fchmodat.m4:            aix*)                  gl_cv_func_fchmodat_works="guessing nearly" ;;
m4/fchmodat.m4:            *)                     gl_cv_func_fchmodat_works="$gl_cross_guess_normal" ;;
m4/fchmodat.m4:    case "$gl_cv_func_fchmodat_works" in
m4/fchmodat.m4:AC_DEFUN([gl_PREREQ_FCHMODAT],
m4/fchmodat.m4:  gl_CHECK_FUNCS_ANDROID([readlinkat], [[#include <unistd.h>]])
m4/fchownat.m4:AC_DEFUN([gl_FUNC_FCHOWNAT],
m4/fchownat.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/fchownat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fchownat.m4:  AC_REQUIRE([gl_FUNC_CHOWN])
m4/fchownat.m4:    [gl_FUNC_FCHOWNAT_DEREF_BUG(
m4/fchownat.m4:     gl_FUNC_FCHOWNAT_EMPTY_FILENAME_BUG(
m4/fchownat.m4:# gl_FUNC_FCHOWNAT_DEREF_BUG([ACTION-IF-BUGGY[, ACTION-IF-NOT_BUGGY]])
m4/fchownat.m4:AC_DEFUN([gl_FUNC_FCHOWNAT_DEREF_BUG],
m4/fchownat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fchownat.m4:    [gl_cv_func_fchownat_nofollow_works],
m4/fchownat.m4:     gl_dangle=conftest.dangle
m4/fchownat.m4:     rm -f $gl_dangle
m4/fchownat.m4:     ac_clean_files="$ac_clean_files $gl_dangle"
m4/fchownat.m4:     ln -s conftest.no-such $gl_dangle
m4/fchownat.m4:  return (fchownat (AT_FDCWD, "$gl_dangle", (uid_t)(-1), getgid (),
m4/fchownat.m4:       [gl_cv_func_fchownat_nofollow_works=yes],
m4/fchownat.m4:       [gl_cv_func_fchownat_nofollow_works=no],
m4/fchownat.m4:       [gl_cv_func_fchownat_nofollow_works="$gl_cross_guess_normal"])
m4/fchownat.m4:  AS_IF([test "$gl_cv_func_fchownat_nofollow_works" != yes], [$1], [$2])
m4/fchownat.m4:# gl_FUNC_FCHOWNAT_EMPTY_FILENAME_BUG([ACTION-IF-BUGGY[, ACTION-IF-NOT_BUGGY]])
m4/fchownat.m4:AC_DEFUN([gl_FUNC_FCHOWNAT_EMPTY_FILENAME_BUG],
m4/fchownat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fchownat.m4:    [gl_cv_func_fchownat_empty_filename_works],
m4/fchownat.m4:       [gl_cv_func_fchownat_empty_filename_works=yes],
m4/fchownat.m4:       [gl_cv_func_fchownat_empty_filename_works=no],
m4/fchownat.m4:       [gl_cv_func_fchownat_empty_filename_works="$gl_cross_guess_normal"])
m4/fchownat.m4:  AS_IF([test "$gl_cv_func_fchownat_empty_filename_works" != yes], [$1], [$2])
m4/fclose.m4:AC_DEFUN_ONCE([gl_FUNC_FCLOSE],
m4/fclose.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fclose.m4:  gl_FUNC_FFLUSH_STDIN
m4/fclose.m4:  case "$gl_cv_func_fflush_stdin" in
m4/fclose.m4:  AC_REQUIRE([gl_FUNC_CLOSE])
m4/fclose.m4:    gl_FUNC_FCLOSE_STDIN
m4/fclose.m4:    case "$gl_cv_func_fclose_stdin" in
m4/fclose.m4:dnl Sets gl_cv_func_fclose_stdin.
m4/fclose.m4:AC_DEFUN([gl_FUNC_FCLOSE_STDIN],
m4/fclose.m4:    [gl_cv_func_fclose_stdin],
m4/fclose.m4:       [gl_cv_func_fclose_stdin=yes],
m4/fclose.m4:       [gl_cv_func_fclose_stdin=no],
m4/fclose.m4:          *-gnu* | gnu*)      gl_cv_func_fclose_stdin="guessing no" ;;
m4/fclose.m4:          *-musl* | midipix*) gl_cv_func_fclose_stdin="guessing yes" ;;
m4/fclose.m4:          mingw* | windows*)  gl_cv_func_fclose_stdin="guessing no" ;;
m4/fclose.m4:          *)                  gl_cv_func_fclose_stdin="$gl_cross_guess_normal" ;;
m4/fcntl-o.m4:AC_DEFUN([gl_FCNTL_O_FLAGS],
m4/fcntl-o.m4:  AC_CACHE_CHECK([for working fcntl.h], [gl_cv_header_working_fcntl_h],
m4/fcntl-o.m4:       [gl_cv_header_working_fcntl_h=yes],
m4/fcntl-o.m4:        4) gl_cv_header_working_fcntl_h='no (bad O_NOFOLLOW)';; #(
m4/fcntl-o.m4:        64) gl_cv_header_working_fcntl_h='no (bad O_NOATIME)';; #(
m4/fcntl-o.m4:        68) gl_cv_header_working_fcntl_h='no (bad O_NOATIME, O_NOFOLLOW)';; #(
m4/fcntl-o.m4:         *) gl_cv_header_working_fcntl_h='no';;
m4/fcntl-o.m4:          mingw* | windows*) gl_cv_header_working_fcntl_h='no' ;;
m4/fcntl-o.m4:          *)                 gl_cv_header_working_fcntl_h=cross-compiling ;;
m4/fcntl-o.m4:  case $gl_cv_header_working_fcntl_h in #(
m4/fcntl-o.m4:  case $gl_cv_header_working_fcntl_h in #(
m4/fcntl-safer.m4:AC_DEFUN([gl_FCNTL_SAFER],
m4/fcntl-safer.m4:  AC_REQUIRE([gl_PROMOTED_TYPE_MODE_T])
m4/fcntl-safer.m4:AC_DEFUN([gl_OPENAT_SAFER],
m4/fcntl-safer.m4:  AC_REQUIRE([gl_FCNTL_SAFER])
m4/fcntl.m4:AC_DEFUN([gl_FUNC_FCNTL],
m4/fcntl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fcntl.m4:  AC_REQUIRE([gl_FCNTL_H_DEFAULTS])
m4/fcntl.m4:    gl_REPLACE_FCNTL
m4/fcntl.m4:      [gl_cv_func_fcntl_f_dupfd_works],
m4/fcntl.m4:         [gl_cv_func_fcntl_f_dupfd_works=yes],
m4/fcntl.m4:         [gl_cv_func_fcntl_f_dupfd_works=no],
m4/fcntl.m4:               gl_cv_func_fcntl_f_dupfd_works="guessing no" ;;
m4/fcntl.m4:            *) gl_cv_func_fcntl_f_dupfd_works="guessing yes" ;;
m4/fcntl.m4:    case $gl_cv_func_fcntl_f_dupfd_works in
m4/fcntl.m4:      *) gl_REPLACE_FCNTL
m4/fcntl.m4:      [gl_cv_func_fcntl_f_dupfd_cloexec],
m4/fcntl.m4:           [gl_cv_func_fcntl_f_dupfd_cloexec=yes],
m4/fcntl.m4:           [gl_cv_func_fcntl_f_dupfd_cloexec="needs runtime check"])
m4/fcntl.m4:         [gl_cv_func_fcntl_f_dupfd_cloexec=no],
m4/fcntl.m4:            netbsd*) gl_cv_func_fcntl_f_dupfd_cloexec="guessing no" ;;
m4/fcntl.m4:            *)       gl_cv_func_fcntl_f_dupfd_cloexec="$gl_cross_guess_normal" ;;
m4/fcntl.m4:    case "$gl_cv_func_fcntl_f_dupfd_cloexec" in
m4/fcntl.m4:      *)    gl_REPLACE_FCNTL
m4/fcntl.m4:  m4_ifdef([gl_FUNC_FCHDIR], [
m4/fcntl.m4:    gl_TEST_FCHDIR
m4/fcntl.m4:      gl_REPLACE_FCNTL
m4/fcntl.m4:AC_DEFUN([gl_REPLACE_FCNTL],
m4/fcntl.m4:  AC_REQUIRE([gl_FCNTL_H_DEFAULTS])
m4/fcntl_h.m4:AC_DEFUN_ONCE([gl_FCNTL_H],
m4/fcntl_h.m4:  AC_REQUIRE([gl_FCNTL_H_DEFAULTS])
m4/fcntl_h.m4:  AC_REQUIRE([gl_FCNTL_O_FLAGS])
m4/fcntl_h.m4:  gl_NEXT_HEADERS([fcntl.h])
m4/fcntl_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <fcntl.h>
m4/fcntl_h.m4:# gl_FCNTL_MODULE_INDICATOR([modulename])
m4/fcntl_h.m4:AC_DEFUN([gl_FCNTL_MODULE_INDICATOR],
m4/fcntl_h.m4:  gl_FCNTL_H_REQUIRE_DEFAULTS
m4/fcntl_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/fcntl_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/fcntl_h.m4:AC_DEFUN([gl_FCNTL_H_REQUIRE_DEFAULTS],
m4/fcntl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CREAT])
m4/fcntl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FCNTL])
m4/fcntl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_NONBLOCKING])
m4/fcntl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OPEN])
m4/fcntl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OPENAT])
m4/fcntl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_CREAT], [1])
m4/fcntl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_OPEN], [1])
m4/fcntl_h.m4:  AC_REQUIRE([gl_FCNTL_H_DEFAULTS])
m4/fcntl_h.m4:AC_DEFUN([gl_FCNTL_H_DEFAULTS],
m4/fdatasync.m4:AC_DEFUN([gl_FUNC_FDATASYNC],
m4/fdatasync.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/fdatasync.m4:    gl_CHECK_FUNCS_ANDROID([fdatasync], [[#include <unistd.h>]])
m4/fdatasync.m4:      case "$gl_cv_onwards_func_fdatasync" in
m4/fdatasync.m4:        gl_saved_libs=$LIBS
m4/fdatasync.m4:        LIBS=$gl_saved_libs
m4/fdatasync.m4:        gl_CHECK_FUNCS_ANDROID([fdatasync], [[#include <unistd.h>]])
m4/fdatasync.m4:          case "$gl_cv_onwards_func_fdatasync" in
m4/fdopen.m4:AC_DEFUN([gl_FUNC_FDOPEN],
m4/fdopen.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fdopen.m4:  m4_ifdef([gl_MSVC_INVAL], [
m4/fdopen.m4:    AC_REQUIRE([gl_MSVC_INVAL])
m4/fdopen.m4:    AC_CACHE_CHECK([whether fdopen sets errno], [gl_cv_func_fdopen_works],
m4/fdopen.m4:          [gl_cv_func_fdopen_works=yes],
m4/fdopen.m4:          [gl_cv_func_fdopen_works=no],
m4/fdopen.m4:             mingw* | windows*) gl_cv_func_fdopen_works="guessing no" ;;
m4/fdopen.m4:             *)                 gl_cv_func_fdopen_works="guessing yes" ;;
m4/fdopen.m4:    case "$gl_cv_func_fdopen_works" in
m4/fdopen.m4:AC_DEFUN([gl_PREREQ_FDOPEN], [])
m4/fdopendir.m4:AC_DEFUN([gl_FUNC_FDOPENDIR],
m4/fdopendir.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/fdopendir.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fdopendir.m4:      [gl_cv_func_fdopendir_works],
m4/fdopendir.m4:         [gl_cv_func_fdopendir_works=yes],
m4/fdopendir.m4:         [gl_cv_func_fdopendir_works=no],
m4/fdopendir.m4:            *-gnu*)             gl_cv_func_fdopendir_works="guessing yes" ;;
m4/fdopendir.m4:            *-musl* | midipix*) gl_cv_func_fdopendir_works="guessing yes" ;;
m4/fdopendir.m4:            *)                  gl_cv_func_fdopendir_works="$gl_cross_guess_normal" ;;
m4/fdopendir.m4:    case "$gl_cv_func_fdopendir_works" in
m4/fegetround.m4:AC_DEFUN([gl_FUNC_FEGETROUND],
m4/fegetround.m4:  gl_MATHFUNC([fegetround], [int], [(void)], [#include <fenv.h>])
m4/fegetround.m4:  if test $gl_cv_func_fegetround_no_libm = no \
m4/fegetround.m4:     && test $gl_cv_func_fegetround_in_libm = no; then
m4/fenv-environment.m4:AC_DEFUN([gl_FENV_ENVIRONMENT],
m4/fenv-environment.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv-environment.m4:    [gl_cv_var_FE_DFL_ENV_works],
m4/fenv-environment.m4:           [gl_cv_var_FE_DFL_ENV_works=yes],
m4/fenv-environment.m4:           [gl_cv_var_FE_DFL_ENV_works=no])
m4/fenv-environment.m4:         gl_cv_var_FE_DFL_ENV_works="guessing yes"
m4/fenv-environment.m4:  case "$gl_cv_var_FE_DFL_ENV_works" in
m4/fenv-environment.m4:  gl_MATHFUNC([fesetenv], [int], [(fenv_t const *)], [
m4/fenv-environment.m4:  if test $gl_cv_func_fesetenv_no_libm = yes \
m4/fenv-environment.m4:     || test $gl_cv_func_fesetenv_in_libm = yes; then
m4/fenv-environment.m4:    if test $gl_cv_func_fesetenv_no_libm = yes; then
m4/fenv-environment.m4:      [gl_cv_func_feholdexcept_works],
m4/fenv-environment.m4:             [gl_cv_func_feholdexcept_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_feholdexcept_works="guessing no"])
m4/fenv-environment.m4:                 gl_cv_func_feholdexcept_works="guessing yes"
m4/fenv-environment.m4:                 gl_cv_func_feholdexcept_works="guessing yes"
m4/fenv-environment.m4:                 gl_cv_func_feholdexcept_works="guessing no"
m4/fenv-environment.m4:           ], [gl_cv_func_feholdexcept_works="guessing yes"])
m4/fenv-environment.m4:           gl_cv_func_feholdexcept_works="guessing no"
m4/fenv-environment.m4:             [gl_cv_func_feholdexcept_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_feholdexcept_works=no],
m4/fenv-environment.m4:             [gl_cv_func_feholdexcept_works="guessing yes"])
m4/fenv-environment.m4:    case "$gl_cv_func_feholdexcept_works" in
m4/fenv-environment.m4:      [gl_cv_func_fegetenv_works],
m4/fenv-environment.m4:             [gl_cv_func_fegetenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_fegetenv_works="guessing no"])
m4/fenv-environment.m4:           gl_cv_func_fegetenv_works="guessing no"
m4/fenv-environment.m4:         *) gl_cv_func_fegetenv_works="guessing yes" ;;
m4/fenv-environment.m4:    case "$gl_cv_func_fegetenv_works" in
m4/fenv-environment.m4:      [gl_cv_func_fesetenv_works],
m4/fenv-environment.m4:             gl_cv_func_fesetenv_works="guessing no"
m4/fenv-environment.m4:           ], [gl_cv_func_fesetenv_works="guessing yes"])
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works="guessing no"])
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works="guessing no"])
m4/fenv-environment.m4:           gl_cv_func_fesetenv_works="guessing no"
m4/fenv-environment.m4:           gl_cv_func_fesetenv_works="guessing no"
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_fesetenv_works="guessing yes"])
m4/fenv-environment.m4:    case "$gl_cv_func_fesetenv_works" in
m4/fenv-environment.m4:      [gl_cv_func_feupdateenv_works],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works=yes],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing no"])
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing no"])
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing no"])
m4/fenv-environment.m4:             gl_cv_func_feupdateenv_works="guessing no"
m4/fenv-environment.m4:           ], [gl_cv_func_feupdateenv_works="guessing yes"])
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing no"])
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing no"])
m4/fenv-environment.m4:           gl_cv_func_feupdateenv_works="guessing no"
m4/fenv-environment.m4:           gl_cv_func_feupdateenv_works="guessing no"
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing yes"],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works=no],
m4/fenv-environment.m4:             [gl_cv_func_feupdateenv_works="guessing yes"])
m4/fenv-environment.m4:    case "$gl_cv_func_feupdateenv_works" in
m4/fenv-exceptions-state-c23.m4:AC_DEFUN([gl_FENV_EXCEPTIONS_STATE_C23],
m4/fenv-exceptions-state-c23.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv-exceptions-state-c23.m4:  gl_MATHFUNC([fetestexceptflag], [int], [(fexcept_t const *, int)],
m4/fenv-exceptions-state-c23.m4:  if test $gl_cv_func_fetestexceptflag_no_libm != yes \
m4/fenv-exceptions-state-c23.m4:     && test $gl_cv_func_fetestexceptflag_in_libm != yes; then
m4/fenv-exceptions-state.m4:AC_DEFUN([gl_FENV_EXCEPTIONS_STATE],
m4/fenv-exceptions-state.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv-exceptions-state.m4:  gl_MATHFUNC([fesetexceptflag], [int], [(fexcept_t const *, int)],
m4/fenv-exceptions-state.m4:  if test $gl_cv_func_fesetexceptflag_no_libm = yes \
m4/fenv-exceptions-state.m4:     || test $gl_cv_func_fesetexceptflag_in_libm = yes; then
m4/fenv-exceptions-state.m4:    if test $gl_cv_func_fesetexceptflag_no_libm = yes; then
m4/fenv-exceptions-state.m4:          [gl_cv_func_fegetexceptflag_works],
m4/fenv-exceptions-state.m4:             [gl_cv_func_fegetexceptflag_works="guessing yes"],
m4/fenv-exceptions-state.m4:             [gl_cv_func_fegetexceptflag_works="guessing no"])
m4/fenv-exceptions-state.m4:        case "$gl_cv_func_fegetexceptflag_works" in
m4/fenv-exceptions-state.m4:      AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fenv-exceptions-state.m4:      gl_MATHFUNC([feenableexcept], [int], [(int)], [#include <fenv.h>])
m4/fenv-exceptions-state.m4:        [gl_cv_func_fesetexceptflag_works1],
m4/fenv-exceptions-state.m4:        [if test $gl_cv_func_feenableexcept_no_libm = yes \
m4/fenv-exceptions-state.m4:            || test $gl_cv_func_feenableexcept_in_libm = yes; then
m4/fenv-exceptions-state.m4:           if test $gl_cv_func_feenableexcept_no_libm != yes; then
m4/fenv-exceptions-state.m4:             [gl_cv_func_fesetexceptflag_works1=yes],
m4/fenv-exceptions-state.m4:                  gl_cv_func_fesetexceptflag_works1="guessing yes"
m4/fenv-exceptions-state.m4:                  gl_cv_func_fesetexceptflag_works1=no
m4/fenv-exceptions-state.m4:                      gl_cv_func_fesetexceptflag_works1="guessing no" ;;
m4/fenv-exceptions-state.m4:                      gl_cv_func_fesetexceptflag_works1="guessing yes" ;;
m4/fenv-exceptions-state.m4:                *) gl_cv_func_fesetexceptflag_works1="$gl_cross_guess_normal" ;;
m4/fenv-exceptions-state.m4:               gl_cv_func_fesetexceptflag_works1="guessing no"
m4/fenv-exceptions-state.m4:               gl_cv_func_fesetexceptflag_works1="guessing no"
m4/fenv-exceptions-state.m4:                 [gl_cv_func_fesetexceptflag_works1="guessing no"],
m4/fenv-exceptions-state.m4:                 [gl_cv_func_fesetexceptflag_works1="guessing yes"])
m4/fenv-exceptions-state.m4:               gl_cv_func_fesetexceptflag_works1="guessing no"
m4/fenv-exceptions-state.m4:             *) gl_cv_func_fesetexceptflag_works1="guessing yes" ;;
m4/fenv-exceptions-state.m4:        [gl_cv_func_fesetexceptflag_works2],
m4/fenv-exceptions-state.m4:           [gl_cv_func_fesetexceptflag_works2=yes],
m4/fenv-exceptions-state.m4:           [gl_cv_func_fesetexceptflag_works2=no],
m4/fenv-exceptions-state.m4:                    gl_cv_func_fesetexceptflag_works2="guessing no" ;;
m4/fenv-exceptions-state.m4:                    gl_cv_func_fesetexceptflag_works2="guessing yes" ;;
m4/fenv-exceptions-state.m4:              *) gl_cv_func_fesetexceptflag_works2="$gl_cross_guess_normal" ;;
m4/fenv-exceptions-state.m4:      case "$gl_cv_func_fesetexceptflag_works1" in
m4/fenv-exceptions-state.m4:      case "$gl_cv_func_fesetexceptflag_works2" in
m4/fenv-exceptions-state.m4:    gl_PREREQ_FENV_EXCEPTIONS
m4/fenv-exceptions-state.m4:    if test $gl_cv_func_fpsetsticky_no_libm = no \
m4/fenv-exceptions-state.m4:       && test $gl_cv_func_fpsetsticky_in_libm = yes \
m4/fenv-exceptions-tracking-c23.m4:AC_DEFUN([gl_FENV_EXCEPTIONS_TRACKING_C23],
m4/fenv-exceptions-tracking-c23.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv-exceptions-tracking-c23.m4:  gl_MATHFUNC([fesetexcept], [int], [(int)], [#include <fenv.h>])
m4/fenv-exceptions-tracking-c23.m4:  if test $gl_cv_func_fesetexcept_no_libm != yes \
m4/fenv-exceptions-tracking-c23.m4:     && test $gl_cv_func_fesetexcept_in_libm != yes; then
m4/fenv-exceptions-tracking-c23.m4:    AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fenv-exceptions-tracking-c23.m4:    gl_MATHFUNC([feenableexcept], [int], [(int)], [#include <fenv.h>])
m4/fenv-exceptions-tracking-c23.m4:      [gl_cv_func_fesetexcept_works],
m4/fenv-exceptions-tracking-c23.m4:      [if test $gl_cv_func_feenableexcept_no_libm = yes \
m4/fenv-exceptions-tracking-c23.m4:          || test $gl_cv_func_feenableexcept_in_libm = yes; then
m4/fenv-exceptions-tracking-c23.m4:         if test $gl_cv_func_feenableexcept_no_libm != yes; then
m4/fenv-exceptions-tracking-c23.m4:           [gl_cv_func_fesetexcept_works=yes],
m4/fenv-exceptions-tracking-c23.m4:           [gl_cv_func_fesetexcept_works=no],
m4/fenv-exceptions-tracking-c23.m4:                    gl_cv_func_fesetexcept_works="guessing no" ;;
m4/fenv-exceptions-tracking-c23.m4:                    gl_cv_func_fesetexcept_works="guessing yes" ;;
m4/fenv-exceptions-tracking-c23.m4:              *) gl_cv_func_fesetexcept_works="$gl_cross_guess_normal" ;;
m4/fenv-exceptions-tracking-c23.m4:         gl_cv_func_fesetexcept_works="guessing yes"
m4/fenv-exceptions-tracking-c23.m4:    case "$gl_cv_func_fesetexcept_works" in
m4/fenv-exceptions-tracking-c23.m4:  dnl Modify FENV_EXCEPTIONS_TRACKING_LIBM, set by gl_FENV_EXCEPTIONS_TRACKING.
m4/fenv-exceptions-tracking-c23.m4:  AC_REQUIRE([gl_FENV_EXCEPTIONS_TRACKING])
m4/fenv-exceptions-tracking-c23.m4:    gl_PREREQ_FENV_EXCEPTIONS
m4/fenv-exceptions-tracking-c23.m4:    if test $gl_cv_func_fpsetsticky_no_libm = no \
m4/fenv-exceptions-tracking-c23.m4:       && test $gl_cv_func_fpsetsticky_in_libm = yes \
m4/fenv-exceptions-tracking.m4:AC_DEFUN_ONCE([gl_FENV_EXCEPTIONS_TRACKING],
m4/fenv-exceptions-tracking.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv-exceptions-tracking.m4:  gl_MATHFUNC([feraiseexcept], [int], [(int)], [#include <fenv.h>])
m4/fenv-exceptions-tracking.m4:  if test $gl_cv_func_feraiseexcept_no_libm = yes \
m4/fenv-exceptions-tracking.m4:     || test $gl_cv_func_feraiseexcept_in_libm = yes; then
m4/fenv-exceptions-tracking.m4:          [gl_cv_func_feraiseexcept_works],
m4/fenv-exceptions-tracking.m4:             [gl_cv_func_feraiseexcept_works="guessing yes"],
m4/fenv-exceptions-tracking.m4:             [gl_cv_func_feraiseexcept_works="guessing no"])
m4/fenv-exceptions-tracking.m4:        case "$gl_cv_func_feraiseexcept_works" in
m4/fenv-exceptions-tracking.m4:          [gl_cv_func_feraiseexcept_works],
m4/fenv-exceptions-tracking.m4:             [gl_cv_func_feraiseexcept_works=no],
m4/fenv-exceptions-tracking.m4:             [gl_cv_func_feraiseexcept_works=yes],
m4/fenv-exceptions-tracking.m4:             [gl_cv_func_feraiseexcept_works="guessing no"])
m4/fenv-exceptions-tracking.m4:        case "$gl_cv_func_feraiseexcept_works" in
m4/fenv-exceptions-tracking.m4:            [gl_cv_func_feraiseexcept_works],
m4/fenv-exceptions-tracking.m4:                 gl_cv_func_feraiseexcept_works="guessing no" ;;
m4/fenv-exceptions-tracking.m4:                 gl_cv_func_feraiseexcept_works="guessing yes" ;;
m4/fenv-exceptions-tracking.m4:          case "$gl_cv_func_feraiseexcept_works" in
m4/fenv-exceptions-tracking.m4:          [gl_cv_func_fetestexcept_works],
m4/fenv-exceptions-tracking.m4:             [gl_cv_func_fetestexcept_works="guessing no"],
m4/fenv-exceptions-tracking.m4:             [gl_cv_func_fetestexcept_works="guessing yes"])
m4/fenv-exceptions-tracking.m4:        case "$gl_cv_func_fetestexcept_works" in
m4/fenv-exceptions-tracking.m4:      if test $gl_cv_func_feraiseexcept_no_libm = yes; then
m4/fenv-exceptions-tracking.m4:    gl_PREREQ_FENV_EXCEPTIONS
m4/fenv-exceptions-tracking.m4:    if test $gl_cv_func_fpsetsticky_no_libm = no \
m4/fenv-exceptions-tracking.m4:       && test $gl_cv_func_fpsetsticky_in_libm = yes \
m4/fenv-exceptions-trapping.m4:AC_DEFUN_ONCE([gl_FENV_EXCEPTIONS_TRAPPING],
m4/fenv-exceptions-trapping.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv-exceptions-trapping.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fenv-exceptions-trapping.m4:  gl_MATHFUNC([feenableexcept], [int], [(int)], [#include <fenv.h>])
m4/fenv-exceptions-trapping.m4:  if test $gl_cv_func_feenableexcept_no_libm = yes \
m4/fenv-exceptions-trapping.m4:     || test $gl_cv_func_feenableexcept_in_libm = yes; then
m4/fenv-exceptions-trapping.m4:          [gl_cv_func_feenableexcept_works],
m4/fenv-exceptions-trapping.m4:             [gl_cv_func_feenableexcept_works="guessing yes"],
m4/fenv-exceptions-trapping.m4:             [gl_cv_func_feenableexcept_works="guessing no"])
m4/fenv-exceptions-trapping.m4:        case "$gl_cv_func_feenableexcept_works" in
m4/fenv-exceptions-trapping.m4:      if test $gl_cv_func_feenableexcept_no_libm = yes; then
m4/fenv-exceptions-trapping.m4:    gl_PREREQ_FENV_EXCEPTIONS_TRAPPING
m4/fenv-exceptions-trapping.m4:    if test $gl_cv_func_fpsetmask_no_libm = no \
m4/fenv-exceptions-trapping.m4:       && test $gl_cv_func_fpsetmask_in_libm = yes \
m4/fenv-exceptions-trapping.m4:    if test $gl_cv_func_fesettrapenable_no_libm = no \
m4/fenv-exceptions-trapping.m4:       && test $gl_cv_func_fesettrapenable_in_libm = yes \
m4/fenv-exceptions-trapping.m4:AC_DEFUN([gl_PREREQ_FENV_EXCEPTIONS_TRAPPING],
m4/fenv-exceptions-trapping.m4:  gl_MATHFUNC([fpsetmask], [fp_except_t], [(fp_except_t)],
m4/fenv-exceptions-trapping.m4:  if test $gl_cv_func_fpsetmask_no_libm = yes \
m4/fenv-exceptions-trapping.m4:     || test $gl_cv_func_fpsetmask_in_libm = yes; then
m4/fenv-exceptions-trapping.m4:  gl_MATHFUNC([fesettrapenable], [int], [(int)], [#include <fenv.h>])
m4/fenv-exceptions-trapping.m4:  if test $gl_cv_func_fesettrapenable_no_libm = yes \
m4/fenv-exceptions-trapping.m4:     || test $gl_cv_func_fesettrapenable_in_libm = yes; then
m4/fenv-exceptions.m4:AC_DEFUN([gl_PREREQ_FENV_EXCEPTIONS],
m4/fenv-exceptions.m4:  gl_MATHFUNC([fpsetsticky], [fp_except_t], [(fp_except_t)],
m4/fenv-exceptions.m4:  if test $gl_cv_func_fpsetsticky_no_libm = yes \
m4/fenv-exceptions.m4:     || test $gl_cv_func_fpsetsticky_in_libm = yes; then
m4/fenv-rounding.m4:AC_DEFUN([gl_FENV_ROUNDING],
m4/fenv-rounding.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv-rounding.m4:  gl_MATHFUNC([fesetround], [int], [(int)], [#include <fenv.h>])
m4/fenv-rounding.m4:  if test $gl_cv_func_fesetround_no_libm = yes \
m4/fenv-rounding.m4:     || test $gl_cv_func_fesetround_in_libm = yes; then
m4/fenv-rounding.m4:      [gl_cv_func_fesetround_works],
m4/fenv-rounding.m4:             [gl_cv_func_fesetround_works="guessing no"],
m4/fenv-rounding.m4:             [gl_cv_func_fesetround_works="guessing yes"])
m4/fenv-rounding.m4:         *) gl_cv_func_fesetround_works="guessing yes" ;;
m4/fenv-rounding.m4:    case "$gl_cv_func_fesetround_works" in
m4/fenv-rounding.m4:      if test $gl_cv_func_fesetround_no_libm = yes; then
m4/fenv-rounding.m4:    gl_PREREQ_FENV_ROUNDING
m4/fenv-rounding.m4:    if test $gl_cv_func_fpsetround_no_libm = no \
m4/fenv-rounding.m4:       && test $gl_cv_func_fpsetround_in_libm = yes \
m4/fenv-rounding.m4:AC_DEFUN([gl_PREREQ_FENV_ROUNDING],
m4/fenv-rounding.m4:  gl_MATHFUNC([fpsetround], [fp_rnd], [(fp_rnd)],
m4/fenv-rounding.m4:  if test $gl_cv_func_fpsetround_no_libm = yes \
m4/fenv-rounding.m4:     || test $gl_cv_func_fpsetround_in_libm = yes; then
m4/fenv_h.m4:AC_DEFUN_ONCE([gl_FENV_H],
m4/fenv_h.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv_h.m4:  gl_CHECK_NEXT_HEADERS([fenv.h])
m4/fenv_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <fenv.h>
m4/fenv_h.m4:# gl_FENV_MODULE_INDICATOR([modulename])
m4/fenv_h.m4:AC_DEFUN([gl_FENV_MODULE_INDICATOR],
m4/fenv_h.m4:  gl_FENV_H_REQUIRE_DEFAULTS
m4/fenv_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/fenv_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/fenv_h.m4:AC_DEFUN([gl_FENV_H_REQUIRE_DEFAULTS],
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FECLEAREXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEDISABLEEXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEENABLEEXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEGETENV])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEGETEXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEGETEXCEPTFLAG])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEGETROUND])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEHOLDEXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FERAISEEXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FESETENV])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FESETEXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FESETEXCEPTFLAG])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FESETROUND])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FETESTEXCEPT])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FETESTEXCEPTFLAG])
m4/fenv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FEUPDATEENV])
m4/fenv_h.m4:  AC_REQUIRE([gl_FENV_H_DEFAULTS])
m4/fenv_h.m4:AC_DEFUN([gl_FENV_H_DEFAULTS],
m4/fflush.m4:AC_DEFUN([gl_FUNC_FFLUSH],
m4/fflush.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fflush.m4:  gl_FUNC_FFLUSH_STDIN
m4/fflush.m4:  case "$gl_cv_func_fflush_stdin" in
m4/fflush.m4:dnl Sets gl_cv_func_fflush_stdin.
m4/fflush.m4:AC_DEFUN([gl_FUNC_FFLUSH_STDIN],
m4/fflush.m4:    [gl_cv_func_fflush_stdin],
m4/fflush.m4:       [gl_cv_func_fflush_stdin=yes],
m4/fflush.m4:       [gl_cv_func_fflush_stdin=no],
m4/fflush.m4:          mingw* | windows*) gl_cv_func_fflush_stdin="guessing no" ;;
m4/fflush.m4:          *)                 gl_cv_func_fflush_stdin=cross ;;
m4/fflush.m4:  case "$gl_cv_func_fflush_stdin" in
m4/fflush.m4:    *yes) gl_func_fflush_stdin=1 ;;
m4/fflush.m4:    *no)  gl_func_fflush_stdin=0 ;;
m4/fflush.m4:    *)    gl_func_fflush_stdin='(-1)' ;;
m4/fflush.m4:  AC_DEFINE_UNQUOTED([FUNC_FFLUSH_STDIN], [$gl_func_fflush_stdin],
m4/fflush.m4:AC_DEFUN([gl_PREREQ_FFLUSH], [:])
m4/ffs.m4:AC_DEFUN([gl_FUNC_FFS],
m4/ffs.m4:  AC_REQUIRE([gl_STRINGS_H_DEFAULTS])
m4/ffs.m4:  AC_CACHE_CHECK([for ffs], [gl_cv_func_ffs],
m4/ffs.m4:       [gl_cv_func_ffs=yes],
m4/ffs.m4:       [gl_cv_func_ffs=no])
m4/ffs.m4:  if test $gl_cv_func_ffs = no; then
m4/ffsl.m4:AC_DEFUN([gl_FUNC_FFSL],
m4/ffsl.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/ffsl.m4:  AC_CACHE_CHECK([for ffsl], [gl_cv_func_ffsl],
m4/ffsl.m4:       [gl_cv_func_ffsl=yes],
m4/ffsl.m4:       [gl_cv_func_ffsl=no])
m4/ffsl.m4:  if test $gl_cv_func_ffsl = no; then
m4/ffsll.m4:AC_DEFUN([gl_FUNC_FFSLL],
m4/ffsll.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/ffsll.m4:  AC_CACHE_CHECK([for ffsll], [gl_cv_func_ffsll],
m4/ffsll.m4:       [gl_cv_func_ffsll=yes],
m4/ffsll.m4:       [gl_cv_func_ffsll=no])
m4/ffsll.m4:  if test $gl_cv_func_ffsll = yes; then
m4/ffsll.m4:      [gl_cv_func_ffsll_works],
m4/ffsll.m4:         [gl_cv_func_ffsll_works=yes],
m4/ffsll.m4:         [gl_cv_func_ffsll_works=no],
m4/ffsll.m4:            *-gnu* | gnu*)      gl_cv_func_ffsll_works="guessing yes" ;;
m4/ffsll.m4:            *-musl* | midipix*) gl_cv_func_ffsll_works="guessing yes" ;;
m4/ffsll.m4:            mingw* | windows*)  gl_cv_func_ffsll_works="guessing yes" ;;
m4/ffsll.m4:            aix*)               gl_cv_func_ffsll_works="guessing no" ;;
m4/ffsll.m4:            *)                  gl_cv_func_ffsll_works="$gl_cross_guess_normal" ;;
m4/ffsll.m4:    case "$gl_cv_func_ffsll_works" in
m4/fileblocks.m4:AC_DEFUN([gl_FILEBLOCKS],
m4/fileblocks.m4:AC_DEFUN([gl_PREREQ_FILEBLOCKS], [
m4/filemode.m4:AC_DEFUN([gl_FILEMODE],
m4/filenamecat.m4:AC_DEFUN([gl_FILE_NAME_CONCAT],
m4/filenamecat.m4:  AC_REQUIRE([gl_FILE_NAME_CONCAT_LGPL])
m4/filenamecat.m4:AC_DEFUN([gl_FILE_NAME_CONCAT_LGPL],
m4/filenamecat.m4:  gl_CHECK_FUNCS_ANDROID([mempcpy], [[#include <string.h>]])
m4/findprog-in.m4:AC_DEFUN([gl_FINDPROG_IN],
m4/findprog-in.m4:  AC_REQUIRE([gl_FUNC_EACCESS])
m4/findprog.m4:AC_DEFUN([gl_FINDPROG],
m4/findprog.m4:  AC_REQUIRE([gl_FUNC_EACCESS])
m4/float_h.m4:AC_DEFUN([gl_FLOAT_H],
m4/float_h.m4:    [gl_cv_header_float_h_isoc23],
m4/float_h.m4:       [gl_cv_header_float_h_isoc23=yes],
m4/float_h.m4:       [gl_cv_header_float_h_isoc23=no])
m4/float_h.m4:  if test $gl_cv_header_float_h_isoc23 != yes; then
m4/float_h.m4:    [gl_cv_func_itold_works],
m4/float_h.m4:        [gl_cv_func_itold_works=yes],
m4/float_h.m4:        [gl_cv_func_itold_works=no],
m4/float_h.m4:               [gl_cv_func_itold_works="guessing no"],
m4/float_h.m4:               [gl_cv_func_itold_works="guessing yes"])
m4/float_h.m4:             gl_cv_func_itold_works="guessing yes" ;;
m4/float_h.m4:             gl_cv_func_itold_works="guessing yes" ;;
m4/float_h.m4:  case "$gl_cv_func_itold_works" in
m4/float_h.m4:    gl_NEXT_HEADERS([float.h])
m4/flock.m4:AC_DEFUN([gl_FUNC_FLOCK],
m4/flock.m4:  AC_REQUIRE([gl_SYS_FILE_H_DEFAULTS])
m4/flock.m4:AC_DEFUN([gl_PREREQ_FLOCK],
m4/floor-ieee.m4:dnl module description), so that gl_FUNC_FLOOR can test whether 'aclocal' has
m4/floor-ieee.m4:AC_DEFUN([gl_FUNC_FLOOR_IEEE],
m4/floor-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_floor_required=ieee])
m4/floor-ieee.m4:  AC_REQUIRE([gl_FUNC_FLOOR])
m4/floor.m4:AC_DEFUN([gl_FUNC_FLOOR],
m4/floor.m4:  m4_divert_text([DEFAULTS], [gl_floor_required=plain])
m4/floor.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/floor.m4:  gl_FUNC_FLOOR_LIBS
m4/floor.m4:  m4_ifdef([gl_FUNC_FLOOR_IEEE], [
m4/floor.m4:    if test $gl_floor_required = ieee && test $REPLACE_FLOOR = 0; then
m4/floor.m4:        [gl_cv_func_floor_ieee],
m4/floor.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/floor.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/floor.m4:            [gl_cv_func_floor_ieee=yes],
m4/floor.m4:            [gl_cv_func_floor_ieee=no],
m4/floor.m4:               *-gnu* | gnu*)      gl_cv_func_floor_ieee="guessing yes" ;;
m4/floor.m4:               *-musl* | midipix*) gl_cv_func_floor_ieee="guessing yes" ;;
m4/floor.m4:               mingw* | windows*)  gl_cv_func_floor_ieee="guessing yes" ;;
m4/floor.m4:               *)                  gl_cv_func_floor_ieee="$gl_cross_guess_normal" ;;
m4/floor.m4:      case "$gl_cv_func_floor_ieee" in
m4/floor.m4:AC_DEFUN([gl_FUNC_FLOOR_LIBS],
m4/floor.m4:  gl_CACHE_VAL_SILENT([gl_cv_func_floor_libm], [
m4/floor.m4:    gl_cv_func_floor_libm=?
m4/floor.m4:      [gl_cv_func_floor_libm=])
m4/floor.m4:    if test "$gl_cv_func_floor_libm" = "?"; then
m4/floor.m4:        [gl_cv_func_floor_libm="-lm"])
m4/floor.m4:  FLOOR_LIBM="$gl_cv_func_floor_libm"
m4/floorf-ieee.m4:dnl module description), so that gl_FUNC_FLOORF can test whether 'aclocal' has
m4/floorf-ieee.m4:AC_DEFUN([gl_FUNC_FLOORF_IEEE],
m4/floorf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_floorf_required=ieee])
m4/floorf-ieee.m4:  AC_REQUIRE([gl_FUNC_FLOORF])
m4/floorf.m4:AC_DEFUN([gl_FUNC_FLOORF],
m4/floorf.m4:  m4_divert_text([DEFAULTS], [gl_floorf_required=plain])
m4/floorf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/floorf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/floorf.m4:    gl_FUNC_FLOORF_LIBS
m4/floorf.m4:    m4_ifdef([gl_FUNC_FLOORF_IEEE], [
m4/floorf.m4:      if test $gl_floorf_required = ieee && test $REPLACE_FLOORF = 0; then
m4/floorf.m4:          [gl_cv_func_floorf_ieee],
m4/floorf.m4:]gl_FLOAT_MINUS_ZERO_CODE[
m4/floorf.m4:]gl_FLOAT_SIGNBIT_CODE[
m4/floorf.m4:              [gl_cv_func_floorf_ieee=yes],
m4/floorf.m4:              [gl_cv_func_floorf_ieee=no],
m4/floorf.m4:                 *-gnu* | gnu*)      gl_cv_func_floorf_ieee="guessing yes" ;;
m4/floorf.m4:                 *-musl* | midipix*) gl_cv_func_floorf_ieee="guessing yes" ;;
m4/floorf.m4:                 mingw* | windows*)  gl_cv_func_floorf_ieee="guessing yes" ;;
m4/floorf.m4:                 *)                  gl_cv_func_floorf_ieee="$gl_cross_guess_normal" ;;
m4/floorf.m4:        case "$gl_cv_func_floorf_ieee" in
m4/floorf.m4:AC_DEFUN([gl_FUNC_FLOORF_LIBS],
m4/floorf.m4:  gl_CACHE_VAL_SILENT([gl_cv_func_floorf_libm], [
m4/floorf.m4:    gl_cv_func_floorf_libm=?
m4/floorf.m4:      [gl_cv_func_floorf_libm=])
m4/floorf.m4:    if test "$gl_cv_func_floorf_libm" = "?"; then
m4/floorf.m4:        [gl_cv_func_floorf_libm="-lm"])
m4/floorf.m4:  FLOORF_LIBM="$gl_cv_func_floorf_libm"
m4/floorl.m4:AC_DEFUN([gl_FUNC_FLOORL],
m4/floorl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/floorl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/floorl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/floorl.m4:    gl_FUNC_FLOORL_LIBS
m4/floorl.m4:      AC_REQUIRE([gl_FUNC_FLOOR])
m4/floorl.m4:AC_DEFUN([gl_FUNC_FLOORL_LIBS],
m4/floorl.m4:  gl_CACHE_VAL_SILENT([gl_cv_func_floorl_libm], [
m4/floorl.m4:    gl_cv_func_floorl_libm=?
m4/floorl.m4:      [gl_cv_func_floorl_libm=])
m4/floorl.m4:    if test "$gl_cv_func_floorl_libm" = "?"; then
m4/floorl.m4:        [gl_cv_func_floorl_libm="-lm"])
m4/floorl.m4:  FLOORL_LIBM="$gl_cv_func_floorl_libm"
m4/fma.m4:AC_DEFUN([gl_FUNC_FMA],
m4/fma.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fma.m4:  gl_MATHFUNC([fma], [double], [(double, double, double)],
m4/fma.m4:  if test $gl_cv_func_fma_no_libm = yes \
m4/fma.m4:     || test $gl_cv_func_fma_in_libm = yes; then
m4/fma.m4:      gl_FUNC_FMA_WORKS
m4/fma.m4:      case "$gl_cv_func_fma_works" in
m4/fma.m4:    AC_REQUIRE([gl_FUNC_FREXP])
m4/fma.m4:    AC_REQUIRE([gl_FUNC_LDEXP])
m4/fma.m4:    AC_REQUIRE([gl_FUNC_FEGETROUND])
m4/fma.m4:AC_DEFUN([gl_FUNC_FMA_WORKS],
m4/fma.m4:  AC_REQUIRE([gl_FUNC_LDEXP])
m4/fma.m4:  AC_CACHE_CHECK([whether fma works], [gl_cv_func_fma_works],
m4/fma.m4:        [gl_cv_func_fma_works=yes],
m4/fma.m4:        [gl_cv_func_fma_works=no],
m4/fma.m4:         gl_cv_func_fma_works="$gl_cross_guess_normal"
m4/fma.m4:             gl_cv_func_fma_works="guessing yes"
m4/fma.m4:               ], [gl_cv_func_fma_works="guessing yes"])
m4/fma.m4:AC_DEFUN([gl_PREREQ_FMA], [:])
m4/fmaf.m4:AC_DEFUN([gl_FUNC_FMAF],
m4/fmaf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fmaf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fmaf.m4:  gl_MATHFUNC([fmaf], [float], [(float, float, float)],
m4/fmaf.m4:  if test $gl_cv_func_fmaf_no_libm = yes \
m4/fmaf.m4:     || test $gl_cv_func_fmaf_in_libm = yes; then
m4/fmaf.m4:      gl_FUNC_FMAF_WORKS
m4/fmaf.m4:      case "$gl_cv_func_fmaf_works" in
m4/fmaf.m4:    AC_REQUIRE([gl_FUNC_FREXPF])
m4/fmaf.m4:    AC_REQUIRE([gl_FUNC_LDEXPF])
m4/fmaf.m4:    AC_REQUIRE([gl_FUNC_FEGETROUND])
m4/fmaf.m4:AC_DEFUN([gl_FUNC_FMAF_WORKS],
m4/fmaf.m4:  AC_REQUIRE([gl_FUNC_LDEXPF])
m4/fmaf.m4:  AC_CACHE_CHECK([whether fmaf works], [gl_cv_func_fmaf_works],
m4/fmaf.m4:        [gl_cv_func_fmaf_works=yes],
m4/fmaf.m4:        [gl_cv_func_fmaf_works=no],
m4/fmaf.m4:         gl_cv_func_fmaf_works="$gl_cross_guess_normal"
m4/fmaf.m4:             gl_cv_func_fmaf_works="guessing yes"
m4/fmaf.m4:               ], [gl_cv_func_fmaf_works="guessing yes"])
m4/fmaf.m4:AC_DEFUN([gl_PREREQ_FMAF], [:])
m4/fmal.m4:AC_DEFUN([gl_FUNC_FMAL],
m4/fmal.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fmal.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/fmal.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fmal.m4:  gl_MATHFUNC([fmal], [long double], [(long double, long double, long double)],
m4/fmal.m4:  if test $gl_cv_func_fmal_no_libm = yes \
m4/fmal.m4:     || test $gl_cv_func_fmal_in_libm = yes; then
m4/fmal.m4:      gl_FUNC_FMAL_WORKS
m4/fmal.m4:      case "$gl_cv_func_fmal_works" in
m4/fmal.m4:      AC_REQUIRE([gl_FUNC_FMA])
m4/fmal.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/fmal.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/fmal.m4:      AC_REQUIRE([gl_FUNC_FEGETROUND])
m4/fmal.m4:AC_DEFUN([gl_FUNC_FMAL_WORKS],
m4/fmal.m4:  AC_REQUIRE([gl_FUNC_LDEXPL])
m4/fmal.m4:  AC_CACHE_CHECK([whether fmal works], [gl_cv_func_fmal_works],
m4/fmal.m4:        [gl_cv_func_fmal_works=yes],
m4/fmal.m4:        [gl_cv_func_fmal_works=no],
m4/fmal.m4:         gl_cv_func_fmal_works="$gl_cross_guess_normal"
m4/fmal.m4:             gl_cv_func_fmal_works="guessing yes"
m4/fmal.m4:               ], [gl_cv_func_fmal_works="guessing yes"])
m4/fmal.m4:AC_DEFUN([gl_PREREQ_FMAL], [:])
m4/fmod-ieee.m4:dnl module description), so that gl_FUNC_FMOD can test whether 'aclocal' has
m4/fmod-ieee.m4:AC_DEFUN([gl_FUNC_FMOD_IEEE],
m4/fmod-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_fmod_required=ieee])
m4/fmod-ieee.m4:  AC_REQUIRE([gl_FUNC_FMOD])
m4/fmod.m4:AC_DEFUN([gl_FUNC_FMOD],
m4/fmod.m4:  m4_divert_text([DEFAULTS], [gl_fmod_required=plain])
m4/fmod.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fmod.m4:  gl_COMMON_DOUBLE_MATHFUNC([fmod])
m4/fmod.m4:  m4_ifdef([gl_FUNC_FMOD_IEEE], [
m4/fmod.m4:    if test $gl_fmod_required = ieee && test $REPLACE_FMOD = 0; then
m4/fmod.m4:        [gl_cv_func_fmod_ieee],
m4/fmod.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/fmod.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/fmod.m4:            [gl_cv_func_fmod_ieee=yes],
m4/fmod.m4:            [gl_cv_func_fmod_ieee=no],
m4/fmod.m4:               *-gnu* | gnu*)      gl_cv_func_fmod_ieee="guessing yes" ;;
m4/fmod.m4:               *-musl* | midipix*) gl_cv_func_fmod_ieee="guessing yes" ;;
m4/fmod.m4:               mingw* | windows*)  gl_cv_func_fmod_ieee="guessing yes" ;;
m4/fmod.m4:               *)                  gl_cv_func_fmod_ieee="$gl_cross_guess_normal" ;;
m4/fmod.m4:      case "$gl_cv_func_fmod_ieee" in
m4/fmod.m4:    AC_REQUIRE([gl_FUNC_FABS])
m4/fmod.m4:    AC_REQUIRE([gl_FUNC_FREXP])
m4/fmod.m4:    AC_REQUIRE([gl_FUNC_TRUNC])
m4/fmod.m4:    AC_REQUIRE([gl_FUNC_LDEXP])
m4/fmod.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/fmodf-ieee.m4:dnl module description), so that gl_FUNC_FMODF can test whether 'aclocal' has
m4/fmodf-ieee.m4:AC_DEFUN([gl_FUNC_FMODF_IEEE],
m4/fmodf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_fmodf_required=ieee])
m4/fmodf-ieee.m4:  AC_REQUIRE([gl_FUNC_FMODF])
m4/fmodf.m4:AC_DEFUN([gl_FUNC_FMODF],
m4/fmodf.m4:  m4_divert_text([DEFAULTS], [gl_fmodf_required=plain])
m4/fmodf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fmodf.m4:  AC_REQUIRE([gl_FUNC_FMOD])
m4/fmodf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fmodf.m4:    m4_ifdef([gl_FUNC_FMODF_IEEE], [
m4/fmodf.m4:      if test $gl_fmodf_required = ieee && test $REPLACE_FMODF = 0; then
m4/fmodf.m4:          [gl_cv_func_fmodf_ieee],
m4/fmodf.m4:              [gl_cv_func_fmodf_ieee=yes],
m4/fmodf.m4:              [gl_cv_func_fmodf_ieee=no],
m4/fmodf.m4:                 *-gnu* | gnu*)      gl_cv_func_fmodf_ieee="guessing yes" ;;
m4/fmodf.m4:                 *-musl* | midipix*) gl_cv_func_fmodf_ieee="guessing yes" ;;
m4/fmodf.m4:                 mingw* | windows*)  gl_cv_func_fmodf_ieee="guessing yes" ;;
m4/fmodf.m4:                 *)                  gl_cv_func_fmodf_ieee="$gl_cross_guess_normal" ;;
m4/fmodf.m4:        case "$gl_cv_func_fmodf_ieee" in
m4/fmodl-ieee.m4:dnl module description), so that gl_FUNC_FMODL can test whether 'aclocal' has
m4/fmodl-ieee.m4:AC_DEFUN([gl_FUNC_FMODL_IEEE],
m4/fmodl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_fmodl_required=ieee])
m4/fmodl-ieee.m4:  AC_REQUIRE([gl_FUNC_FMODL])
m4/fmodl.m4:AC_DEFUN([gl_FUNC_FMODL],
m4/fmodl.m4:  m4_divert_text([DEFAULTS], [gl_fmodl_required=plain])
m4/fmodl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/fmodl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/fmodl.m4:  AC_REQUIRE([gl_FUNC_FMOD])
m4/fmodl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fmodl.m4:    m4_ifdef([gl_FUNC_FMODL_IEEE], [
m4/fmodl.m4:      if test $gl_fmodl_required = ieee && test $REPLACE_FMODL = 0; then
m4/fmodl.m4:          [gl_cv_func_fmodl_ieee],
m4/fmodl.m4:              [gl_cv_func_fmodl_ieee=yes],
m4/fmodl.m4:              [gl_cv_func_fmodl_ieee=no],
m4/fmodl.m4:                 *-gnu* | gnu*)      gl_cv_func_fmodl_ieee="guessing yes" ;;
m4/fmodl.m4:                 *-musl* | midipix*) gl_cv_func_fmodl_ieee="guessing yes" ;;
m4/fmodl.m4:                 mingw* | windows*)  gl_cv_func_fmodl_ieee="guessing yes" ;;
m4/fmodl.m4:                 *)                  gl_cv_func_fmodl_ieee="$gl_cross_guess_normal" ;;
m4/fmodl.m4:        case "$gl_cv_func_fmodl_ieee" in
m4/fmodl.m4:      AC_REQUIRE([gl_FUNC_FABSL])
m4/fmodl.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/fmodl.m4:      AC_REQUIRE([gl_FUNC_TRUNCL])
m4/fmodl.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/fmodl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/fnmatch.m4:AC_DEFUN([gl_FUNC_FNMATCH_POSIX],
m4/fnmatch.m4:  m4_divert_text([DEFAULTS], [gl_fnmatch_required=POSIX])
m4/fnmatch.m4:  AC_REQUIRE([gl_FNMATCH_H])
m4/fnmatch.m4:  gl_fnmatch_required_lowercase=`
m4/fnmatch.m4:    echo $gl_fnmatch_required | LC_ALL=C tr '[[A-Z]]' '[[a-z]]'
m4/fnmatch.m4:    gl_fnmatch_cache_var="gl_cv_func_fnmatch_${gl_fnmatch_required_lowercase}"
m4/fnmatch.m4:    AC_CACHE_CHECK([for working $gl_fnmatch_required fnmatch],
m4/fnmatch.m4:      [$gl_fnmatch_cache_var],
m4/fnmatch.m4:       if test $gl_fnmatch_required = GNU; then
m4/fnmatch.m4:         gl_fnmatch_gnu_start=
m4/fnmatch.m4:         gl_fnmatch_gnu_end=
m4/fnmatch.m4:         gl_fnmatch_gnu_start='#if 0'
m4/fnmatch.m4:         gl_fnmatch_gnu_end='#endif'
m4/fnmatch.m4:              $gl_fnmatch_gnu_start /* ==== Start of GNU extensions tests ==== */
m4/fnmatch.m4:              $gl_fnmatch_gnu_end /* ==== End of GNU extensions tests ==== */
m4/fnmatch.m4:         [eval "$gl_fnmatch_cache_var=yes"],
m4/fnmatch.m4:         [eval "$gl_fnmatch_cache_var=no"],
m4/fnmatch.m4:            *-musl* | midipix*) eval "$gl_fnmatch_cache_var=\"guessing yes\"" ;;
m4/fnmatch.m4:            *)                  eval "$gl_fnmatch_cache_var=\"guessing no\"" ;;
m4/fnmatch.m4:    eval "gl_fnmatch_result=\"\$$gl_fnmatch_cache_var\""
m4/fnmatch.m4:    case "$gl_fnmatch_result" in
m4/fnmatch.m4:    AC_REQUIRE([gl_UCHAR_H])
m4/fnmatch.m4:          dnl On Cygwin < 3.5.0, the above $gl_fnmatch_result came out as 'no',
m4/fnmatch.m4:    gl_REPLACE_FNMATCH_H
m4/fnmatch.m4:AC_DEFUN([gl_FUNC_FNMATCH_GNU],
m4/fnmatch.m4:  m4_divert_text([INIT_PREPARE], [gl_fnmatch_required=GNU])
m4/fnmatch.m4:  AC_REQUIRE([gl_FUNC_FNMATCH_POSIX])
m4/fnmatch.m4:AC_DEFUN([gl_PREREQ_FNMATCH],
m4/fnmatch_h.m4:AC_DEFUN_ONCE([gl_FNMATCH_H],
m4/fnmatch_h.m4:  AC_REQUIRE([gl_FNMATCH_H_DEFAULTS])
m4/fnmatch_h.m4:  m4_ifdef([gl_ANSI_CXX], [AC_REQUIRE([gl_ANSI_CXX])])
m4/fnmatch_h.m4:  gl_CHECK_NEXT_HEADERS([fnmatch.h])
m4/fnmatch_h.m4:  dnl This is only needed if gl_fnmatch_required = GNU. It would be possible
m4/fnmatch_h.m4:  dnl to avoid this dependency for gl_FUNC_FNMATCH_POSIX by putting
m4/fnmatch_h.m4:  dnl gl_FUNC_FNMATCH_GNU into a separate .m4 file.
m4/fnmatch_h.m4:  m4_ifdef([gl_POSIXCHECK],
m4/fnmatch_h.m4:     if m4_ifdef([gl_ANSI_CXX], [test "$CXX" != no], [false]); then
m4/fnmatch_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <fnmatch.h>
m4/fnmatch_h.m4:AC_DEFUN([gl_REPLACE_FNMATCH_H],
m4/fnmatch_h.m4:  gl_FNMATCH_H_REQUIRE_DEFAULTS
m4/fnmatch_h.m4:# gl_FNMATCH_MODULE_INDICATOR([modulename])
m4/fnmatch_h.m4:AC_DEFUN([gl_FNMATCH_MODULE_INDICATOR],
m4/fnmatch_h.m4:  gl_FNMATCH_H_REQUIRE_DEFAULTS
m4/fnmatch_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/fnmatch_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/fnmatch_h.m4:AC_DEFUN([gl_FNMATCH_H_REQUIRE_DEFAULTS],
m4/fnmatch_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FNMATCH])
m4/fnmatch_h.m4:  AC_REQUIRE([gl_FNMATCH_H_DEFAULTS])
m4/fnmatch_h.m4:AC_DEFUN([gl_FNMATCH_H_DEFAULTS],
m4/fopen.m4:AC_DEFUN([gl_FUNC_FOPEN_ITSELF],
m4/fopen.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fopen.m4:      gl_cv_func_fopen_slash="guessing no"
m4/fopen.m4:        [gl_cv_func_fopen_slash],
m4/fopen.m4:            [gl_cv_func_fopen_slash=yes],
m4/fopen.m4:            [gl_cv_func_fopen_slash=no],
m4/fopen.m4:                 gl_cv_func_fopen_slash="guessing no" ;;
m4/fopen.m4:                 gl_cv_func_fopen_slash="guessing yes" ;;
m4/fopen.m4:  case "$gl_cv_func_fopen_slash" in
m4/fopen.m4:AC_DEFUN([gl_FUNC_FOPEN],
m4/fopen.m4:  AC_REQUIRE([gl_FUNC_FOPEN_ITSELF])
m4/fopen.m4:  AC_REQUIRE([gl_FUNC_FCLOSE])
m4/fopen.m4:AC_DEFUN([gl_FUNC_FOPEN_GNU],
m4/fopen.m4:  AC_REQUIRE([gl_FUNC_FOPEN])
m4/fopen.m4:    [gl_cv_func_fopen_mode_x],
m4/fopen.m4:       [gl_cv_func_fopen_mode_x=yes],
m4/fopen.m4:       [gl_cv_func_fopen_mode_x=no],
m4/fopen.m4:            gl_cv_func_fopen_mode_x="guessing yes" ;;
m4/fopen.m4:            gl_cv_func_fopen_mode_x="$gl_cross_guess_normal" ;;
m4/fopen.m4:    [gl_cv_func_fopen_mode_e],
m4/fopen.m4:       [gl_cv_func_fopen_mode_e=yes],
m4/fopen.m4:       [gl_cv_func_fopen_mode_e=no],
m4/fopen.m4:            gl_cv_func_fopen_mode_e="guessing yes" ;;
m4/fopen.m4:            gl_cv_func_fopen_mode_e="guessing no" ;;
m4/fopen.m4:            gl_cv_func_fopen_mode_e="$gl_cross_guess_normal" ;;
m4/fopen.m4:  case "$gl_cv_func_fopen_mode_x" in
m4/fopen.m4:  case "$gl_cv_func_fopen_mode_e" in
m4/fopen.m4:AC_DEFUN([gl_PREREQ_FOPEN], [:])
m4/fpe-trapping.m4:AC_DEFUN_ONCE([gl_FPE_TRAPPING],
m4/fpe-trapping.m4:  AC_REQUIRE([gl_FENV_EXCEPTIONS_TRACKING])
m4/fpe-trapping.m4:  AC_REQUIRE([gl_FENV_EXCEPTIONS_TRAPPING])
m4/fpending.m4:AC_DEFUN([gl_FUNC_FPENDING],
m4/fpending.m4:  AC_CACHE_CHECK([for __fpending], [gl_cv_func___fpending],
m4/fpending.m4:        [gl_cv_func___fpending=yes],
m4/fpending.m4:        [gl_cv_func___fpending=no])
m4/fpending.m4:  if test $gl_cv_func___fpending = yes; then
m4/fpieee.m4:AC_DEFUN([gl_FP_IEEE],
m4/fprintf-gnu.m4:AC_DEFUN([gl_FUNC_FPRINTF_GNU],
m4/fprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_FPRINTF_IS_POSIX])
m4/fprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/fprintf-gnu.m4:  gl_cv_func_fprintf_gnu=no
m4/fprintf-gnu.m4:  if test $gl_cv_func_fprintf_posix = yes; then
m4/fprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/fprintf-gnu.m4:        gl_cv_func_fprintf_gnu=yes
m4/fprintf-gnu.m4:  if test $gl_cv_func_fprintf_gnu = no; then
m4/fprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/fprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/fprintf-gnu.m4:    gl_REPLACE_FPRINTF
m4/fprintf-posix.m4:AC_DEFUN([gl_FUNC_FPRINTF_POSIX],
m4/fprintf-posix.m4:  AC_REQUIRE([gl_FUNC_FPRINTF_IS_POSIX])
m4/fprintf-posix.m4:  if test $gl_cv_func_fprintf_posix = no; then
m4/fprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/fprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/fprintf-posix.m4:    gl_REPLACE_FPRINTF
m4/fprintf-posix.m4:dnl Result is gl_cv_func_fprintf_posix.
m4/fprintf-posix.m4:AC_DEFUN([gl_FUNC_FPRINTF_IS_POSIX],
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/fprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/fprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/fprintf-posix.m4:  gl_cv_func_fprintf_posix=no
m4/fprintf-posix.m4:  case "$gl_cv_func_printf_sizes_c99" in
m4/fprintf-posix.m4:      case "$gl_cv_func_printf_sizes_c23" in
m4/fprintf-posix.m4:          case "$gl_cv_func_printf_long_double" in
m4/fprintf-posix.m4:              case "$gl_cv_func_printf_infinite" in
m4/fprintf-posix.m4:                  case "$gl_cv_func_printf_infinite_long_double" in
m4/fprintf-posix.m4:                      case "$gl_cv_func_printf_directive_a" in
m4/fprintf-posix.m4:                          case "$gl_cv_func_printf_directive_b" in
m4/fprintf-posix.m4:                              case "$gl_cv_func_printf_directive_f" in
m4/fprintf-posix.m4:                                  case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/fprintf-posix.m4:                                      case "$gl_cv_func_printf_directive_ls" in
m4/fprintf-posix.m4:                                          case "$gl_cv_func_printf_directive_lc" in
m4/fprintf-posix.m4:                                              case "$gl_cv_func_printf_positions" in
m4/fprintf-posix.m4:                                                  case "$gl_cv_func_printf_flag_grouping" in
m4/fprintf-posix.m4:                                                      case "$gl_cv_func_printf_flag_leftadjust" in
m4/fprintf-posix.m4:                                                          case "$gl_cv_func_printf_flag_zero" in
m4/fprintf-posix.m4:                                                              case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/fprintf-posix.m4:                                                                  case "$gl_cv_func_printf_precision" in
m4/fprintf-posix.m4:                                                                      case "$gl_cv_func_printf_enomem" in
m4/fprintf-posix.m4:                                                                          gl_cv_func_fprintf_posix=yes
m4/fprintf-posix.m4:AC_DEFUN([gl_REPLACE_FPRINTF],
m4/fprintf-posix.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fprintf-posix.m4:  gl_PREREQ_FPRINTF
m4/fprintf-posix.m4:AC_DEFUN([gl_PREREQ_FPRINTF], [:])
m4/fpurge.m4:AC_DEFUN([gl_FUNC_FPURGE],
m4/fpurge.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fpurge.m4:  gl_CHECK_FUNCS_ANDROID([__fpurge], [[#include <stdio_ext.h>]])
m4/fpurge.m4:    AC_CACHE_CHECK([whether fpurge works], [gl_cv_func_fpurge_works],
m4/fpurge.m4:         [gl_cv_func_fpurge_works=yes],
m4/fpurge.m4:         [gl_cv_func_fpurge_works=no],
m4/fpurge.m4:            *-musl* | midipix*) gl_cv_func_fpurge_works="guessing yes" ;;
m4/fpurge.m4:            *)                  gl_cv_func_fpurge_works="$gl_cross_guess_normal" ;;
m4/fpurge.m4:    case "$gl_cv_func_fpurge_works" in
m4/freadable.m4:AC_DEFUN([gl_FUNC_FREADABLE],
m4/freadable.m4:  gl_CHECK_FUNCS_ANDROID([__freadable], [[#include <stdio_ext.h>]])
m4/freadahead.m4:AC_DEFUN([gl_FUNC_FREADAHEAD],
m4/freadahead.m4:  gl_CHECK_FUNCS_ANDROID([__freadahead], [[#include <stdio_ext.h>]])
m4/freading.m4:AC_DEFUN([gl_FUNC_FREADING],
m4/freading.m4:  gl_CHECK_FUNCS_ANDROID([__freading],
m4/freadptr.m4:AC_DEFUN([gl_FUNC_FREADPTR],
m4/freadseek.m4:AC_DEFUN([gl_FUNC_FREADSEEK],
m4/free.m4:AC_DEFUN([gl_FUNC_FREE],
m4/free.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/free.m4:    [gl_cv_func_free_preserves_errno],
m4/free.m4:       [gl_cv_func_free_preserves_errno=yes],
m4/free.m4:       [gl_cv_func_free_preserves_errno=no])
m4/free.m4:  case $gl_cv_func_free_preserves_errno in
m4/free.m4:AC_DEFUN([gl_PREREQ_FREE], [:])
m4/freopen.m4:AC_DEFUN([gl_FUNC_FREOPEN],
m4/freopen.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/freopen.m4:        [gl_cv_func_freopen_works_on_closed],
m4/freopen.m4:           [gl_cv_func_freopen_works_on_closed=yes],
m4/freopen.m4:           [gl_cv_func_freopen_works_on_closed=no],
m4/freopen.m4:              *gnu*) gl_cv_func_freopen_works_on_closed="guessing no" ;;
m4/freopen.m4:              *)     gl_cv_func_freopen_works_on_closed="guessing yes";;
m4/freopen.m4:      case $gl_cv_func_freopen_works_on_closed in
m4/freopen.m4:AC_DEFUN([gl_PREREQ_FREOPEN], [:])
m4/frexp.m4:AC_DEFUN([gl_FUNC_FREXP],
m4/frexp.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/frexp.m4:  AC_REQUIRE([gl_CHECK_FREXP_NO_LIBM])
m4/frexp.m4:  if test $gl_cv_func_frexp_no_libm = no; then
m4/frexp.m4:      [gl_cv_func_frexp_in_libm],
m4/frexp.m4:          [gl_cv_func_frexp_in_libm=yes],
m4/frexp.m4:          [gl_cv_func_frexp_in_libm=no])
m4/frexp.m4:    if test $gl_cv_func_frexp_in_libm = yes; then
m4/frexp.m4:  if test $gl_cv_func_frexp_no_libm = yes \
m4/frexp.m4:     || test $gl_cv_func_frexp_in_libm = yes; then
m4/frexp.m4:    gl_FUNC_FREXP_WORKS
m4/frexp.m4:    case "$gl_cv_func_frexp_works" in
m4/frexp.m4:      *yes) gl_func_frexp=yes ;;
m4/frexp.m4:      *)    gl_func_frexp=no; REPLACE_FREXP=1; FREXP_LIBM= ;;
m4/frexp.m4:    gl_func_frexp=no
m4/frexp.m4:  if test $gl_func_frexp = yes; then
m4/frexp.m4:AC_DEFUN([gl_FUNC_FREXP_NO_LIBM],
m4/frexp.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/frexp.m4:  AC_REQUIRE([gl_CHECK_FREXP_NO_LIBM])
m4/frexp.m4:  if test $gl_cv_func_frexp_no_libm = yes; then
m4/frexp.m4:    gl_FUNC_FREXP_WORKS
m4/frexp.m4:    case "$gl_cv_func_frexp_works" in
m4/frexp.m4:      *yes) gl_func_frexp_no_libm=yes ;;
m4/frexp.m4:      *)    gl_func_frexp_no_libm=no; REPLACE_FREXP=1 ;;
m4/frexp.m4:    gl_func_frexp_no_libm=no
m4/frexp.m4:  if test $gl_func_frexp_no_libm = yes; then
m4/frexp.m4:dnl Set gl_cv_func_frexp_no_libm to 'yes' or 'no' accordingly.
m4/frexp.m4:AC_DEFUN([gl_CHECK_FREXP_NO_LIBM],
m4/frexp.m4:    [gl_cv_func_frexp_no_libm],
m4/frexp.m4:        [gl_cv_func_frexp_no_libm=yes],
m4/frexp.m4:        [gl_cv_func_frexp_no_libm=no])
m4/frexp.m4:AC_DEFUN([gl_FUNC_FREXP_WORKS],
m4/frexp.m4:  AC_CACHE_CHECK([whether frexp works], [gl_cv_func_frexp_works],
m4/frexp.m4:        [gl_cv_func_frexp_works=yes],
m4/frexp.m4:        [gl_cv_func_frexp_works=no],
m4/frexp.m4:           netbsd* | irix*) gl_cv_func_frexp_works="guessing no" ;;
m4/frexp.m4:             gl_cv_func_frexp_works="guessing yes"
m4/frexp.m4:               [gl_cv_func_frexp_works="guessing yes"],
m4/frexp.m4:               [gl_cv_func_frexp_works="guessing no"])
m4/frexp.m4:           *) gl_cv_func_frexp_works="guessing yes" ;;
m4/frexpf.m4:AC_DEFUN([gl_FUNC_FREXPF],
m4/frexpf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/frexpf.m4:  AC_REQUIRE([gl_FUNC_FREXP])
m4/frexpf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/frexpf.m4:  gl_MATHFUNC([frexpf], [float], [(float, int *)])
m4/frexpf.m4:  if test $gl_cv_func_frexpf_no_libm = yes \
m4/frexpf.m4:     || test $gl_cv_func_frexpf_in_libm = yes; then
m4/frexpf.m4:    gl_FUNC_FREXPF_WORKS
m4/frexpf.m4:    case "$gl_cv_func_frexpf_works" in
m4/frexpf.m4:AC_DEFUN([gl_FUNC_FREXPF_WORKS],
m4/frexpf.m4:  AC_CACHE_CHECK([whether frexpf works], [gl_cv_func_frexpf_works],
m4/frexpf.m4:        [gl_cv_func_frexpf_works=yes],
m4/frexpf.m4:        [gl_cv_func_frexpf_works=no],
m4/frexpf.m4:           irix*) gl_cv_func_frexpf_works="guessing no" ;;
m4/frexpf.m4:             gl_cv_func_frexpf_works="guessing yes"
m4/frexpf.m4:               [gl_cv_func_frexpf_works="guessing yes"],
m4/frexpf.m4:               [gl_cv_func_frexpf_works="guessing no"])
m4/frexpf.m4:           *) gl_cv_func_frexpf_works="guessing yes" ;;
m4/frexpl.m4:AC_DEFUN([gl_FUNC_FREXPL],
m4/frexpl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/frexpl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/frexpl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/frexpl.m4:    gl_CHECK_FREXPL_NO_LIBM
m4/frexpl.m4:    if test $gl_cv_func_frexpl_no_libm = no; then
m4/frexpl.m4:        [gl_cv_func_frexpl_in_libm],
m4/frexpl.m4:            [gl_cv_func_frexpl_in_libm=yes],
m4/frexpl.m4:            [gl_cv_func_frexpl_in_libm=no])
m4/frexpl.m4:      if test $gl_cv_func_frexpl_in_libm = yes; then
m4/frexpl.m4:    if test $gl_cv_func_frexpl_no_libm = yes \
m4/frexpl.m4:       || test $gl_cv_func_frexpl_in_libm = yes; then
m4/frexpl.m4:      gl_FUNC_FREXPL_WORKS
m4/frexpl.m4:      case "$gl_cv_func_frexpl_works" in
m4/frexpl.m4:        *yes) gl_func_frexpl=yes ;;
m4/frexpl.m4:        *)    gl_func_frexpl=no; REPLACE_FREXPL=1 ;;
m4/frexpl.m4:      gl_func_frexpl=no
m4/frexpl.m4:    if test $gl_func_frexpl = yes; then
m4/frexpl.m4:  if test $HAVE_DECL_FREXPL = 0 || test $gl_func_frexpl = no; then
m4/frexpl.m4:      AC_REQUIRE([gl_FUNC_FREXP])
m4/frexpl.m4:AC_DEFUN([gl_FUNC_FREXPL_NO_LIBM],
m4/frexpl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/frexpl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/frexpl.m4:    gl_CHECK_FREXPL_NO_LIBM
m4/frexpl.m4:    if test $gl_cv_func_frexpl_no_libm = yes; then
m4/frexpl.m4:      gl_FUNC_FREXPL_WORKS
m4/frexpl.m4:      case "$gl_cv_func_frexpl_works" in
m4/frexpl.m4:        *yes) gl_func_frexpl_no_libm=yes ;;
m4/frexpl.m4:        *)    gl_func_frexpl_no_libm=no; REPLACE_FREXPL=1 ;;
m4/frexpl.m4:      gl_func_frexpl_no_libm=no
m4/frexpl.m4:    if test $gl_func_frexpl_no_libm = yes; then
m4/frexpl.m4:dnl Set gl_cv_func_frexpl_no_libm to 'yes' or 'no' accordingly.
m4/frexpl.m4:AC_DEFUN([gl_CHECK_FREXPL_NO_LIBM],
m4/frexpl.m4:    [gl_cv_func_frexpl_no_libm],
m4/frexpl.m4:        [gl_cv_func_frexpl_no_libm=yes],
m4/frexpl.m4:        [gl_cv_func_frexpl_no_libm=no])
m4/frexpl.m4:AC_DEFUN([gl_FUNC_FREXPL_WORKS],
m4/frexpl.m4:  AC_CACHE_CHECK([whether frexpl works], [gl_cv_func_frexpl_works],
m4/frexpl.m4:        [gl_cv_func_frexpl_works=yes],
m4/frexpl.m4:        [gl_cv_func_frexpl_works=no],
m4/frexpl.m4:              gl_cv_func_frexpl_works="guessing no";;
m4/frexpl.m4:           *) gl_cv_func_frexpl_works="guessing yes";;
m4/fseek.m4:AC_DEFUN([gl_FUNC_FSEEK],
m4/fseek.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fseek.m4:  AC_REQUIRE([gl_FUNC_FSEEKO])
m4/fseeko.m4:AC_DEFUN([gl_FUNC_FSEEKO],
m4/fseeko.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/fseeko.m4:  AC_REQUIRE([gl_STDIN_LARGE_OFFSET])
m4/fseeko.m4:  AC_REQUIRE([gl_SYS_TYPES_H])
m4/fseeko.m4:  AC_CACHE_CHECK([for fseeko], [gl_cv_func_fseeko],
m4/fseeko.m4:        [gl_cv_func_fseeko=yes], [gl_cv_func_fseeko=no])
m4/fseeko.m4:  if test $gl_cv_func_fseeko = no; then
m4/fseeko.m4:    if test $gl_cv_var_stdin_large_offset = no; then
m4/fseeko.m4:    m4_ifdef([gl_FUNC_FFLUSH_STDIN], [
m4/fseeko.m4:      gl_FUNC_FFLUSH_STDIN
m4/fseeko.m4:      case "$gl_cv_func_fflush_stdin" in
m4/fseeko.m4:AC_DEFUN([gl_STDIN_LARGE_OFFSET],
m4/fseeko.m4:      [gl_cv_var_stdin_large_offset],
m4/fseeko.m4:        [gl_cv_var_stdin_large_offset=yes],
m4/fseeko.m4:        [gl_cv_var_stdin_large_offset=no])])
m4/fseeko.m4:AC_DEFUN([gl_PREREQ_FSEEKO],
m4/fseterr.m4:AC_DEFUN([gl_FUNC_FSETERR],
m4/fseterr.m4:  gl_CHECK_FUNCS_ANDROID([__fseterr],
m4/fstat.m4:AC_DEFUN([gl_FUNC_FSTAT],
m4/fstat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/fstat.m4:  m4_ifdef([gl_FUNC_FCHDIR], [
m4/fstat.m4:    gl_TEST_FCHDIR
m4/fstat.m4:      case "$gl_cv_func_open_directory_works" in
m4/fstat.m4:AC_DEFUN([gl_PREREQ_FSTAT], [
m4/fstat.m4:  AC_REQUIRE([gl_SYS_STAT_H])
m4/fstat.m4:  AC_REQUIRE([gl_PREREQ_STAT_W32])
m4/fstatat.m4:AC_DEFUN([gl_FUNC_FSTATAT],
m4/fstatat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/fstatat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/fstatat.m4:  AC_REQUIRE([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
m4/fstatat.m4:      [gl_cv_func_fstatat_zero_flag],
m4/fstatat.m4:         [gl_cv_func_fstatat_zero_flag=yes],
m4/fstatat.m4:         [gl_cv_func_fstatat_zero_flag=no],
m4/fstatat.m4:            aix*) gl_cv_func_fstatat_zero_flag="guessing no";;
m4/fstatat.m4:            *)    gl_cv_func_fstatat_zero_flag="guessing yes";;
m4/fstatat.m4:    case $gl_cv_func_fstatat_zero_flag+$gl_cv_func_lstat_dereferences_slashed_symlink in
m4/fstatat.m4:    case $REPLACE_FSTATAT,$gl_cv_func_fstatat_zero_flag in
m4/fstypename.m4:AC_DEFUN([gl_FSTYPENAME],
m4/fsusage.m4:AC_DEFUN([gl_FSUSAGE],
m4/fsusage.m4:  gl_FILE_SYSTEM_USAGE([gl_cv_fs_space=yes], [gl_cv_fs_space=no])
m4/fsusage.m4:# gl_FILE_SYSTEM_USAGE([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
m4/fsusage.m4:AC_DEFUN([gl_FILE_SYSTEM_USAGE],
m4/fsusage.m4:AC_DEFUN([gl_STATFS_TRUNCATES],
m4/fsusage.m4:# Prerequisites of lib/fsusage.c not done by gl_FILE_SYSTEM_USAGE.
m4/fsusage.m4:AC_DEFUN([gl_PREREQ_FSUSAGE_EXTRA],
m4/fsusage.m4:  gl_STATFS_TRUNCATES
m4/fsync.m4:AC_DEFUN([gl_FUNC_FSYNC],
m4/fsync.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/fsync.m4:AC_DEFUN([gl_PREREQ_FSYNC], [:])
m4/ftell.m4:AC_DEFUN([gl_FUNC_FTELL],
m4/ftell.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/ftell.m4:  AC_REQUIRE([gl_FUNC_FTELLO])
m4/ftello.m4:AC_DEFUN([gl_FUNC_FTELLO],
m4/ftello.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/ftello.m4:  AC_REQUIRE([gl_STDIN_LARGE_OFFSET])
m4/ftello.m4:  AC_REQUIRE([gl_SYS_TYPES_H])
m4/ftello.m4:  AC_CACHE_CHECK([for ftello], [gl_cv_func_ftello],
m4/ftello.m4:        [gl_cv_func_ftello=yes],
m4/ftello.m4:        [gl_cv_func_ftello=no])
m4/ftello.m4:  if test $gl_cv_func_ftello = no; then
m4/ftello.m4:    if test $gl_cv_var_stdin_large_offset = no; then
m4/ftello.m4:        [gl_cv_func_ftello_works],
m4/ftello.m4:            solaris*)          gl_cv_func_ftello_works="guessing no" ;;
m4/ftello.m4:            mingw* | windows*) gl_cv_func_ftello_works="guessing yes" ;;
m4/ftello.m4:            *)                 gl_cv_func_ftello_works="guessing yes" ;;
m4/ftello.m4:            [gl_cv_func_ftello_works=yes],
m4/ftello.m4:            [gl_cv_func_ftello_works=no], [:])
m4/ftello.m4:      case "$gl_cv_func_ftello_works" in
m4/ftello.m4:      gl_FUNC_UNGETC_WORKS
m4/ftello.m4:      if test $gl_ftello_broken_after_ungetc = yes; then
m4/ftello.m4:AC_DEFUN([gl_PREREQ_FTELLO],
m4/ftruncate.m4:AC_DEFUN([gl_FUNC_FTRUNCATE],
m4/ftruncate.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/ftruncate.m4:  gl_CHECK_FUNCS_ANDROID([ftruncate], [[#include <unistd.h>]])
m4/ftruncate.m4:    m4_ifdef([gl_LARGEFILE], [
m4/ftruncate.m4:    case "$gl_cv_onwards_func_ftruncate" in
m4/ftruncate.m4:AC_DEFUN([gl_PREREQ_FTRUNCATE],
m4/fts.m4:AC_DEFUN([gl_FUNC_FTS],
m4/fts.m4:  gl_FUNC_FTS_CORE
m4/fts.m4:AC_DEFUN([gl_FUNC_FTS_CORE],
m4/fts.m4:  gl_FUNC_OPENAT
m4/fts.m4:  gl_CHECK_FUNCS_ANDROID([fts_open], [[#include <fts.h>]])
m4/fts.m4:  if case "$gl_cv_onwards_func_fts_open" in \
m4/func.m4:AC_DEFUN([gl_FUNC],
m4/func.m4:  AC_CACHE_CHECK([whether __func__ is available], [gl_cv_var_func],
m4/func.m4:       [gl_cv_var_func=yes],
m4/func.m4:       [gl_cv_var_func=no]))
m4/func.m4:  if test "$gl_cv_var_func" != yes; then
m4/futimens.m4:AC_DEFUN([gl_FUNC_FUTIMENS],
m4/futimens.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/futimens.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/futimens.m4:  gl_CHECK_FUNCS_ANDROID([futimens], [[#include <sys/stat.h>]])
m4/futimens.m4:    case "$gl_cv_onwards_func_futimens" in
m4/futimens.m4:      [gl_cv_func_futimens_works],
m4/futimens.m4:         [gl_cv_func_futimens_works=yes],
m4/futimens.m4:         [gl_cv_func_futimens_works=no],
m4/futimens.m4:            *-gnu* | gnu*) gl_cv_func_futimens_works="guessing no" ;;
m4/futimens.m4:            *-musl*)       gl_cv_func_futimens_works="guessing no" ;;
m4/futimens.m4:            *)             gl_cv_func_futimens_works="guessing yes" ;;
m4/futimens.m4:    case "$gl_cv_func_futimens_works" in
m4/fwritable.m4:AC_DEFUN([gl_FUNC_FWRITABLE],
m4/fwritable.m4:  gl_CHECK_FUNCS_ANDROID([__fwritable], [[#include <stdio_ext.h>]])
m4/fwriting.m4:AC_DEFUN([gl_FUNC_FWRITING],
m4/fwriting.m4:  gl_CHECK_FUNCS_ANDROID([__fwriting],
m4/gc-arcfour.m4:AC_DEFUN([gl_GC_ARCFOUR],
m4/gc-arcfour.m4:  AC_REQUIRE([gl_GC])
m4/gc-arctwo.m4:AC_DEFUN([gl_GC_ARCTWO],
m4/gc-arctwo.m4:  AC_REQUIRE([gl_GC])
m4/gc-arctwo.m4:    gl_ARCTWO
m4/gc-camellia.m4:AC_DEFUN([gl_GC_CAMELLIA],
m4/gc-camellia.m4:  AC_REQUIRE([gl_GC])
m4/gc-camellia.m4:    AC_CACHE_CHECK([for camellia in libgcrypt], [gl_cv_libgcrypt_camellia], [
m4/gc-camellia.m4:        [gl_cv_libgcrypt_camellia=yes],
m4/gc-camellia.m4:        [gl_cv_libgcrypt_camellia=no])])
m4/gc-camellia.m4:    if test "$gl_cv_libgcrypt_camellia" = yes; then
m4/gc-des.m4:AC_DEFUN([gl_GC_DES],
m4/gc-des.m4:  AC_REQUIRE([gl_GC])
m4/gc-hmac-md5.m4:AC_DEFUN([gl_GC_HMAC_MD5],
m4/gc-hmac-md5.m4:  AC_REQUIRE([gl_GC])
m4/gc-hmac-md5.m4:    gl_MD5
m4/gc-hmac-md5.m4:    gl_MEMXOR
m4/gc-hmac-sha1.m4:AC_DEFUN([gl_GC_HMAC_SHA1],
m4/gc-hmac-sha1.m4:  AC_REQUIRE([gl_GC])
m4/gc-hmac-sha1.m4:    gl_SHA1
m4/gc-hmac-sha1.m4:    gl_MEMXOR
m4/gc-hmac-sha256.m4:AC_DEFUN([gl_GC_HMAC_SHA256],
m4/gc-hmac-sha256.m4:  AC_REQUIRE([gl_GC])
m4/gc-hmac-sha256.m4:    gl_SHA256
m4/gc-hmac-sha256.m4:    gl_MEMXOR
m4/gc-hmac-sha512.m4:AC_DEFUN([gl_GC_HMAC_SHA512],
m4/gc-hmac-sha512.m4:  AC_REQUIRE([gl_GC])
m4/gc-hmac-sha512.m4:    gl_SHA512
m4/gc-hmac-sha512.m4:    gl_MEMXOR
m4/gc-md2.m4:AC_DEFUN([gl_GC_MD2],
m4/gc-md4.m4:AC_DEFUN([gl_GC_MD4],
m4/gc-md4.m4:  AC_REQUIRE([gl_GC])
m4/gc-md4.m4:    gl_MD4
m4/gc-md5.m4:AC_DEFUN([gl_GC_MD5],
m4/gc-md5.m4:  AC_REQUIRE([gl_GC])
m4/gc-md5.m4:    gl_MD5
m4/gc-rijndael.m4:AC_DEFUN([gl_GC_RIJNDAEL],
m4/gc-rijndael.m4:  AC_REQUIRE([gl_GC])
m4/gc-sha1.m4:AC_DEFUN([gl_GC_SHA1],
m4/gc-sha1.m4:  AC_REQUIRE([gl_GC])
m4/gc-sha256.m4:AC_DEFUN([gl_GC_SHA256],
m4/gc-sha256.m4:  AC_REQUIRE([gl_GC])
m4/gc-sha512.m4:AC_DEFUN([gl_GC_SHA512],
m4/gc-sha512.m4:  AC_REQUIRE([gl_GC])
m4/gc-sm3.m4:AC_DEFUN([gl_GC_SM3],
m4/gc-sm3.m4:  AC_REQUIRE([gl_GC])
m4/gc-sm3.m4:    [gl_cv_libgcrypt_md_sm3],
m4/gc-sm3.m4:       [gl_cv_libgcrypt_md_sm3=yes],
m4/gc-sm3.m4:       [gl_cv_libgcrypt_md_sm3=no])
m4/gc-sm3.m4:  if test $gl_cv_libgcrypt_md_sm3 = yes; then
m4/gc.m4:AC_DEFUN([gl_GC],
m4/gc.m4:    gl_good_gcrypt=no
m4/gc.m4:    AM_PATH_LIBGCRYPT([1.4.4], [gl_good_gcrypt=yes],
m4/gc.m4:    if test "x$gl_good_gcrypt" != xno; then
m4/getaddrinfo.m4:AC_DEFUN([gl_GETADDRINFO],
m4/getaddrinfo.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])dnl for HAVE_SYS_SOCKET_H, HAVE_WINSOCK2_H
m4/getaddrinfo.m4:  AC_REQUIRE([gl_NETDB_H])dnl for HAVE_NETDB_H
m4/getaddrinfo.m4:  AC_CACHE_CHECK([for getaddrinfo], [gl_cv_func_getaddrinfo], [
m4/getaddrinfo.m4:      [gl_cv_func_getaddrinfo=yes],
m4/getaddrinfo.m4:      [gl_cv_func_getaddrinfo=no])])
m4/getaddrinfo.m4:  if test $gl_cv_func_getaddrinfo = no; then
m4/getaddrinfo.m4:                   gl_cv_w32_getaddrinfo, [
m4/getaddrinfo.m4:      gl_cv_w32_getaddrinfo=no
m4/getaddrinfo.m4:      gl_saved_LIBS="$LIBS"
m4/getaddrinfo.m4:]], [[getaddrinfo(NULL, NULL, NULL, NULL);]])], [gl_cv_w32_getaddrinfo=yes])
m4/getaddrinfo.m4:      LIBS="$gl_saved_LIBS"
m4/getaddrinfo.m4:    if test "$gl_cv_w32_getaddrinfo" = "yes"; then
m4/getaddrinfo.m4:        [gl_cv_func_getaddrinfo_posix_signature],
m4/getaddrinfo.m4:           [gl_cv_func_getaddrinfo_posix_signature=yes],
m4/getaddrinfo.m4:           [gl_cv_func_getaddrinfo_posix_signature=no])
m4/getaddrinfo.m4:      if test $gl_cv_func_getaddrinfo_posix_signature = no; then
m4/getaddrinfo.m4:     [gl_cv_func_gai_strerror_posix_signature], [
m4/getaddrinfo.m4:        [gl_cv_func_gai_strerror_posix_signature=yes],
m4/getaddrinfo.m4:        [gl_cv_func_gai_strerror_posix_signature=no])])
m4/getaddrinfo.m4:    if test $gl_cv_func_gai_strerror_posix_signature = no; then
m4/getaddrinfo.m4:  gl_PREREQ_GETADDRINFO
m4/getaddrinfo.m4:AC_DEFUN([gl_PREREQ_GETADDRINFO], [
m4/getaddrinfo.m4:  AC_REQUIRE([gl_NETDB_H_DEFAULTS])
m4/getaddrinfo.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])dnl for HAVE_SYS_SOCKET_H, HAVE_WINSOCK2_H
m4/getaddrinfo.m4:  AC_REQUIRE([gl_HOSTENT]) dnl for HOSTENT_LIB
m4/getaddrinfo.m4:  AC_REQUIRE([gl_SERVENT]) dnl for SERVENT_LIB
m4/getaddrinfo.m4:  AC_REQUIRE([gl_FUNC_INET_NTOP]) dnl for INET_NTOP_LIB
m4/getaddrinfo.m4:  AC_REQUIRE([gl_SOCKET_FAMILIES])
m4/getaddrinfo.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])
m4/getcwd-abort-bug.m4:# gl_FUNC_GETCWD_ABORT_BUG([ACTION-IF-BUGGY[, ACTION-IF-WORKS]])
m4/getcwd-abort-bug.m4:AC_DEFUN([gl_FUNC_GETCWD_ABORT_BUG],
m4/getcwd-abort-bug.m4:  AC_REQUIRE([gl_PATHMAX_SNIPPET_PREREQ])
m4/getcwd-abort-bug.m4:    [gl_cv_func_getcwd_succeeds_beyond_4k],
m4/getcwd-abort-bug.m4:]gl_PATHMAX_SNIPPET[
m4/getcwd-abort-bug.m4:       [gl_cv_func_getcwd_succeeds_beyond_4k=yes],
m4/getcwd-abort-bug.m4:          gl_cv_func_getcwd_succeeds_beyond_4k=no
m4/getcwd-abort-bug.m4:          gl_cv_func_getcwd_succeeds_beyond_4k=yes
m4/getcwd-abort-bug.m4:          *) gl_cv_func_getcwd_succeeds_beyond_4k="guessing no"
m4/getcwd-abort-bug.m4:  case "$gl_cv_func_getcwd_succeeds_beyond_4k" in
m4/getcwd-path-max.m4:AC_DEFUN([gl_FUNC_GETCWD_PATH_MAX],
m4/getcwd-path-max.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getcwd-path-max.m4:  AC_REQUIRE([gl_PATHMAX_SNIPPET_PREREQ])
m4/getcwd-path-max.m4:    [gl_cv_func_getcwd_path_max],
m4/getcwd-path-max.m4:]gl_PATHMAX_SNIPPET[
m4/getcwd-path-max.m4:       [gl_cv_func_getcwd_path_max=yes],
m4/getcwd-path-max.m4:        10|11|12) gl_cv_func_getcwd_path_max='no, but it is partly working';;
m4/getcwd-path-max.m4:        31) gl_cv_func_getcwd_path_max='no, it has the AIX bug';;
m4/getcwd-path-max.m4:        32) gl_cv_func_getcwd_path_max='yes, but with shorter paths';;
m4/getcwd-path-max.m4:        *) gl_cv_func_getcwd_path_max=no;;
m4/getcwd-path-max.m4:            gl_cv_func_getcwd_path_max='guessing no, it has the AIX bug' ;;
m4/getcwd-path-max.m4:            gl_cv_func_getcwd_path_max='guessing yes' ;;
m4/getcwd-path-max.m4:            gl_cv_func_getcwd_path_max='guessing no, but it is partly working' ;;
m4/getcwd-path-max.m4:            gl_cv_func_getcwd_path_max="$gl_cross_guess_normal" ;;
m4/getcwd.m4:AC_DEFUN([gl_FUNC_GETCWD_NULL],
m4/getcwd.m4:     [gl_cv_func_getcwd_null],
m4/getcwd.m4:        [gl_cv_func_getcwd_null=yes],
m4/getcwd.m4:        [gl_cv_func_getcwd_null=no],
m4/getcwd.m4:            *-gnu* | gnu*) gl_cv_func_getcwd_null="guessing yes";;
m4/getcwd.m4:            *-musl*)       gl_cv_func_getcwd_null="guessing yes";;
m4/getcwd.m4:            midipix*)      gl_cv_func_getcwd_null="guessing yes";;
m4/getcwd.m4:            cygwin*)       gl_cv_func_getcwd_null="guessing yes";;
m4/getcwd.m4:            *)             gl_cv_func_getcwd_null="$gl_cross_guess_normal";;
m4/getcwd.m4:AC_DEFUN([gl_FUNC_GETCWD_SIGNATURE],
m4/getcwd.m4:    [gl_cv_func_getcwd_posix_signature],
m4/getcwd.m4:      [gl_cv_func_getcwd_posix_signature=yes],
m4/getcwd.m4:      [gl_cv_func_getcwd_posix_signature=no])
m4/getcwd.m4:AC_DEFUN([gl_FUNC_GETCWD_LGPL],
m4/getcwd.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getcwd.m4:  AC_REQUIRE([gl_FUNC_GETCWD_NULL])
m4/getcwd.m4:  AC_REQUIRE([gl_FUNC_GETCWD_SIGNATURE])
m4/getcwd.m4:  case $gl_cv_func_getcwd_null,$gl_cv_func_getcwd_posix_signature in
m4/getcwd.m4:AC_DEFUN([gl_FUNC_GETCWD],
m4/getcwd.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getcwd.m4:  AC_REQUIRE([gl_FUNC_GETCWD_NULL])
m4/getcwd.m4:  AC_REQUIRE([gl_FUNC_GETCWD_SIGNATURE])
m4/getcwd.m4:  gl_abort_bug=no
m4/getcwd.m4:      gl_cv_func_getcwd_path_max=yes
m4/getcwd.m4:      gl_FUNC_GETCWD_PATH_MAX
m4/getcwd.m4:      case "$gl_cv_func_getcwd_null" in
m4/getcwd.m4:          gl_FUNC_GETCWD_ABORT_BUG([gl_abort_bug=yes])
m4/getcwd.m4:  case "$gl_cv_func_getcwd_path_max" in
m4/getcwd.m4:  case "$gl_cv_func_getcwd_path_max" in
m4/getcwd.m4:  if { case "$gl_cv_func_getcwd_null" in *yes) false;; *) true;; esac; } \
m4/getcwd.m4:     || test $gl_cv_func_getcwd_posix_signature != yes \
m4/getcwd.m4:     || { case "$gl_cv_func_getcwd_path_max" in *yes*) false;; *) true;; esac; } \
m4/getcwd.m4:     || test $gl_abort_bug = yes; then
m4/getcwd.m4:AC_DEFUN([gl_PREREQ_GETCWD],
m4/getcwd.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getcwd.m4:  AC_REQUIRE([gl_CHECK_TYPE_STRUCT_DIRENT_D_INO])
m4/getdelim.m4:AC_DEFUN([gl_FUNC_GETDELIM],
m4/getdelim.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/getdelim.m4:  gl_CHECK_FUNCS_ANDROID([getdelim], [[#include <stdio.h>]])
m4/getdelim.m4:      [gl_cv_func_working_getdelim],
m4/getdelim.m4:           gl_cv_func_working_getdelim=no ;;
m4/getdelim.m4:             [gl_cv_func_working_getdelim=yes],
m4/getdelim.m4:             [gl_cv_func_working_getdelim=no],
m4/getdelim.m4:                [gl_cv_func_working_getdelim="guessing yes"],
m4/getdelim.m4:                   *-musl* | midipix*) gl_cv_func_working_getdelim="guessing yes" ;;
m4/getdelim.m4:                   *)                  gl_cv_func_working_getdelim="$gl_cross_guess_normal" ;;
m4/getdelim.m4:    case "$gl_cv_func_working_getdelim" in
m4/getdelim.m4:    case "$gl_cv_onwards_func_getdelim" in
m4/getdelim.m4:AC_DEFUN([gl_PREREQ_GETDELIM],
m4/getdomainname.m4:AC_DEFUN([gl_FUNC_GETDOMAINNAME],
m4/getdomainname.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getdomainname.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])dnl for HAVE_SYS_SOCKET_H
m4/getdomainname.m4:  AC_REQUIRE([gl_NETDB_H])dnl for HAVE_NETDB_H
m4/getdomainname.m4:  gl_CHECK_FUNCS_ANDROID([getdomainname], [[#include <unistd.h>]])
m4/getdomainname.m4:      [gl_cv_func_getdomainname_in_libnsl],
m4/getdomainname.m4:      [gl_cv_func_getdomainname_in_libnsl=no
m4/getdomainname.m4:       gl_saved_LIBS="$LIBS"
m4/getdomainname.m4:         [gl_cv_func_getdomainname_in_libnsl=yes])
m4/getdomainname.m4:       LIBS="$gl_saved_LIBS"
m4/getdomainname.m4:    [gl_cv_decl_getdomainname_argtype2],
m4/getdomainname.m4:         [gl_cv_decl_getdomainname_argtype2='int'],
m4/getdomainname.m4:         [gl_cv_decl_getdomainname_argtype2='size_t'])
m4/getdomainname.m4:       gl_cv_decl_getdomainname_argtype2='int'
m4/getdomainname.m4:       && test $gl_cv_decl_getdomainname_argtype2 != size_t; \
m4/getdomainname.m4:     || case "$gl_cv_onwards_func_getdomainname" in \
m4/getdomainname.m4:     || test "$gl_cv_func_getdomainname_in_libnsl" = yes; then
m4/getdomainname.m4:AC_DEFUN([gl_PREREQ_GETDOMAINNAME], [
m4/getdtablesize.m4:AC_DEFUN([gl_FUNC_GETDTABLESIZE],
m4/getdtablesize.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getdtablesize.m4:      [gl_cv_func_getdtablesize_works],
m4/getdtablesize.m4:         vms*) gl_cv_func_getdtablesize_works="no (limitation)" ;;
m4/getdtablesize.m4:             [gl_cv_func_getdtablesize_works=yes],
m4/getdtablesize.m4:             [gl_cv_func_getdtablesize_works=no],
m4/getdtablesize.m4:                  gl_cv_func_getdtablesize_works="guessing no" ;;
m4/getdtablesize.m4:                *) gl_cv_func_getdtablesize_works="guessing yes" ;;
m4/getdtablesize.m4:    case "$gl_cv_func_getdtablesize_works" in
m4/getdtablesize.m4:AC_DEFUN([gl_PREREQ_GETDTABLESIZE], [:])
m4/getentropy.m4:AC_DEFUN([gl_FUNC_GETENTROPY],
m4/getentropy.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getentropy.m4:  gl_CHECK_FUNCS_ANDROID([getentropy],
m4/getentropy.m4:    case "$gl_cv_onwards_func_getentropy" in
m4/getgroups.m4:  gl_saved_LIBS=$LIBS
m4/getgroups.m4:            *)             ac_cv_func_getgroups_works="$gl_cross_guess_normal" ;;
m4/getgroups.m4:  LIBS=$gl_saved_LIBS
m4/getgroups.m4:AC_DEFUN([gl_FUNC_GETGROUPS],
m4/getgroups.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getgroups.m4:        [gl_cv_func_getgroups_works],
m4/getgroups.m4:          [gl_cv_func_getgroups_works=yes],
m4/getgroups.m4:          [gl_cv_func_getgroups_works=no],
m4/getgroups.m4:             *-gnu* | gnu*) gl_cv_func_getgroups_works="guessing yes" ;;
m4/getgroups.m4:             *-musl*)       gl_cv_func_getgroups_works="guessing yes" ;;
m4/getgroups.m4:             *)             gl_cv_func_getgroups_works="$gl_cross_guess_normal" ;;
m4/getgroups.m4:      case "$gl_cv_func_getgroups_works" in
m4/gethostname.m4:AC_DEFUN([gl_FUNC_GETHOSTNAME],
m4/gethostname.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/gethostname.m4:  gl_PREREQ_SYS_H_WINSOCK2
m4/gethostname.m4:      [gl_cv_w32_gethostname],
m4/gethostname.m4:      [gl_cv_w32_gethostname=no
m4/gethostname.m4:       gl_saved_LIBS="$LIBS"
m4/gethostname.m4:]], [[gethostname(NULL, 0);]])], [gl_cv_w32_gethostname=yes])
m4/gethostname.m4:       LIBS="$gl_saved_LIBS"
m4/gethostname.m4:    if test "$gl_cv_w32_gethostname" = "yes"; then
m4/gethostname.m4:  gl_PREREQ_HOST_NAME_MAX
m4/gethostname.m4:AC_DEFUN([gl_PREREQ_HOST_NAME_MAX], [
m4/gethostname.m4:  dnl gl_CHECK_NEXT_HEADERS does not work for <limits.h>. Therefore retrieve
m4/gethostname.m4:  AC_CACHE_CHECK([for HOST_NAME_MAX], [gl_cv_decl_HOST_NAME_MAX], [
m4/gethostname.m4:    gl_cv_decl_HOST_NAME_MAX=
m4/gethostname.m4:      ], [gl_cv_decl_HOST_NAME_MAX=yes])
m4/gethostname.m4:    if test -z "$gl_cv_decl_HOST_NAME_MAX"; then
m4/gethostname.m4:      if test "$gl_cv_w32_gethostname" = yes; then
m4/gethostname.m4:        gl_cv_decl_HOST_NAME_MAX=256
m4/gethostname.m4:        AC_COMPUTE_INT([gl_cv_decl_HOST_NAME_MAX], [MAXHOSTNAMELEN], [
m4/gethostname.m4:           gl_cv_decl_HOST_NAME_MAX=256
m4/gethostname.m4:  if test "$gl_cv_decl_HOST_NAME_MAX" != yes; then
m4/gethostname.m4:    AC_DEFINE_UNQUOTED([HOST_NAME_MAX], [$gl_cv_decl_HOST_NAME_MAX],
m4/gethostname.m4:AC_DEFUN([gl_PREREQ_GETHOSTNAME], [
m4/gethostname.m4:  if test "$gl_cv_w32_gethostname" != "yes"; then
m4/gethrxtime.m4:AC_DEFUN([gl_GETHRXTIME],
m4/gethrxtime.m4:  AC_REQUIRE([gl_ARITHMETIC_HRTIME_T])
m4/gethrxtime.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/gethrxtime.m4:  AC_REQUIRE([gl_XTIME])
m4/gethrxtime.m4:     || test $gl_cv_arithmetic_hrtime_t = no; then
m4/gethrxtime.m4:    AC_REQUIRE([gl_CLOCK_TIME])
m4/gethrxtime.m4:    AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/gethrxtime.m4:            || test $gl_cv_arithmetic_hrtime_t = no; }; then
m4/gethrxtime.m4:        [gl_cv_have_clock_gettime_macro],
m4/gethrxtime.m4:          [gl_cv_have_clock_gettime_macro=yes],
m4/gethrxtime.m4:          [gl_cv_have_clock_gettime_macro=no])])
m4/gethrxtime.m4:      if test $gl_cv_have_clock_gettime_macro = yes; then
m4/gethrxtime.m4:AC_DEFUN([gl_ARITHMETIC_HRTIME_T],
m4/gethrxtime.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/gethrxtime.m4:  AC_CACHE_CHECK([for arithmetic hrtime_t], [gl_cv_arithmetic_hrtime_t],
m4/gethrxtime.m4:       [gl_cv_arithmetic_hrtime_t=yes],
m4/gethrxtime.m4:       [gl_cv_arithmetic_hrtime_t=no])])
m4/gethrxtime.m4:  if test $gl_cv_arithmetic_hrtime_t = yes; then
m4/gethrxtime.m4:AC_DEFUN([gl_XTIME],
m4/getline.m4:AC_DEFUN([gl_FUNC_GETLINE],
m4/getline.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/getline.m4:  gl_CHECK_FUNCS_ANDROID([getline], [[#include <stdio.h>]])
m4/getline.m4:               *)                  am_cv_func_working_getline="$gl_cross_guess_normal" ;;
m4/getline.m4:    case "$gl_cv_onwards_func_getline" in
m4/getline.m4:AC_DEFUN([gl_PREREQ_GETLINE],
m4/getloadavg.m4:# New applications should use gl_GETLOADAVG instead.
m4/getloadavg.m4:# gl_GETLOADAVG
m4/getloadavg.m4:AC_DEFUN([gl_GETLOADAVG],
m4/getloadavg.m4:[AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/getloadavg.m4:gl_saved_LIBS=$LIBS
m4/getloadavg.m4:gl_CHECK_FUNCS_ANDROID([getloadavg], [[#include <stdlib.h>]])
m4/getloadavg.m4:   case "$gl_cv_onwards_func_getloadavg" in
m4/getloadavg.m4:   gl_func_getloadavg_done=no
m4/getloadavg.m4:   if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:       [LIBS="-lutil $LIBS" gl_func_getloadavg_done=yes])
m4/getloadavg.m4:   if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:     gl_getloadavg_LIBS=$LIBS
m4/getloadavg.m4:                  [LIBS="-lgetloadavg $LIBS" gl_func_getloadavg_done=yes],
m4/getloadavg.m4:                  [LIBS=$gl_getloadavg_LIBS])
m4/getloadavg.m4:   if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:     test $ac_cv_lib_kstat_kstat_open = yes && gl_func_getloadavg_done=yes
m4/getloadavg.m4:     if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:       test $ac_cv_lib_perfstat_perfstat_cpu_total = yes && gl_func_getloadavg_done=yes
m4/getloadavg.m4:     if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:         [gl_func_getloadavg_done=yes
m4/getloadavg.m4:if test "x$gl_saved_LIBS" = x; then
m4/getloadavg.m4:  GETLOADAVG_LIBS=`echo "$LIBS" | sed "s!$gl_saved_LIBS!!"`
m4/getloadavg.m4:LIBS=$gl_saved_LIBS
m4/getloadavg.m4:])# gl_GETLOADAVG
m4/getloadavg.m4:# gl_PREREQ_GETLOADAVG
m4/getloadavg.m4:AC_DEFUN([gl_PREREQ_GETLOADAVG],
m4/getloadavg.m4:if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:  AC_CHECK_FUNCS([pstat_getdynamic], [gl_func_getloadavg_done=yes])
m4/getloadavg.m4:if test $gl_func_getloadavg_done = no && test "$ac_cv_lib_elf_elf_begin" = yes \
m4/getloadavg.m4:  gl_func_getloadavg_done=yes
m4/getloadavg.m4:if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:  [gl_func_getloadavg_done=yes
m4/getloadavg.m4:if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:  [gl_func_getloadavg_done=yes; AC_DEFINE([UMAX])])
m4/getloadavg.m4:if test $gl_func_getloadavg_done = no; then
m4/getloadavg.m4:])# gl_PREREQ_GETLOADAVG
m4/getlogin.m4:AC_DEFUN([gl_FUNC_GETLOGIN],
m4/getlogin.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getlogin.m4:AC_DEFUN([gl_LIB_GETLOGIN],
m4/getlogin_r.m4:AC_DEFUN([gl_FUNC_GETLOGIN_R],
m4/getlogin_r.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getlogin_r.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getlogin_r.m4:  gl_CHECK_FUNCS_ANDROID([getlogin_r], [[#include <unistd.h>]])
m4/getlogin_r.m4:    case "$gl_cv_onwards_func_getlogin_r" in
m4/getlogin_r.m4:      [gl_cv_func_getlogin_r_works],
m4/getlogin_r.m4:          darwin* | osf*) gl_cv_func_getlogin_r_works="guessing no" ;;
m4/getlogin_r.m4:          *)              gl_cv_func_getlogin_r_works="guessing yes" ;;
m4/getlogin_r.m4:          [gl_cv_func_getlogin_r_works=yes],
m4/getlogin_r.m4:          [gl_cv_func_getlogin_r_works=no],
m4/getlogin_r.m4:    case "$gl_cv_func_getlogin_r_works" in
m4/getlogin_r.m4:AC_DEFUN([gl_PREREQ_GETLOGIN_R],
m4/getndelim2.m4:AC_DEFUN([gl_GETNDELIM2],
m4/getndelim2.m4:  gl_PREREQ_GETNDELIM2
m4/getndelim2.m4:AC_DEFUN([gl_PREREQ_GETNDELIM2],
m4/getnline.m4:AC_DEFUN([gl_GETNLINE],
m4/getopt.m4:AC_DEFUN([gl_FUNC_GETOPT_POSIX],
m4/getopt.m4:  m4_divert_text([DEFAULTS], [gl_getopt_required=POSIX])
m4/getopt.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getopt.m4:  AC_REQUIRE([gl_GETOPT_CHECK_HEADERS])
m4/getopt.m4:  dnl functions unconditionally, by defining gl_REPLACE_GETOPT_ALWAYS.
m4/getopt.m4:  m4_ifdef([gl_REPLACE_GETOPT_ALWAYS], [
m4/getopt.m4:    if test -n "$gl_replace_getopt"; then
m4/getopt.m4:    gl_GETOPT_SUBSTITUTE_HEADER
m4/getopt.m4:AC_DEFUN([gl_FUNC_GETOPT_GNU],
m4/getopt.m4:  dnl Set the variable gl_getopt_required, so that all invocations of
m4/getopt.m4:  dnl gl_GETOPT_CHECK_HEADERS in the scope of the current configure file
m4/getopt.m4:  m4_divert_text([INIT_PREPARE], [gl_getopt_required=GNU])
m4/getopt.m4:  dnl No need to invoke gl_FUNC_GETOPT_POSIX here; this is automatically
m4/getopt.m4:AC_DEFUN([gl_GETOPT_CHECK_HEADERS],
m4/getopt.m4:  gl_CHECK_NEXT_HEADERS([getopt.h])
m4/getopt.m4:  gl_replace_getopt=
m4/getopt.m4:  if test -z "$gl_replace_getopt" && test $gl_getopt_required = GNU; then
m4/getopt.m4:    AC_CHECK_HEADERS([getopt.h], [], [gl_replace_getopt=yes])
m4/getopt.m4:  if test -z "$gl_replace_getopt" && test $gl_getopt_required = GNU; then
m4/getopt.m4:    AC_CHECK_FUNCS([getopt_long_only], [], [gl_replace_getopt=yes])
m4/getopt.m4:  if test -z "$gl_replace_getopt"; then
m4/getopt.m4:      [gl_cv_func_getopt_posix],
m4/getopt.m4:            [gl_cv_func_getopt_posix=maybe],
m4/getopt.m4:            [gl_cv_func_getopt_posix=no])
m4/getopt.m4:          if test $gl_cv_func_getopt_posix = maybe; then
m4/getopt.m4:              [gl_cv_func_getopt_posix=maybe],
m4/getopt.m4:              [gl_cv_func_getopt_posix=no])
m4/getopt.m4:          if test $gl_cv_func_getopt_posix = maybe; then
m4/getopt.m4:              [gl_cv_func_getopt_posix=yes],
m4/getopt.m4:              [gl_cv_func_getopt_posix=no])
m4/getopt.m4:            darwin* | aix* | mingw* | windows*) gl_cv_func_getopt_posix="guessing no";;
m4/getopt.m4:            *)                                  gl_cv_func_getopt_posix="guessing yes";;
m4/getopt.m4:    case "$gl_cv_func_getopt_posix" in
m4/getopt.m4:      *no) gl_replace_getopt=yes ;;
m4/getopt.m4:  if test -z "$gl_replace_getopt" && test $gl_getopt_required = GNU; then
m4/getopt.m4:    AC_CACHE_CHECK([for working GNU getopt function], [gl_cv_func_getopt_gnu],
m4/getopt.m4:       gl_awk_probe='BEGIN { if ("POSIXLY_CORRECT" in ENVIRON) print "x" }'
m4/getopt.m4:       case ${POSIXLY_CORRECT+x}`$AWK "$gl_awk_probe" </dev/null` in
m4/getopt.m4:         xx) gl_had_POSIXLY_CORRECT=exported ;;
m4/getopt.m4:         x)  gl_had_POSIXLY_CORRECT=yes      ;;
m4/getopt.m4:         *)  gl_had_POSIXLY_CORRECT=         ;;
m4/getopt.m4:        [gl_cv_func_getopt_gnu=yes],
m4/getopt.m4:        [gl_cv_func_getopt_gnu=no],
m4/getopt.m4:         gl_cv_func_getopt_gnu="$gl_cross_guess_normal"
m4/getopt.m4:       case $gl_had_POSIXLY_CORRECT in
m4/getopt.m4:    if test "$gl_cv_func_getopt_gnu" != yes; then
m4/getopt.m4:      gl_replace_getopt=yes
m4/getopt.m4:        [gl_cv_func_getopt_long_gnu],
m4/getopt.m4:           [gl_cv_func_getopt_long_gnu=yes],
m4/getopt.m4:           [gl_cv_func_getopt_long_gnu=no],
m4/getopt.m4:              openbsd*) gl_cv_func_getopt_long_gnu="guessing no";;
m4/getopt.m4:              *)        gl_cv_func_getopt_long_gnu="guessing yes";;
m4/getopt.m4:      case "$gl_cv_func_getopt_long_gnu" in
m4/getopt.m4:        *) gl_replace_getopt=yes ;;
m4/getopt.m4:AC_DEFUN([gl_GETOPT_SUBSTITUTE_HEADER],
m4/getopt.m4:  gl_CHECK_HEADER_SYS_CDEFS_H
m4/getpagesize.m4:AC_DEFUN([gl_FUNC_GETPAGESIZE],
m4/getpagesize.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getpagesize.m4:  gl_CHECK_FUNC_GETPAGESIZE
m4/getpagesize.m4:  if test $gl_cv_func_getpagesize = no; then
m4/getpagesize.m4:dnl Sets gl_cv_func_getpagesize.
m4/getpagesize.m4:AC_DEFUN([gl_CHECK_FUNC_GETPAGESIZE],
m4/getpagesize.m4:  AC_CACHE_CHECK([for getpagesize], [gl_cv_func_getpagesize],
m4/getpagesize.m4:       [gl_cv_func_getpagesize=yes],
m4/getpagesize.m4:       [gl_cv_func_getpagesize=no])
m4/getpass.m4:AC_DEFUN_ONCE([gl_FUNC_GETPASS],
m4/getpass.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getpass.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getpass.m4:AC_DEFUN([gl_FUNC_GETPASS_GNU],
m4/getpass.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getpass.m4:  AC_REQUIRE([gl_FUNC_GETPASS])
m4/getpass.m4:      [gl_cv_func_getpass_good],
m4/getpass.m4:         [gl_cv_func_getpass_good=yes],
m4/getpass.m4:         [gl_cv_func_getpass_good=no])
m4/getpass.m4:    if test $gl_cv_func_getpass_good != yes; then
m4/getpass.m4:AC_DEFUN([gl_PREREQ_GETPASS], [
m4/getpass.m4:  gl_CHECK_FUNCS_ANDROID([__fsetlocking], [[#include <stdio_ext.h>]])
m4/getpass.m4:  gl_HAVE_TCGETATTR
m4/getpass.m4:  AC_CACHE_CHECK([for tcsetattr], [gl_cv_func_tcsetattr],
m4/getpass.m4:       [gl_cv_func_tcsetattr=yes],
m4/getpass.m4:       [gl_cv_func_tcsetattr=no])
m4/getpass.m4:  if test $gl_cv_func_tcsetattr = yes; then
m4/getpayload.m4:AC_DEFUN([gl_FUNC_GETPAYLOADF],
m4/getpayload.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/getpayload.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getpayload.m4:  gl_MATHFUNC([getpayloadf], [float], [(float const *)])
m4/getpayload.m4:  if test $gl_cv_func_getpayloadf_no_libm != yes \
m4/getpayload.m4:     && test $gl_cv_func_getpayloadf_in_libm != yes; then
m4/getpayload.m4:      [gl_cv_func_getpayloadf_works],
m4/getpayload.m4:       if test $gl_cv_func_getpayloadf_no_libm != yes; then
m4/getpayload.m4:         [gl_cv_func_getpayloadf_works=yes],
m4/getpayload.m4:         [gl_cv_func_getpayloadf_works=no],
m4/getpayload.m4:                [gl_cv_func_getpayloadf_works="guessing no"],
m4/getpayload.m4:                [gl_cv_func_getpayloadf_works="guessing yes"])
m4/getpayload.m4:            *) gl_cv_func_getpayloadf_works="guessing yes" ;;
m4/getpayload.m4:    case "$gl_cv_func_getpayloadf_works" in
m4/getpayload.m4:AC_DEFUN_ONCE([gl_FUNC_GETPAYLOAD],
m4/getpayload.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/getpayload.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getpayload.m4:  gl_MATHFUNC([getpayload], [double], [(double const *)])
m4/getpayload.m4:  if test $gl_cv_func_getpayload_no_libm != yes \
m4/getpayload.m4:     && test $gl_cv_func_getpayload_in_libm != yes; then
m4/getpayload.m4:      [gl_cv_func_getpayload_works],
m4/getpayload.m4:       if test $gl_cv_func_getpayload_no_libm != yes; then
m4/getpayload.m4:         [gl_cv_func_getpayload_works=yes],
m4/getpayload.m4:         [gl_cv_func_getpayload_works=no],
m4/getpayload.m4:                [gl_cv_func_getpayload_works="guessing no"],
m4/getpayload.m4:                [gl_cv_func_getpayload_works="guessing yes"])
m4/getpayload.m4:            *) gl_cv_func_getpayload_works="guessing yes" ;;
m4/getpayload.m4:    case "$gl_cv_func_getpayload_works" in
m4/getpayload.m4:AC_DEFUN([gl_FUNC_GETPAYLOADL],
m4/getpayload.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/getpayload.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getpayload.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/getpayload.m4:  gl_MATHFUNC([getpayloadl], [long double], [(long double const *)])
m4/getpayload.m4:  if test $gl_cv_func_getpayloadl_no_libm != yes \
m4/getpayload.m4:     && test $gl_cv_func_getpayloadl_in_libm != yes; then
m4/getpayload.m4:      [gl_cv_func_getpayloadl_works],
m4/getpayload.m4:       if test $gl_cv_func_getpayloadl_no_libm != yes; then
m4/getpayload.m4:         [gl_cv_func_getpayloadl_works=yes],
m4/getpayload.m4:         [gl_cv_func_getpayloadl_works=no],
m4/getpayload.m4:                [gl_cv_func_getpayloadl_works="guessing no"],
m4/getpayload.m4:                [gl_cv_func_getpayloadl_works="guessing yes"])
m4/getpayload.m4:            *) gl_cv_func_getpayloadl_works="guessing yes" ;;
m4/getpayload.m4:    case "$gl_cv_func_getpayloadl_works" in
m4/getpayload.m4:      AC_REQUIRE([gl_FUNC_GETPAYLOAD])
m4/getpayload.m4:    gl_LONG_DOUBLE_EXPONENT_LOCATION
m4/getprogname.m4:AC_DEFUN([gl_FUNC_GETPROGNAME],
m4/getprogname.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/getprogname.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getprogname.m4:  gl_CHECK_FUNCS_ANDROID([getprogname], [[#include <stdlib.h>]])
m4/getprogname.m4:    case "$gl_cv_onwards_func_getprogname" in
m4/getprogname.m4:AC_DEFUN([gl_PREREQ_GETPROGNAME],
m4/getprogname.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getprogname.m4:      [gl_cv_var___progname],
m4/getprogname.m4:        gl_cv_var___progname=
m4/getprogname.m4:          [gl_cv_var___progname=yes]
m4/getprogname.m4:    if test "$gl_cv_var___progname" = yes; then
m4/getrandom.m4:AC_DEFUN([gl_FUNC_GETRANDOM],
m4/getrandom.m4:  AC_REQUIRE([gl_SYS_RANDOM_H_DEFAULTS])
m4/getrandom.m4:  gl_CHECK_FUNCS_ANDROID([getrandom],
m4/getrandom.m4:    case "$gl_cv_onwards_func_getrandom" in
m4/getrandom.m4:      [gl_cv_func_getrandom_ok],
m4/getrandom.m4:         [gl_cv_func_getrandom_ok=yes],
m4/getrandom.m4:         [gl_cv_func_getrandom_ok=no])
m4/getrandom.m4:    if test $gl_cv_func_getrandom_ok = no; then
m4/getrandom.m4:        [gl_cv_lib_assume_bcrypt],
m4/getrandom.m4:           [gl_cv_lib_assume_bcrypt=yes],
m4/getrandom.m4:           [gl_cv_lib_assume_bcrypt=no])
m4/getrandom.m4:      if test $gl_cv_lib_assume_bcrypt = yes; then
m4/getrusage.m4:AC_DEFUN([gl_FUNC_GETRUSAGE],
m4/getrusage.m4:  AC_REQUIRE([gl_SYS_RESOURCE_H_DEFAULTS])
m4/getsubopt.m4:AC_DEFUN([gl_FUNC_GETSUBOPT],
m4/getsubopt.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/getsubopt.m4:  gl_CHECK_FUNCS_ANDROID([getsubopt],
m4/getsubopt.m4:    case "$gl_cv_onwards_func_getsubopt" in
m4/getsubopt.m4:AC_DEFUN([gl_PREREQ_GETSUBOPT], [:])
m4/gettext.m4:  gl_BUILD_TO_HOST([localedir])
m4/gettime.m4:AC_DEFUN([gl_GETTIME],
m4/gettime.m4:  AC_REQUIRE([gl_CLOCK_TIME])
m4/gettime.m4:  AC_REQUIRE([gl_TIMESPEC])
m4/gettime.m4:  AC_REQUIRE([gl_CHECK_FUNC_TIMESPEC_GET])
m4/gettime.m4:  if test $gl_cv_func_timespec_get = yes; then
m4/gettime.m4:dnl Sets gl_cv_func_timespec_get and gl_cv_onwards_func_timespec_get.
m4/gettime.m4:AC_DEFUN([gl_CHECK_FUNC_TIMESPEC_GET],
m4/gettime.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/gettime.m4:  dnl gl_CHECK_FUNCS_ANDROID does.
m4/gettime.m4:  AC_CACHE_CHECK([for timespec_get], [gl_cv_onwards_func_timespec_get],
m4/gettime.m4:         [gl_cv_onwards_func_timespec_get=yes],
m4/gettime.m4:         [gl_cv_onwards_func_timespec_get=no])
m4/gettime.m4:       gl_cv_onwards_func_timespec_get=no
m4/gettime.m4:         if test $gl_cv_onwards_func_timespec_get = no; then
m4/gettime.m4:           gl_cv_onwards_func_timespec_get='future OS version'
m4/gettime.m4:  case "$gl_cv_onwards_func_timespec_get" in
m4/gettime.m4:    future*) gl_cv_func_timespec_get=no ;;
m4/gettime.m4:    *)       gl_cv_func_timespec_get=$gl_cv_onwards_func_timespec_get ;;
m4/gettime.m4:AC_DEFUN([gl_GETTIME_RES],
m4/gettime.m4:  AC_REQUIRE([gl_CLOCK_TIME])
m4/gettime.m4:  AC_REQUIRE([gl_TIMESPEC])
m4/gettime.m4:  gl_CHECK_FUNCS_ANDROID([timespec_getres], [[#include <time.h>]])
m4/gettimeofday.m4:AC_DEFUN([gl_FUNC_GETTIMEOFDAY],
m4/gettimeofday.m4:  AC_REQUIRE([gl_SYS_TIME_H_DEFAULTS])
m4/gettimeofday.m4:  AC_REQUIRE([gl_SYS_TIME_H])
m4/gettimeofday.m4:  gl_gettimeofday_timezone=void
m4/gettimeofday.m4:      [gl_cv_func_gettimeofday_posix_signature],
m4/gettimeofday.m4:          [gl_cv_func_gettimeofday_posix_signature=yes],
m4/gettimeofday.m4:            [gl_cv_func_gettimeofday_posix_signature=almost],
m4/gettimeofday.m4:            [gl_cv_func_gettimeofday_posix_signature=no])])])
m4/gettimeofday.m4:    if test $gl_cv_func_gettimeofday_posix_signature = almost; then
m4/gettimeofday.m4:      gl_gettimeofday_timezone='struct timezone'
m4/gettimeofday.m4:    elif test $gl_cv_func_gettimeofday_posix_signature != yes; then
m4/gettimeofday.m4:  AC_DEFINE_UNQUOTED([GETTIMEOFDAY_TIMEZONE], [$gl_gettimeofday_timezone],
m4/gettimeofday.m4:AC_DEFUN([gl_PREREQ_GETTIMEOFDAY], [:])
m4/getugroups.m4:AC_DEFUN([gl_GETUGROUPS],
m4/getumask.m4:AC_DEFUN([gl_FUNC_GETUMASK],
m4/getumask.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/getumask.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/getumask.m4:AC_DEFUN([gl_PREREQ_GETUMASK],
m4/getusershell.m4:AC_DEFUN([gl_FUNC_GETUSERSHELL],
m4/getusershell.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/getusershell.m4:AC_DEFUN([gl_PREREQ_GETUSERSHELL], [:])
m4/gl-openssl.m4:AC_DEFUN([gl_SET_CRYPTO_CHECK_DEFAULT],
m4/gl-openssl.m4:  m4_define([gl_CRYPTO_CHECK_DEFAULT], [$1])
m4/gl-openssl.m4:gl_SET_CRYPTO_CHECK_DEFAULT([no])
m4/gl-openssl.m4:AC_DEFUN([gl_CRYPTO_CHECK],
m4/gl-openssl.m4:  dnl gnulib users set this before gl_INIT with gl_SET_CRYPTO_CHECK_DEFAULT()
m4/gl-openssl.m4:  m4_divert_once([DEFAULTS], [with_openssl_default='gl_CRYPTO_CHECK_DEFAULT'])
m4/gl-openssl.m4:                          Default is ']gl_CRYPTO_CHECK_DEFAULT['.]m4_ifdef([gl_AF_ALG], [
m4/gl-openssl.m4:                     [gl_cv_openssl_gpl_compat],
m4/gl-openssl.m4:           [gl_cv_openssl_gpl_compat=yes],
m4/gl-openssl.m4:           [gl_cv_openssl_gpl_compat=no])])
m4/gl-openssl.m4:       test "x$gl_cv_openssl_gpl_compat" = xyes; then
m4/glob.m4:AC_DEFUN([gl_GLOB],
m4/glob.m4:  AC_REQUIRE([gl_GLOB_H])
m4/glob.m4:  gl_CHECK_FUNCS_ANDROID([glob], [[#include <glob.h>]])
m4/glob.m4:    case "$gl_cv_onwards_func_glob" in
m4/glob.m4:      [gl_cv_gnu_glob_interface_version_1_2],
m4/glob.m4:        [gl_cv_gnu_glob_interface_version_1_2=yes],
m4/glob.m4:        [gl_cv_gnu_glob_interface_version_1_2=no])])
m4/glob.m4:    if test "$gl_cv_gnu_glob_interface_version_1_2" = "no"; then
m4/glob.m4:                     [gl_cv_glob_lists_symlinks],
m4/glob.m4:             gl_cv_glob_lists_symlinks=maybe
m4/glob.m4:             gl_cv_glob_lists_symlinks=no
m4/glob.m4:           if test $gl_cv_glob_lists_symlinks = maybe; then
m4/glob.m4:               [gl_cv_glob_lists_symlinks=yes],
m4/glob.m4:               [gl_cv_glob_lists_symlinks=no],
m4/glob.m4:           gl_cv_glob_lists_symlinks="$gl_cross_guess_normal"
m4/glob.m4:      case "$gl_cv_glob_lists_symlinks" in
m4/glob.m4:                     [gl_cv_glob_omit_nondir_symlinks],
m4/glob.m4:             gl_cv_glob_omit_nondir_symlinks=maybe
m4/glob.m4:             gl_cv_glob_omit_nondir_symlinks=no
m4/glob.m4:           if test $gl_cv_glob_omit_nondir_symlinks = maybe; then
m4/glob.m4:               [gl_cv_glob_omit_nondir_symlinks=yes],
m4/glob.m4:               [gl_cv_glob_omit_nondir_symlinks=no],
m4/glob.m4:           gl_cv_glob_omit_nondir_symlinks="$gl_cross_guess_normal"
m4/glob.m4:      case "$gl_cv_glob_omit_nondir_symlinks" in
m4/glob.m4:    gl_REPLACE_GLOB_H
m4/glob.m4:AC_DEFUN([gl_PREREQ_GLOB],
m4/glob.m4:  AC_REQUIRE([gl_CHECK_TYPE_STRUCT_DIRENT_D_TYPE])
m4/glob.m4:  gl_CHECK_FUNCS_ANDROID([getlogin_r], [[#include <unistd.h>]])
m4/glob.m4:  gl_CHECK_FUNCS_ANDROID([getpwnam_r], [[#include <pwd.h>]])
m4/glob_h.m4:AC_DEFUN_ONCE([gl_GLOB_H],
m4/glob_h.m4:  AC_REQUIRE([gl_GLOB_H_DEFAULTS])
m4/glob_h.m4:  m4_ifdef([gl_ANSI_CXX], [AC_REQUIRE([gl_ANSI_CXX])])
m4/glob_h.m4:  gl_CHECK_NEXT_HEADERS([glob.h])
m4/glob_h.m4:  m4_ifdef([gl_POSIXCHECK],
m4/glob_h.m4:     if m4_ifdef([gl_ANSI_CXX], [test "$CXX" != no], [false]); then
m4/glob_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <glob.h>
m4/glob_h.m4:AC_DEFUN([gl_REPLACE_GLOB_H],
m4/glob_h.m4:  gl_GLOB_H_REQUIRE_DEFAULTS
m4/glob_h.m4:# gl_GLOB_MODULE_INDICATOR([modulename])
m4/glob_h.m4:AC_DEFUN([gl_GLOB_MODULE_INDICATOR],
m4/glob_h.m4:  gl_GLOB_H_REQUIRE_DEFAULTS
m4/glob_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/glob_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/glob_h.m4:AC_DEFUN([gl_GLOB_H_REQUIRE_DEFAULTS],
m4/glob_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GLOB])
m4/glob_h.m4:  AC_REQUIRE([gl_GLOB_H_DEFAULTS])
m4/glob_h.m4:AC_DEFUN([gl_GLOB_H_DEFAULTS],
m4/gnu-make.m4:AC_DEFUN([gl_GNU_MAKE],
m4/gnulib-cache.m4:gl_LOCAL_DIR([])
m4/gnulib-cache.m4:gl_MODULES([
m4/gnulib-cache.m4:gl_AVOID([])
m4/gnulib-cache.m4:gl_SOURCE_BASE([lib])
m4/gnulib-cache.m4:gl_M4_BASE([m4])
m4/gnulib-cache.m4:gl_PO_BASE([])
m4/gnulib-cache.m4:gl_DOC_BASE([doc])
m4/gnulib-cache.m4:gl_TESTS_BASE([tests])
m4/gnulib-cache.m4:gl_LIB([libgnu])
m4/gnulib-cache.m4:gl_MAKEFILE_NAME([])
m4/gnulib-cache.m4:gl_MACRO_PREFIX([gl])
m4/gnulib-cache.m4:gl_PO_DOMAIN([])
m4/gnulib-cache.m4:gl_WITNESS_C_MACRO([])
m4/gnulib-cache.m4~:gl_LOCAL_DIR([])
m4/gnulib-cache.m4~:gl_MODULES([
m4/gnulib-cache.m4~:gl_AVOID([])
m4/gnulib-cache.m4~:gl_SOURCE_BASE([lib])
m4/gnulib-cache.m4~:gl_M4_BASE([m4])
m4/gnulib-cache.m4~:gl_PO_BASE([])
m4/gnulib-cache.m4~:gl_DOC_BASE([doc])
m4/gnulib-cache.m4~:gl_TESTS_BASE([tests])
m4/gnulib-cache.m4~:gl_LIB([libgnu])
m4/gnulib-cache.m4~:gl_MAKEFILE_NAME([])
m4/gnulib-cache.m4~:gl_MACRO_PREFIX([gl])
m4/gnulib-cache.m4~:gl_PO_DOMAIN([])
m4/gnulib-cache.m4~:gl_WITNESS_C_MACRO([])
m4/gnulib-common.m4:# gl_COMMON
m4/gnulib-common.m4:AC_DEFUN([gl_COMMON], [
m4/gnulib-common.m4:  AC_REQUIRE([gl_00GNULIB])
m4/gnulib-common.m4:  AC_REQUIRE([gl_COMMON_BODY])
m4/gnulib-common.m4:  AC_REQUIRE([gl_ZZGNULIB])
m4/gnulib-common.m4:AC_DEFUN([gl_COMMON_BODY], [
m4/gnulib-common.m4:  dnl gl_cross_guess_normal    (to be used when 'yes' is good and 'no' is bad),
m4/gnulib-common.m4:  dnl gl_cross_guess_inverted  (to be used when 'no' is good and 'yes' is bad).
m4/gnulib-common.m4:     gl_cross_guesses="$enableval"],
m4/gnulib-common.m4:    [gl_cross_guesses=conservative])
m4/gnulib-common.m4:  if test $gl_cross_guesses = risky; then
m4/gnulib-common.m4:    gl_cross_guess_normal="guessing yes"
m4/gnulib-common.m4:    gl_cross_guess_inverted="guessing no"
m4/gnulib-common.m4:    gl_cross_guess_normal="guessing no"
m4/gnulib-common.m4:    gl_cross_guess_inverted="guessing yes"
m4/gnulib-common.m4:  dnl arise e.g., in the macros gl_PRINTF_DIRECTIVE_N, gl_SNPRINTF_DIRECTIVE_N.
m4/gnulib-common.m4:# gl_MODULE_INDICATOR_INIT_VARIABLE([variablename])
m4/gnulib-common.m4:# gl_MODULE_INDICATOR_INIT_VARIABLE([variablename], [initialvalue])
m4/gnulib-common.m4:AC_DEFUN([gl_MODULE_INDICATOR_INIT_VARIABLE],
m4/gnulib-common.m4:# gl_MODULE_INDICATOR_CONDITION
m4/gnulib-common.m4:m4_define([gl_MODULE_INDICATOR_CONDITION], [1])
m4/gnulib-common.m4:# gl_MODULE_INDICATOR_SET_VARIABLE([modulename])
m4/gnulib-common.m4:AC_DEFUN([gl_MODULE_INDICATOR_SET_VARIABLE],
m4/gnulib-common.m4:  gl_MODULE_INDICATOR_SET_VARIABLE_AUX(
m4/gnulib-common.m4:    [gl_MODULE_INDICATOR_CONDITION])
m4/gnulib-common.m4:# gl_MODULE_INDICATOR_SET_VARIABLE_AUX([variable])
m4/gnulib-common.m4:# modifies the shell variable to include the gl_MODULE_INDICATOR_CONDITION.
m4/gnulib-common.m4:AC_DEFUN([gl_MODULE_INDICATOR_SET_VARIABLE_AUX],
m4/gnulib-common.m4:  m4_if(m4_defn([gl_MODULE_INDICATOR_CONDITION]), [1],
m4/gnulib-common.m4:    [gl_MODULE_INDICATOR_SET_VARIABLE_AUX_OR([$1],
m4/gnulib-common.m4:                                             [gl_MODULE_INDICATOR_CONDITION])])
m4/gnulib-common.m4:# gl_MODULE_INDICATOR_SET_VARIABLE_AUX_OR([variable], [condition])
m4/gnulib-common.m4:AC_DEFUN([gl_MODULE_INDICATOR_SET_VARIABLE_AUX_OR],
m4/gnulib-common.m4:# gl_MODULE_INDICATOR([modulename])
m4/gnulib-common.m4:AC_DEFUN([gl_MODULE_INDICATOR],
m4/gnulib-common.m4:    [gl_MODULE_INDICATOR_CONDITION],
m4/gnulib-common.m4:# gl_MODULE_INDICATOR_FOR_TESTS([modulename])
m4/gnulib-common.m4:AC_DEFUN([gl_MODULE_INDICATOR_FOR_TESTS],
m4/gnulib-common.m4:# gl_ASSERT_NO_GNULIB_POSIXCHECK
m4/gnulib-common.m4:AC_DEFUN([gl_ASSERT_NO_GNULIB_POSIXCHECK],
m4/gnulib-common.m4:  dnl Override gl_WARN_ON_USE_PREPARE.
m4/gnulib-common.m4:  AC_DEFUN([gl_W][ARN_ON_USE_PREPARE], [])
m4/gnulib-common.m4:# gl_ASSERT_NO_GNULIB_TESTS
m4/gnulib-common.m4:AC_DEFUN([gl_ASSERT_NO_GNULIB_TESTS],
m4/gnulib-common.m4:  dnl Override gl_MODULE_INDICATOR_FOR_TESTS.
m4/gnulib-common.m4:  AC_DEFUN([gl_MODULE_INDICATOR_FOR_TESTS], [])
m4/gnulib-common.m4:AC_DEFUN([gl_FEATURES_H],
m4/gnulib-common.m4:# gl_PROG_CC_C99
m4/gnulib-common.m4:AC_DEFUN([gl_PROG_CC_C99],
m4/gnulib-common.m4:# gl_PROG_AR_RANLIB
m4/gnulib-common.m4:AC_DEFUN([gl_PROG_AR_RANLIB],
m4/gnulib-common.m4:  AC_CACHE_CHECK([for Minix Amsterdam compiler], [gl_cv_c_amsterdam_compiler],
m4/gnulib-common.m4:        [gl_cv_c_amsterdam_compiler=yes],
m4/gnulib-common.m4:        [gl_cv_c_amsterdam_compiler=no])
m4/gnulib-common.m4:  if test $gl_cv_c_amsterdam_compiler = yes; then
m4/gnulib-common.m4:    if test $gl_cv_c_amsterdam_compiler = yes; then
m4/gnulib-common.m4:# gl_BIGENDIAN
m4/gnulib-common.m4:AC_DEFUN([gl_BIGENDIAN],
m4/gnulib-common.m4:# gl_SILENT(command)
m4/gnulib-common.m4:AC_DEFUN([gl_SILENT],
m4/gnulib-common.m4:# gl_CACHE_VAL_SILENT(cache-id, command-to-set-it)
m4/gnulib-common.m4:AC_DEFUN([gl_CACHE_VAL_SILENT],
m4/gnulib-common.m4:  gl_SILENT([
m4/gnulib-common.m4:# gl_CONDITIONAL(conditional, condition)
m4/gnulib-common.m4:AC_DEFUN([gl_CONDITIONAL],
m4/gnulib-common.m4:# gl_CC_ALLOW_WARNINGS
m4/gnulib-common.m4:AC_DEFUN([gl_CC_ALLOW_WARNINGS],
m4/gnulib-common.m4:    [gl_cv_cc_wallow],
m4/gnulib-common.m4:       gl_cv_cc_wallow='-Wno-error'
m4/gnulib-common.m4:       gl_cv_cc_wallow=none
m4/gnulib-common.m4:  case "$gl_cv_cc_wallow" in
m4/gnulib-common.m4:    *)    GL_CFLAG_ALLOW_WARNINGS="$gl_cv_cc_wallow" ;;
m4/gnulib-common.m4:# gl_CXX_ALLOW_WARNINGS
m4/gnulib-common.m4:AC_DEFUN([gl_CXX_ALLOW_WARNINGS],
m4/gnulib-common.m4:  dnl Requires AC_PROG_CXX or gl_PROG_ANSI_CXX.
m4/gnulib-common.m4:      [gl_cv_cxx_wallow],
m4/gnulib-common.m4:         gl_cv_cxx_wallow='-Wno-error'
m4/gnulib-common.m4:         gl_cv_cxx_wallow=none
m4/gnulib-common.m4:    case "$gl_cv_cxx_wallow" in
m4/gnulib-common.m4:      *)    GL_CXXFLAG_ALLOW_WARNINGS="$gl_cv_cxx_wallow" ;;
m4/gnulib-common.m4:# gl_CC_GNULIB_WARNINGS
m4/gnulib-common.m4:AC_DEFUN([gl_CC_GNULIB_WARNINGS],
m4/gnulib-common.m4:  AC_REQUIRE([gl_CC_ALLOW_WARNINGS])
m4/gnulib-common.m4:    gl_command="$CC $CFLAGS $CPPFLAGS -E conftest.c > conftest.out"
m4/gnulib-common.m4:    if AC_TRY_EVAL([gl_command]); then
m4/gnulib-common.m4:      gl_options=`grep -v '#' conftest.out`
m4/gnulib-common.m4:      for word in $gl_options; do
m4/gnulib-common.m4:dnl gl_CONDITIONAL_HEADER([foo.h])
m4/gnulib-common.m4:AC_DEFUN([gl_CONDITIONAL_HEADER],
m4/gnulib-common.m4:  m4_pushdef([gl_header_name], AS_TR_SH(m4_toupper($1)))
m4/gnulib-common.m4:  m4_pushdef([gl_generate_var], [GL_GENERATE_]AS_TR_SH(m4_toupper($1)))
m4/gnulib-common.m4:  m4_pushdef([gl_generate_cond], [GL_GENERATE_]AS_TR_SH(m4_toupper($1)))
m4/gnulib-common.m4:  case "$gl_generate_var" in
m4/gnulib-common.m4:    false) gl_header_name='' ;;
m4/gnulib-common.m4:      if test -z "$gl_header_name"; then
m4/gnulib-common.m4:        gl_header_name="${gl_source_base_prefix}$1"
m4/gnulib-common.m4:    *) echo "*** gl_generate_var is not set correctly" 1>&2; exit 1 ;;
m4/gnulib-common.m4:  AC_SUBST(gl_header_name)
m4/gnulib-common.m4:  gl_CONDITIONAL(gl_generate_cond, [$gl_generate_var])
m4/gnulib-common.m4:  m4_popdef([gl_generate_cond])
m4/gnulib-common.m4:  m4_popdef([gl_generate_var])
m4/gnulib-common.m4:  m4_popdef([gl_header_name])
m4/gnulib-common.m4:dnl Preparations for gl_CHECK_FUNCS_MACOS.
m4/gnulib-common.m4:AC_DEFUN([gl_PREPARE_CHECK_FUNCS_MACOS],
m4/gnulib-common.m4:  AC_REQUIRE([gl_COMPILER_CLANG])
m4/gnulib-common.m4:    [gl_cv_compiler_check_future_option],
m4/gnulib-common.m4:         if test $gl_cv_compiler_clang = yes; then
m4/gnulib-common.m4:             [gl_cv_compiler_check_future_option='-Werror=unguarded-availability-new'],
m4/gnulib-common.m4:             [gl_cv_compiler_check_future_option=none])
m4/gnulib-common.m4:           gl_cv_compiler_check_future_option=none
m4/gnulib-common.m4:       *) gl_cv_compiler_check_future_option=none ;;
m4/gnulib-common.m4:dnl gl_CHECK_FUNCS_ANDROID
m4/gnulib-common.m4:dnl gl_CHECK_FUNCS_MACOS
m4/gnulib-common.m4:dnl gl_CHECK_FUNCS_ANDROID_MACOS
m4/gnulib-common.m4:AC_DEFUN([gl_CHECK_FUNCS_DEFAULT_CASE],
m4/gnulib-common.m4:           [gl_cv_onwards_func_][$1]=$[ac_cv_func_][$1]
m4/gnulib-common.m4:AC_DEFUN([gl_CHECK_FUNCS_CASE_FOR_ANDROID],
m4/gnulib-common.m4:               [gl_cv_onwards_func_][$1]=yes
m4/gnulib-common.m4:               [gl_cv_onwards_func_][$1]='future OS version'
m4/gnulib-common.m4:             [gl_cv_onwards_func_][$1]='future OS version'
m4/gnulib-common.m4:AC_DEFUN([gl_CHECK_FUNCS_CASE_FOR_MACOS],
m4/gnulib-common.m4:           if test "x$gl_cv_compiler_check_future_option" != "xnone"; then
m4/gnulib-common.m4:             ac_compile="$ac_compile $gl_cv_compiler_check_future_option"
m4/gnulib-common.m4:             ac_compile_for_check_decl="$ac_compile_for_check_decl $gl_cv_compiler_check_future_option"
m4/gnulib-common.m4:               [gl_cv_onwards_func_][$1]=yes
m4/gnulib-common.m4:                 [gl_cv_onwards_func_][$1]='future OS version'
m4/gnulib-common.m4:                 [gl_cv_onwards_func_][$1]=no
m4/gnulib-common.m4:             [gl_cv_onwards_func_][$1]=$[ac_cv_func_][$1]
m4/gnulib-common.m4:AC_DEFUN([gl_CHECK_FUNCS_SET_RESULTS],
m4/gnulib-common.m4:  case "$[gl_cv_onwards_func_][$1]" in
m4/gnulib-common.m4:    *)       [ac_cv_func_][$1]=$[gl_cv_onwards_func_][$1] ;;
m4/gnulib-common.m4:dnl gl_CHECK_FUNCS_ANDROID([func], [[#include <foo.h>]])
m4/gnulib-common.m4:dnl   - gl_cv_onwards_func_<func>   to yes / no / "future OS version"
m4/gnulib-common.m4:dnl   gl_CHECK_FUNCS_ANDROID([func], [[#include <foo.h>]])
m4/gnulib-common.m4:AC_DEFUN([gl_CHECK_FUNCS_ANDROID],
m4/gnulib-common.m4:    [[gl_cv_onwards_func_][$1]],
m4/gnulib-common.m4:    [gl_SILENT([
m4/gnulib-common.m4:         gl_CHECK_FUNCS_CASE_FOR_ANDROID([$1], [$2])
m4/gnulib-common.m4:         gl_CHECK_FUNCS_DEFAULT_CASE([$1])
m4/gnulib-common.m4:  gl_CHECK_FUNCS_SET_RESULTS([$1])
m4/gnulib-common.m4:dnl gl_CHECK_FUNCS_MACOS([func], [[#include <foo.h>]])
m4/gnulib-common.m4:dnl   - gl_cv_onwards_func_<func>   to yes / no / "future OS version"
m4/gnulib-common.m4:dnl   gl_CHECK_FUNCS_MACOS([func], [[#include <foo.h>]])
m4/gnulib-common.m4:AC_DEFUN([gl_CHECK_FUNCS_MACOS],
m4/gnulib-common.m4:  AC_REQUIRE([gl_PREPARE_CHECK_FUNCS_MACOS])
m4/gnulib-common.m4:    [[gl_cv_onwards_func_][$1]],
m4/gnulib-common.m4:    [gl_SILENT([
m4/gnulib-common.m4:         gl_CHECK_FUNCS_CASE_FOR_MACOS([$1], [$2])
m4/gnulib-common.m4:         gl_CHECK_FUNCS_DEFAULT_CASE([$1])
m4/gnulib-common.m4:  gl_CHECK_FUNCS_SET_RESULTS([$1])
m4/gnulib-common.m4:dnl gl_CHECK_FUNCS_ANDROID_MACOS([func], [[#include <foo.h>]])
m4/gnulib-common.m4:dnl It is the combination of gl_CHECK_FUNCS_ANDROID and gl_CHECK_FUNCS_MACOS.
m4/gnulib-common.m4:AC_DEFUN([gl_CHECK_FUNCS_ANDROID_MACOS],
m4/gnulib-common.m4:  AC_REQUIRE([gl_PREPARE_CHECK_FUNCS_MACOS])
m4/gnulib-common.m4:    [[gl_cv_onwards_func_][$1]],
m4/gnulib-common.m4:    [gl_SILENT([
m4/gnulib-common.m4:         gl_CHECK_FUNCS_CASE_FOR_ANDROID([$1], [$2])
m4/gnulib-common.m4:         gl_CHECK_FUNCS_CASE_FOR_MACOS([$1], [$2])
m4/gnulib-common.m4:         gl_CHECK_FUNCS_DEFAULT_CASE([$1])
m4/gnulib-common.m4:  gl_CHECK_FUNCS_SET_RESULTS([$1])
m4/gnulib-common.m4:[$gl_mda_defines]
m4/gnulib-common.m4:[gl_mda_defines='
m4/gnulib-comp.m4:AC_DEFUN([gl_EARLY],
m4/gnulib-comp.m4:  m4_pattern_forbid([^gl_[A-Z]])dnl the gnulib macro namespace
m4/gnulib-comp.m4:  m4_pattern_allow([^gl_ES$])dnl a valid locale name
m4/gnulib-comp.m4:  m4_pattern_allow([^gl_LIBOBJS$])dnl a variable
m4/gnulib-comp.m4:  m4_pattern_allow([^gl_LTLIBOBJS$])dnl a variable
m4/gnulib-comp.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/gnulib-comp.m4:  AC_REQUIRE([gl_PROG_AR_RANLIB])
m4/gnulib-comp.m4:  # AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/gnulib-comp.m4:AC_DEFUN([gl_INIT],
m4/gnulib-comp.m4:  gl_cond_libtool=false
m4/gnulib-comp.m4:  gl_libdeps=
m4/gnulib-comp.m4:  gl_ltlibdeps=
m4/gnulib-comp.m4:  gl_m4_base='m4'
m4/gnulib-comp.m4:  m4_pushdef([AC_LIBOBJ], m4_defn([gl_LIBOBJ]))
m4/gnulib-comp.m4:  m4_pushdef([AC_REPLACE_FUNCS], m4_defn([gl_REPLACE_FUNCS]))
m4/gnulib-comp.m4:  m4_pushdef([AC_LIBSOURCES], m4_defn([gl_LIBSOURCES]))
m4/gnulib-comp.m4:  m4_pushdef([gl_LIBSOURCES_LIST], [])
m4/gnulib-comp.m4:  m4_pushdef([gl_LIBSOURCES_DIR], [])
m4/gnulib-comp.m4:  gl_COMMON
m4/gnulib-comp.m4:  gl_source_base='lib'
m4/gnulib-comp.m4:  gl_source_base_prefix=
m4/gnulib-comp.m4:  AC_REQUIRE([gl_EXTERN_INLINE])
m4/gnulib-comp.m4:  gl_FUNC_FSYNC
m4/gnulib-comp.m4:  gl_CONDITIONAL([GL_COND_OBJ_FSYNC], [test $HAVE_FSYNC = 0])
m4/gnulib-comp.m4:    gl_PREREQ_FSYNC
m4/gnulib-comp.m4:  gl_UNISTD_MODULE_INDICATOR([fsync])
m4/gnulib-comp.m4:  AC_REQUIRE([gl_MSVC_INVAL])
m4/gnulib-comp.m4:  gl_CONDITIONAL([GL_COND_OBJ_MSVC_INVAL],
m4/gnulib-comp.m4:  AC_REQUIRE([gl_MSVC_NOTHROW])
m4/gnulib-comp.m4:  gl_CONDITIONAL([GL_COND_OBJ_MSVC_NOTHROW],
m4/gnulib-comp.m4:  gl_MODULE_INDICATOR([msvc-nothrow])
m4/gnulib-comp.m4:  gl_STDDEF_H
m4/gnulib-comp.m4:  gl_STDDEF_H_REQUIRE_DEFAULTS
m4/gnulib-comp.m4:  gl_CONDITIONAL_HEADER([stddef.h])
m4/gnulib-comp.m4:  gl_SYS_TYPES_H
m4/gnulib-comp.m4:  gl_SYS_TYPES_H_REQUIRE_DEFAULTS
m4/gnulib-comp.m4:  gl_UNISTD_H
m4/gnulib-comp.m4:  gl_UNISTD_H_REQUIRE_DEFAULTS
m4/gnulib-comp.m4:  m4_ifval(gl_LIBSOURCES_LIST, [
m4/gnulib-comp.m4:    m4_syscmd([test ! -d ]m4_defn([gl_LIBSOURCES_DIR])[ ||
m4/gnulib-comp.m4:      for gl_file in ]gl_LIBSOURCES_LIST[ ; do
m4/gnulib-comp.m4:        if test ! -r ]m4_defn([gl_LIBSOURCES_DIR])[/$gl_file ; then
m4/gnulib-comp.m4:          echo "missing file ]m4_defn([gl_LIBSOURCES_DIR])[/$gl_file" >&2
m4/gnulib-comp.m4:  m4_popdef([gl_LIBSOURCES_DIR])
m4/gnulib-comp.m4:  m4_popdef([gl_LIBSOURCES_LIST])
m4/gnulib-comp.m4:    gl_libobjs=
m4/gnulib-comp.m4:    gl_ltlibobjs=
m4/gnulib-comp.m4:    gl_libobjdeps=
m4/gnulib-comp.m4:    if test -n "$gl_LIBOBJS"; then
m4/gnulib-comp.m4:      for i in `for i in $gl_LIBOBJS; do echo "$i"; done | sed -e "$sed_drop_objext" | sort | uniq`; do
m4/gnulib-comp.m4:        gl_libobjs="$gl_libobjs $i.$ac_objext"
m4/gnulib-comp.m4:        gl_ltlibobjs="$gl_ltlibobjs $i.lo"
m4/gnulib-comp.m4:        gl_libobjdeps="$gl_libobjdeps $i_dir/\$(DEPDIR)/$i_base.Po"
m4/gnulib-comp.m4:    AC_SUBST([gl_LIBOBJS], [$gl_libobjs])
m4/gnulib-comp.m4:    AC_SUBST([gl_LTLIBOBJS], [$gl_ltlibobjs])
m4/gnulib-comp.m4:    AC_SUBST([gl_LIBOBJDEPS], [$gl_libobjdeps])
m4/gnulib-comp.m4:  gl_COMMON
m4/gnulib-comp.m4:  gl_source_base='tests'
m4/gnulib-comp.m4:  gl_source_base_prefix=
m4/gnulib-comp.m4:  gl_module_indicator_condition=$gltests_WITNESS
m4/gnulib-comp.m4:  m4_pushdef([gl_MODULE_INDICATOR_CONDITION], [$gl_module_indicator_condition])
m4/gnulib-comp.m4:  m4_popdef([gl_MODULE_INDICATOR_CONDITION])
m4/gnulib-comp.m4:      for gl_file in ]gltests_LIBSOURCES_LIST[ ; do
m4/gnulib-comp.m4:        if test ! -r ]m4_defn([gltests_LIBSOURCES_DIR])[/$gl_file ; then
m4/gnulib-comp.m4:          echo "missing file ]m4_defn([gltests_LIBSOURCES_DIR])[/$gl_file" >&2
m4/gnulib-comp.m4:  AC_REQUIRE([gl_CC_GNULIB_WARNINGS])
m4/gnulib-comp.m4:  LIBGNU_LIBDEPS="$gl_libdeps"
m4/gnulib-comp.m4:  LIBGNU_LTLIBDEPS="$gl_ltlibdeps"
m4/gnulib-comp.m4:# into gl_LIBOBJS instead of into LIBOBJS.
m4/gnulib-comp.m4:AC_DEFUN([gl_LIBOBJ], [
m4/gnulib-comp.m4:  AS_LITERAL_IF([$1], [gl_LIBSOURCES([$1.c])])dnl
m4/gnulib-comp.m4:  gl_LIBOBJS="$gl_LIBOBJS $1.$ac_objext"
m4/gnulib-comp.m4:# into gl_LIBOBJS instead of into LIBOBJS.
m4/gnulib-comp.m4:AC_DEFUN([gl_REPLACE_FUNCS], [
m4/gnulib-comp.m4:  m4_foreach_w([gl_NAME], [$1], [AC_LIBSOURCES(gl_NAME[.c])])dnl
m4/gnulib-comp.m4:  AC_CHECK_FUNCS([$1], , [gl_LIBOBJ($ac_func)])
m4/gnulib-comp.m4:AC_DEFUN([gl_LIBSOURCES], [
m4/gnulib-comp.m4:  m4_foreach([_gl_NAME], [$1], [
m4/gnulib-comp.m4:    m4_if(_gl_NAME, [alloca.c], [], [
m4/gnulib-comp.m4:      m4_define([gl_LIBSOURCES_DIR], [lib])
m4/gnulib-comp.m4:      m4_append([gl_LIBSOURCES_LIST], _gl_NAME, [ ])
m4/gnulib-comp.m4:  m4_foreach_w([gl_NAME], [$1], [AC_LIBSOURCES(gl_NAME[.c])])dnl
m4/gnulib-comp.m4:  m4_foreach([_gl_NAME], [$1], [
m4/gnulib-comp.m4:    m4_if(_gl_NAME, [alloca.c], [], [
m4/gnulib-comp.m4:      m4_append([gltests_LIBSOURCES_LIST], _gl_NAME, [ ])
m4/gnulib-comp.m4:AC_DEFUN([gl_FILE_LIST], [
m4/gnulib-comp.m4~:AC_DEFUN([gl_EARLY],
m4/gnulib-comp.m4~:  m4_pattern_forbid([^gl_[A-Z]])dnl the gnulib macro namespace
m4/gnulib-comp.m4~:  m4_pattern_allow([^gl_ES$])dnl a valid locale name
m4/gnulib-comp.m4~:  m4_pattern_allow([^gl_LIBOBJS$])dnl a variable
m4/gnulib-comp.m4~:  m4_pattern_allow([^gl_LTLIBOBJS$])dnl a variable
m4/gnulib-comp.m4~:  AC_REQUIRE([gl_PROG_AR_RANLIB])
m4/gnulib-comp.m4~:AC_DEFUN([gl_INIT],
m4/gnulib-comp.m4~:  gl_cond_libtool=false
m4/gnulib-comp.m4~:  gl_libdeps=
m4/gnulib-comp.m4~:  gl_ltlibdeps=
m4/gnulib-comp.m4~:  gl_m4_base='m4'
m4/gnulib-comp.m4~:  m4_pushdef([AC_LIBOBJ], m4_defn([gl_LIBOBJ]))
m4/gnulib-comp.m4~:  m4_pushdef([AC_REPLACE_FUNCS], m4_defn([gl_REPLACE_FUNCS]))
m4/gnulib-comp.m4~:  m4_pushdef([AC_LIBSOURCES], m4_defn([gl_LIBSOURCES]))
m4/gnulib-comp.m4~:  m4_pushdef([gl_LIBSOURCES_LIST], [])
m4/gnulib-comp.m4~:  m4_pushdef([gl_LIBSOURCES_DIR], [])
m4/gnulib-comp.m4~:  gl_COMMON
m4/gnulib-comp.m4~:  gl_source_base='lib'
m4/gnulib-comp.m4~:  gl_source_base_prefix=
m4/gnulib-comp.m4~:  m4_ifval(gl_LIBSOURCES_LIST, [
m4/gnulib-comp.m4~:    m4_syscmd([test ! -d ]m4_defn([gl_LIBSOURCES_DIR])[ ||
m4/gnulib-comp.m4~:      for gl_file in ]gl_LIBSOURCES_LIST[ ; do
m4/gnulib-comp.m4~:        if test ! -r ]m4_defn([gl_LIBSOURCES_DIR])[/$gl_file ; then
m4/gnulib-comp.m4~:          echo "missing file ]m4_defn([gl_LIBSOURCES_DIR])[/$gl_file" >&2
m4/gnulib-comp.m4~:  m4_popdef([gl_LIBSOURCES_DIR])
m4/gnulib-comp.m4~:  m4_popdef([gl_LIBSOURCES_LIST])
m4/gnulib-comp.m4~:    gl_libobjs=
m4/gnulib-comp.m4~:    gl_ltlibobjs=
m4/gnulib-comp.m4~:    gl_libobjdeps=
m4/gnulib-comp.m4~:    if test -n "$gl_LIBOBJS"; then
m4/gnulib-comp.m4~:      for i in `for i in $gl_LIBOBJS; do echo "$i"; done | sed -e "$sed_drop_objext" | sort | uniq`; do
m4/gnulib-comp.m4~:        gl_libobjs="$gl_libobjs $i.$ac_objext"
m4/gnulib-comp.m4~:        gl_ltlibobjs="$gl_ltlibobjs $i.lo"
m4/gnulib-comp.m4~:        gl_libobjdeps="$gl_libobjdeps $i_dir/\$(DEPDIR)/$i_base.Po"
m4/gnulib-comp.m4~:    AC_SUBST([gl_LIBOBJS], [$gl_libobjs])
m4/gnulib-comp.m4~:    AC_SUBST([gl_LTLIBOBJS], [$gl_ltlibobjs])
m4/gnulib-comp.m4~:    AC_SUBST([gl_LIBOBJDEPS], [$gl_libobjdeps])
m4/gnulib-comp.m4~:  gl_COMMON
m4/gnulib-comp.m4~:  gl_source_base='tests'
m4/gnulib-comp.m4~:  gl_source_base_prefix=
m4/gnulib-comp.m4~:  gl_module_indicator_condition=$gltests_WITNESS
m4/gnulib-comp.m4~:  m4_pushdef([gl_MODULE_INDICATOR_CONDITION], [$gl_module_indicator_condition])
m4/gnulib-comp.m4~:  m4_popdef([gl_MODULE_INDICATOR_CONDITION])
m4/gnulib-comp.m4~:      for gl_file in ]gltests_LIBSOURCES_LIST[ ; do
m4/gnulib-comp.m4~:        if test ! -r ]m4_defn([gltests_LIBSOURCES_DIR])[/$gl_file ; then
m4/gnulib-comp.m4~:          echo "missing file ]m4_defn([gltests_LIBSOURCES_DIR])[/$gl_file" >&2
m4/gnulib-comp.m4~:  AC_REQUIRE([gl_CC_GNULIB_WARNINGS])
m4/gnulib-comp.m4~:  LIBGNU_LIBDEPS="$gl_libdeps"
m4/gnulib-comp.m4~:  LIBGNU_LTLIBDEPS="$gl_ltlibdeps"
m4/gnulib-comp.m4~:# into gl_LIBOBJS instead of into LIBOBJS.
m4/gnulib-comp.m4~:AC_DEFUN([gl_LIBOBJ], [
m4/gnulib-comp.m4~:  AS_LITERAL_IF([$1], [gl_LIBSOURCES([$1.c])])dnl
m4/gnulib-comp.m4~:  gl_LIBOBJS="$gl_LIBOBJS $1.$ac_objext"
m4/gnulib-comp.m4~:# into gl_LIBOBJS instead of into LIBOBJS.
m4/gnulib-comp.m4~:AC_DEFUN([gl_REPLACE_FUNCS], [
m4/gnulib-comp.m4~:  m4_foreach_w([gl_NAME], [$1], [AC_LIBSOURCES(gl_NAME[.c])])dnl
m4/gnulib-comp.m4~:  AC_CHECK_FUNCS([$1], , [gl_LIBOBJ($ac_func)])
m4/gnulib-comp.m4~:AC_DEFUN([gl_LIBSOURCES], [
m4/gnulib-comp.m4~:  m4_foreach([_gl_NAME], [$1], [
m4/gnulib-comp.m4~:    m4_if(_gl_NAME, [alloca.c], [], [
m4/gnulib-comp.m4~:      m4_define([gl_LIBSOURCES_DIR], [lib])
m4/gnulib-comp.m4~:      m4_append([gl_LIBSOURCES_LIST], _gl_NAME, [ ])
m4/gnulib-comp.m4~:  m4_foreach_w([gl_NAME], [$1], [AC_LIBSOURCES(gl_NAME[.c])])dnl
m4/gnulib-comp.m4~:  m4_foreach([_gl_NAME], [$1], [
m4/gnulib-comp.m4~:    m4_if(_gl_NAME, [alloca.c], [], [
m4/gnulib-comp.m4~:      m4_append([gltests_LIBSOURCES_LIST], _gl_NAME, [ ])
m4/gnulib-comp.m4~:AC_DEFUN([gl_FILE_LIST], [
m4/gnulib-tool.m4:dnl Usage: gl_LOCAL_DIR([DIR])
m4/gnulib-tool.m4:AC_DEFUN([gl_LOCAL_DIR], [])
m4/gnulib-tool.m4:dnl Usage: gl_MODULES([module1 module2 ...])
m4/gnulib-tool.m4:AC_DEFUN([gl_MODULES], [])
m4/gnulib-tool.m4:dnl Usage: gl_AVOID([module1 module2 ...])
m4/gnulib-tool.m4:AC_DEFUN([gl_AVOID], [])
m4/gnulib-tool.m4:dnl Usage: gl_SOURCE_BASE([DIR])
m4/gnulib-tool.m4:AC_DEFUN([gl_SOURCE_BASE], [])
m4/gnulib-tool.m4:dnl Usage: gl_M4_BASE([DIR])
m4/gnulib-tool.m4:AC_DEFUN([gl_M4_BASE], [])
m4/gnulib-tool.m4:dnl Usage: gl_PO_BASE([DIR])
m4/gnulib-tool.m4:AC_DEFUN([gl_PO_BASE], [])
m4/gnulib-tool.m4:dnl Usage: gl_DOC_BASE([DIR])
m4/gnulib-tool.m4:AC_DEFUN([gl_DOC_BASE], [])
m4/gnulib-tool.m4:dnl Usage: gl_TESTS_BASE([DIR])
m4/gnulib-tool.m4:AC_DEFUN([gl_TESTS_BASE], [])
m4/gnulib-tool.m4:dnl Usage: gl_WITH_TESTS
m4/gnulib-tool.m4:AC_DEFUN([gl_WITH_TESTS], [])
m4/gnulib-tool.m4:dnl Usage: gl_LIB([LIBNAME])
m4/gnulib-tool.m4:AC_DEFUN([gl_LIB], [])
m4/gnulib-tool.m4:dnl Usage: gl_LGPL or gl_LGPL([VERSION])
m4/gnulib-tool.m4:AC_DEFUN([gl_LGPL], [])
m4/gnulib-tool.m4:dnl Usage: gl_GPL([VERSION])
m4/gnulib-tool.m4:AC_DEFUN([gl_GPL], [])
m4/gnulib-tool.m4:dnl Usage: gl_MAKEFILE_NAME([FILENAME])
m4/gnulib-tool.m4:AC_DEFUN([gl_MAKEFILE_NAME], [])
m4/gnulib-tool.m4:dnl Usage: gl_TESTS_MAKEFILE_NAME([FILENAME])
m4/gnulib-tool.m4:AC_DEFUN([gl_TESTS_MAKEFILE_NAME], [])
m4/gnulib-tool.m4:dnl Usage: gl_AUTOMAKE_SUBDIR
m4/gnulib-tool.m4:AC_DEFUN([gl_AUTOMAKE_SUBDIR], [])
m4/gnulib-tool.m4:dnl Usage: gl_LIBTOOL
m4/gnulib-tool.m4:AC_DEFUN([gl_LIBTOOL], [])
m4/gnulib-tool.m4:dnl Usage: gl_MACRO_PREFIX([PREFIX])
m4/gnulib-tool.m4:AC_DEFUN([gl_MACRO_PREFIX], [])
m4/gnulib-tool.m4:dnl Usage: gl_PO_DOMAIN([DOMAIN])
m4/gnulib-tool.m4:AC_DEFUN([gl_PO_DOMAIN], [])
m4/gnulib-tool.m4:dnl Usage: gl_VC_FILES([BOOLEAN])
m4/gnulib-tool.m4:AC_DEFUN([gl_VC_FILES], [])
m4/grantpt.m4:AC_DEFUN([gl_FUNC_GRANTPT],
m4/grantpt.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/grantpt.m4:  AC_CACHE_CHECK([for grantpt], [gl_cv_func_grantpt],
m4/grantpt.m4:       [gl_cv_func_grantpt=yes],
m4/grantpt.m4:       [gl_cv_func_grantpt=no])
m4/grantpt.m4:  if test $gl_cv_func_grantpt = no; then
m4/grantpt.m4:AC_DEFUN([gl_PREREQ_GRANTPT], [
m4/group-member.m4:AC_DEFUN([gl_FUNC_GROUP_MEMBER],
m4/group-member.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/group-member.m4:AC_DEFUN([gl_PREREQ_GROUP_MEMBER],
m4/hasmntopt.m4:AC_DEFUN([gl_FUNC_HASMNTOPT],
m4/hasmntopt.m4:  AC_REQUIRE([gl_MNTENT_H_DEFAULTS])
m4/hasmntopt.m4:  gl_CHECK_FUNCS_ANDROID([setmntent],
m4/hasmntopt.m4:  gl_CHECK_FUNCS_ANDROID([hasmntopt],
m4/hasmntopt.m4:      [gl_cv_func_hasmntopt_works],
m4/hasmntopt.m4:         [gl_cv_func_hasmntopt_works=yes],
m4/hasmntopt.m4:         [gl_cv_func_hasmntopt_works=no],
m4/hasmntopt.m4:            *-gnu* | gnu*)      gl_cv_func_hasmntopt_works="guessing yes" ;;
m4/hasmntopt.m4:            *-musl* | midipix*) gl_cv_func_hasmntopt_works="guessing no" ;;
m4/hasmntopt.m4:            *)                  gl_cv_func_hasmntopt_works="$gl_cross_guess_normal" ;;
m4/hasmntopt.m4:    case "$gl_cv_func_hasmntopt_works" in
m4/hasmntopt.m4:    case "$gl_cv_onwards_func_hasmntopt" in
m4/hasmntopt.m4:AC_DEFUN([gl_PREREQ_HASMNTOPT],
m4/host-cpu-c-abi.m4:AC_DEFUN([gl_HOST_CPU_C_ABI],
m4/host-cpu-c-abi.m4:  AC_REQUIRE([gl_C_ASM])
m4/host-cpu-c-abi.m4:  AC_CACHE_CHECK([host CPU and C ABI], [gl_cv_host_cpu_c_abi],
m4/host-cpu-c-abi.m4:         gl_cv_host_cpu_c_abi=i386
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=x86_64-x32],
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=x86_64])],
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=i386])
m4/host-cpu-c-abi.m4:         gl_cv_host_cpu_c_abi=alpha
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=arm64-ilp32],
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=arm64])],
m4/host-cpu-c-abi.m4:            AC_TRY_COMMAND(${CC-cc} $CFLAGS $CPPFLAGS $gl_c_asm_opt conftest.c) >/dev/null 2>&1
m4/host-cpu-c-abi.m4:            if LC_ALL=C grep 'd0,' conftest.$gl_asmext >/dev/null; then
m4/host-cpu-c-abi.m4:              gl_cv_host_cpu_c_abi=armhf
m4/host-cpu-c-abi.m4:              gl_cv_host_cpu_c_abi=arm
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=hppa64],
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=hppa])
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=ia64-ilp32],
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=ia64])
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=mips64],
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=mipsn32],
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=mips])])
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=powerpc64-elfv2],
m4/host-cpu-c-abi.m4:              [gl_cv_host_cpu_c_abi=powerpc64])
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=powerpc])
m4/host-cpu-c-abi.m4:         gl_cv_host_cpu_c_abi=powerpc
m4/host-cpu-c-abi.m4:         gl_cv_host_cpu_c_abi="${cpu}-${main_abi}${float_abi}"
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=s390x],
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=s390])
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=sparc64],
m4/host-cpu-c-abi.m4:           [gl_cv_host_cpu_c_abi=sparc])
m4/host-cpu-c-abi.m4:         gl_cv_host_cpu_c_abi="$host_cpu"
m4/host-cpu-c-abi.m4:  HOST_CPU=`echo "$gl_cv_host_cpu_c_abi" | sed -e 's/-.*//'`
m4/host-cpu-c-abi.m4:  HOST_CPU_C_ABI="$gl_cv_host_cpu_c_abi"
m4/host-cpu-c-abi.m4:dnl This is a simplified variant of gl_HOST_CPU_C_ABI.
m4/host-cpu-c-abi.m4:AC_DEFUN([gl_HOST_CPU_C_ABI_32BIT],
m4/host-cpu-c-abi.m4:  AC_CACHE_CHECK([32-bit host C ABI], [gl_cv_host_cpu_c_abi_32bit],
m4/host-cpu-c-abi.m4:         gl_cv_host_cpu_c_abi_32bit=yes
m4/host-cpu-c-abi.m4:         gl_cv_host_cpu_c_abi_32bit=no
m4/host-cpu-c-abi.m4:         if test -n "$gl_cv_host_cpu_c_abi"; then
m4/host-cpu-c-abi.m4:           dnl gl_HOST_CPU_C_ABI has already been run. Use its result.
m4/host-cpu-c-abi.m4:           case "$gl_cv_host_cpu_c_abi" in
m4/host-cpu-c-abi.m4:               gl_cv_host_cpu_c_abi_32bit=yes ;;
m4/host-cpu-c-abi.m4:               gl_cv_host_cpu_c_abi_32bit=no ;;
m4/host-cpu-c-abi.m4:               gl_cv_host_cpu_c_abi_32bit=unknown ;;
m4/host-cpu-c-abi.m4:           gl_cv_host_cpu_c_abi_32bit=unknown
m4/host-cpu-c-abi.m4:         if test $gl_cv_host_cpu_c_abi_32bit = unknown; then
m4/host-cpu-c-abi.m4:             [gl_cv_host_cpu_c_abi_32bit=no],
m4/host-cpu-c-abi.m4:             [gl_cv_host_cpu_c_abi_32bit=yes])
m4/host-cpu-c-abi.m4:  HOST_CPU_C_ABI_32BIT="$gl_cv_host_cpu_c_abi_32bit"
m4/host-os.m4:AC_DEFUN([gl_HOST_OS],
m4/host-os.m4:    [gl_cv_host_operating_system],
m4/host-os.m4:     gl_cv_host_operating_system=$os]])
m4/host-os.m4:    "$gl_cv_host_operating_system",
m4/hostent.m4:AC_DEFUN([gl_HOSTENT],
m4/hostent.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])dnl for HAVE_SYS_SOCKET_H, HAVE_WINSOCK2_H
m4/hostent.m4:  gl_saved_libs="$LIBS"
m4/hostent.m4:  LIBS="$gl_saved_libs"
m4/hostent.m4:        [gl_cv_w32_gethostbyname],
m4/hostent.m4:        [gl_cv_w32_gethostbyname=no
m4/hostent.m4:         gl_saved_LIBS="$LIBS"
m4/hostent.m4:           [gl_cv_w32_gethostbyname=yes])
m4/hostent.m4:         LIBS="$gl_saved_LIBS"
m4/hostent.m4:      if test "$gl_cv_w32_gethostbyname" = "yes"; then
m4/htonl.m4:AC_DEFUN([gl_FUNC_HTONL],
m4/htonl.m4:  AC_REQUIRE([gl_ARPA_INET_H_DEFAULTS])
m4/htonl.m4:  gl_PREREQ_SYS_H_WINSOCK2
m4/human.m4:AC_DEFUN([gl_HUMAN],
m4/hypot-ieee.m4:dnl module description), so that gl_FUNC_HYPOT can test whether 'aclocal' has
m4/hypot-ieee.m4:AC_DEFUN([gl_FUNC_HYPOT_IEEE],
m4/hypot-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_hypot_required=ieee])
m4/hypot-ieee.m4:  AC_REQUIRE([gl_FUNC_HYPOT])
m4/hypot.m4:AC_DEFUN([gl_FUNC_HYPOT],
m4/hypot.m4:  m4_divert_text([DEFAULTS], [gl_hypot_required=plain])
m4/hypot.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/hypot.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/hypot.m4:  gl_COMMON_DOUBLE_MATHFUNC([hypot])
m4/hypot.m4:  m4_ifdef([gl_FUNC_HYPOT_IEEE], [
m4/hypot.m4:    if test $gl_hypot_required = ieee && test $REPLACE_HYPOT = 0; then
m4/hypot.m4:        [gl_cv_func_hypot_ieee],
m4/hypot.m4:            [gl_cv_func_hypot_ieee=yes],
m4/hypot.m4:            [gl_cv_func_hypot_ieee=no],
m4/hypot.m4:               *-gnu* | gnu*)      gl_cv_func_hypot_ieee="guessing yes" ;;
m4/hypot.m4:               *-musl* | midipix*) gl_cv_func_hypot_ieee="guessing yes" ;;
m4/hypot.m4:               mingw* | windows*)  gl_cv_func_hypot_ieee="guessing yes" ;;
m4/hypot.m4:               *)                  gl_cv_func_hypot_ieee="$gl_cross_guess_normal" ;;
m4/hypot.m4:      case "$gl_cv_func_hypot_ieee" in
m4/hypot.m4:    AC_REQUIRE([gl_FUNC_FABS])
m4/hypot.m4:    AC_REQUIRE([gl_FUNC_FREXP])
m4/hypot.m4:    AC_REQUIRE([gl_FUNC_LDEXP])
m4/hypot.m4:    AC_REQUIRE([gl_FUNC_SQRT])
m4/hypotf-ieee.m4:dnl module description), so that gl_FUNC_HYPOTF can test whether 'aclocal' has
m4/hypotf-ieee.m4:AC_DEFUN([gl_FUNC_HYPOTF_IEEE],
m4/hypotf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_hypotf_required=ieee])
m4/hypotf-ieee.m4:  AC_REQUIRE([gl_FUNC_HYPOTF])
m4/hypotf.m4:AC_DEFUN([gl_FUNC_HYPOTF],
m4/hypotf.m4:  m4_divert_text([DEFAULTS], [gl_hypotf_required=plain])
m4/hypotf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/hypotf.m4:  AC_REQUIRE([gl_FUNC_HYPOT])
m4/hypotf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/hypotf.m4:    gl_FUNC_HYPOTF_WORKS
m4/hypotf.m4:    case "$gl_cv_func_hypotf_works" in
m4/hypotf.m4:    m4_ifdef([gl_FUNC_HYPOTF_IEEE], [
m4/hypotf.m4:      if test $gl_hypotf_required = ieee && test $REPLACE_HYPOTF = 0; then
m4/hypotf.m4:          [gl_cv_func_hypotf_ieee],
m4/hypotf.m4:              [gl_cv_func_hypotf_ieee=yes],
m4/hypotf.m4:              [gl_cv_func_hypotf_ieee=no],
m4/hypotf.m4:                 *-gnu* | gnu*)      gl_cv_func_hypotf_ieee="guessing yes" ;;
m4/hypotf.m4:                 *-musl* | midipix*) gl_cv_func_hypotf_ieee="guessing yes" ;;
m4/hypotf.m4:                 mingw* | windows*)  gl_cv_func_hypotf_ieee="guessing yes" ;;
m4/hypotf.m4:                 *)                  gl_cv_func_hypotf_ieee="$gl_cross_guess_normal" ;;
m4/hypotf.m4:        case "$gl_cv_func_hypotf_ieee" in
m4/hypotf.m4:AC_DEFUN([gl_FUNC_HYPOTF_WORKS],
m4/hypotf.m4:  AC_CACHE_CHECK([whether hypotf works], [gl_cv_func_hypotf_works],
m4/hypotf.m4:        [gl_cv_func_hypotf_works=yes],
m4/hypotf.m4:        [gl_cv_func_hypotf_works=no],
m4/hypotf.m4:           netbsd* | openbsd*) gl_cv_func_hypotf_works="guessing no" ;;
m4/hypotf.m4:           mingw* | windows*)  gl_cv_func_hypotf_works="guessing yes" ;;
m4/hypotf.m4:           *)                  gl_cv_func_hypotf_works="guessing yes" ;;
m4/hypotl-ieee.m4:dnl module description), so that gl_FUNC_HYPOTL can test whether 'aclocal' has
m4/hypotl-ieee.m4:AC_DEFUN([gl_FUNC_HYPOTL_IEEE],
m4/hypotl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_hypotl_required=ieee])
m4/hypotl-ieee.m4:  AC_REQUIRE([gl_FUNC_HYPOTL])
m4/hypotl.m4:AC_DEFUN([gl_FUNC_HYPOTL],
m4/hypotl.m4:  m4_divert_text([DEFAULTS], [gl_hypotl_required=plain])
m4/hypotl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/hypotl.m4:  AC_REQUIRE([gl_FUNC_HYPOT])
m4/hypotl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/hypotl.m4:    gl_FUNC_HYPOTL_WORKS
m4/hypotl.m4:    case "$gl_cv_func_hypotl_works" in
m4/hypotl.m4:    m4_ifdef([gl_FUNC_HYPOTL_IEEE], [
m4/hypotl.m4:      if test $gl_hypotl_required = ieee && test $REPLACE_HYPOTL = 0; then
m4/hypotl.m4:          [gl_cv_func_hypotl_ieee],
m4/hypotl.m4:              [gl_cv_func_hypotl_ieee=yes],
m4/hypotl.m4:              [gl_cv_func_hypotl_ieee=no],
m4/hypotl.m4:                 *-gnu* | gnu*)      gl_cv_func_hypotl_ieee="guessing yes" ;;
m4/hypotl.m4:                 *-musl* | midipix*) gl_cv_func_hypotl_ieee="guessing yes" ;;
m4/hypotl.m4:                 mingw* | windows*)  gl_cv_func_hypotl_ieee="guessing yes" ;;
m4/hypotl.m4:                 *)                  gl_cv_func_hypotl_ieee="$gl_cross_guess_normal" ;;
m4/hypotl.m4:        case "$gl_cv_func_hypotl_ieee" in
m4/hypotl.m4:      AC_REQUIRE([gl_FUNC_FABSL])
m4/hypotl.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/hypotl.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/hypotl.m4:      AC_REQUIRE([gl_FUNC_SQRTL])
m4/hypotl.m4:AC_DEFUN([gl_FUNC_HYPOTL_WORKS],
m4/hypotl.m4:  AC_CACHE_CHECK([whether hypotl works], [gl_cv_func_hypotl_works],
m4/hypotl.m4:        [gl_cv_func_hypotl_works=yes],
m4/hypotl.m4:        [gl_cv_func_hypotl_works=no],
m4/hypotl.m4:           openbsd*)          gl_cv_func_hypotl_works="guessing no" ;;
m4/hypotl.m4:           mingw* | windows*) gl_cv_func_hypotl_works="guessing yes" ;;
m4/hypotl.m4:           *)                 gl_cv_func_hypotl_works="guessing yes" ;;
m4/i-ring.m4:AC_DEFUN([gl_I_RING],
m4/iconv.m4:  gl_saved_CPPFLAGS="$CPPFLAGS"
m4/iconv.m4:      gl_saved_LIBS="$LIBS"
m4/iconv.m4:      LIBS="$gl_saved_LIBS"
m4/iconv.m4:      gl_saved_LIBS="$LIBS"
m4/iconv.m4:      LIBS="$gl_saved_LIBS"
m4/iconv.m4:    CPPFLAGS="$gl_saved_CPPFLAGS"
m4/iconv.m4:      [gl_cv_iconv_nonconst],
m4/iconv.m4:         [gl_cv_iconv_nonconst=yes],
m4/iconv.m4:         [gl_cv_iconv_nonconst=no])
m4/iconv.m4:    gl_cv_iconv_nonconst=yes
m4/iconv.m4:  if test $gl_cv_iconv_nonconst = yes; then
m4/iconv.m4:  m4_ifdef([gl_ICONV_H_DEFAULTS],
m4/iconv.m4:    [AC_REQUIRE([gl_ICONV_H_DEFAULTS])
m4/iconv.m4:     if test $gl_cv_iconv_nonconst != yes; then
m4/iconv_h.m4:AC_DEFUN_ONCE([gl_ICONV_H],
m4/iconv_h.m4:  AC_REQUIRE([gl_ICONV_H_DEFAULTS])
m4/iconv_h.m4:  gl_CHECK_NEXT_HEADERS([iconv.h])
m4/iconv_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <iconv.h>
m4/iconv_h.m4:AC_DEFUN([gl_REPLACE_ICONV_H],
m4/iconv_h.m4:  gl_ICONV_H_REQUIRE_DEFAULTS
m4/iconv_h.m4:# gl_ICONV_MODULE_INDICATOR([modulename])
m4/iconv_h.m4:AC_DEFUN([gl_ICONV_MODULE_INDICATOR],
m4/iconv_h.m4:  gl_ICONV_H_REQUIRE_DEFAULTS
m4/iconv_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/iconv_h.m4:AC_DEFUN([gl_ICONV_H_REQUIRE_DEFAULTS],
m4/iconv_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ICONV])
m4/iconv_h.m4:  AC_REQUIRE([gl_ICONV_H_DEFAULTS])
m4/iconv_h.m4:AC_DEFUN([gl_ICONV_H_DEFAULTS],
m4/iconv_h.m4:  m4_ifdef([gl_ANSI_CXX], [AC_REQUIRE([gl_ANSI_CXX])])
m4/iconv_h.m4:  m4_ifdef([gl_POSIXCHECK],
m4/iconv_h.m4:    [if m4_ifdef([gl_ANSI_CXX], [test "$CXX" != no], [false]); then
m4/iconv_open-utf.m4:AC_DEFUN([gl_FUNC_ICONV_OPEN_UTF], [])
m4/iconv_open-utf.m4:AC_DEFUN([gl_FUNC_ICONV_OPEN_UTF_SUPPORT],
m4/iconv_open-utf.m4:  dnl This macro relies on am_cv_func_iconv and gl_func_iconv_gnu from
m4/iconv_open-utf.m4:  dnl gl_FUNC_ICONV_OPEN, but is called from within gl_FUNC_ICONV_OPEN.
m4/iconv_open-utf.m4:  dnl *Not* AC_REQUIRE([gl_FUNC_ICONV_OPEN]).
m4/iconv_open-utf.m4:  AC_REQUIRE([gl_ICONV_H_DEFAULTS])
m4/iconv_open-utf.m4:      [gl_cv_func_iconv_supports_utf],
m4/iconv_open-utf.m4:          [gl_cv_func_iconv_supports_utf=yes],
m4/iconv_open-utf.m4:          [gl_cv_func_iconv_supports_utf=no],
m4/iconv_open-utf.m4:           gl_cv_func_iconv_supports_utf="$gl_cross_guess_normal"
m4/iconv_open-utf.m4:           if test $gl_func_iconv_gnu = yes; then
m4/iconv_open-utf.m4:             gl_cv_func_iconv_supports_utf="guessing yes"
m4/iconv_open-utf.m4:               *-musl* | midipix*)           gl_cv_func_iconv_supports_utf="guessing yes" ;;
m4/iconv_open-utf.m4:               solaris2.9 | solaris2.1[0-9]) gl_cv_func_iconv_supports_utf="guessing yes" ;;
m4/iconv_open.m4:AC_DEFUN([gl_FUNC_ICONV_OPEN],
m4/iconv_open.m4:  AC_REQUIRE([gl_ICONV_H_DEFAULTS])
m4/iconv_open.m4:    gl_REPLACE_ICONV_H
m4/iconv_open.m4:      ], [gl_func_iconv_gnu=yes], [gl_func_iconv_gnu=no])
m4/iconv_open.m4:    if test $gl_func_iconv_gnu = no; then
m4/iconv_open.m4:        gl_REPLACE_ICONV_OPEN
m4/iconv_open.m4:    m4_ifdef([gl_FUNC_ICONV_OPEN_UTF_SUPPORT], [
m4/iconv_open.m4:      gl_FUNC_ICONV_OPEN_UTF_SUPPORT
m4/iconv_open.m4:      case "$gl_cv_func_iconv_supports_utf" in
m4/iconv_open.m4:          gl_REPLACE_ICONV_OPEN
m4/iconv_open.m4:AC_DEFUN([gl_REPLACE_ICONV_OPEN],
m4/iconv_open.m4:  gl_REPLACE_ICONV_H
m4/idcache.m4:AC_DEFUN([gl_IDCACHE],
m4/idpriv.m4:AC_DEFUN([gl_IDPRIV],
m4/idpriv.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ieee754-h.m4:AC_DEFUN([gl_IEEE754_H],
m4/ilogb.m4:AC_DEFUN([gl_FUNC_ILOGB],
m4/ilogb.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ilogb.m4:  gl_MATHFUNC([ilogb], [int], [(double)])
m4/ilogb.m4:  if test $gl_cv_func_ilogb_no_libm = yes \
m4/ilogb.m4:     || test $gl_cv_func_ilogb_in_libm = yes; then
m4/ilogb.m4:    gl_FUNC_ILOGB_WORKS
m4/ilogb.m4:    case "$gl_cv_func_ilogb_works" in
m4/ilogb.m4:    AC_REQUIRE([gl_FUNC_FREXP])
m4/ilogb.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/ilogb.m4:AC_DEFUN([gl_FUNC_ILOGB_WORKS],
m4/ilogb.m4:  AC_CACHE_CHECK([whether ilogb works], [gl_cv_func_ilogb_works],
m4/ilogb.m4:        [gl_cv_func_ilogb_works=yes],
m4/ilogb.m4:        [gl_cv_func_ilogb_works=no],
m4/ilogb.m4:              gl_cv_func_ilogb_works="guessing no" ;;
m4/ilogb.m4:              gl_cv_func_ilogb_works="guessing yes" ;;
m4/ilogb.m4:           *) gl_cv_func_ilogb_works="guessing yes" ;;
m4/ilogbf.m4:AC_DEFUN([gl_FUNC_ILOGBF],
m4/ilogbf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ilogbf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ilogbf.m4:  gl_MATHFUNC([ilogbf], [int], [(float)])
m4/ilogbf.m4:  if test $gl_cv_func_ilogbf_no_libm = yes \
m4/ilogbf.m4:     || test $gl_cv_func_ilogbf_in_libm = yes; then
m4/ilogbf.m4:    gl_FUNC_ILOGBF_WORKS
m4/ilogbf.m4:    case "$gl_cv_func_ilogbf_works" in
m4/ilogbf.m4:    AC_REQUIRE([gl_FUNC_FREXPF])
m4/ilogbf.m4:    AC_REQUIRE([gl_FUNC_ISNANF])
m4/ilogbf.m4:AC_DEFUN([gl_FUNC_ILOGBF_WORKS],
m4/ilogbf.m4:  AC_CACHE_CHECK([whether ilogbf works], [gl_cv_func_ilogbf_works],
m4/ilogbf.m4:        [gl_cv_func_ilogbf_works=yes],
m4/ilogbf.m4:        [gl_cv_func_ilogbf_works=no],
m4/ilogbf.m4:                              gl_cv_func_ilogbf_works="guessing no" ;;
m4/ilogbf.m4:           mingw* | windows*) gl_cv_func_ilogbf_works="guessing yes" ;;
m4/ilogbf.m4:           *)                 gl_cv_func_ilogbf_works="guessing yes" ;;
m4/ilogbl.m4:AC_DEFUN([gl_FUNC_ILOGBL],
m4/ilogbl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ilogbl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/ilogbl.m4:  AC_REQUIRE([gl_FUNC_ILOGB])
m4/ilogbl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ilogbl.m4:    [gl_cv_func_ilogbl],
m4/ilogbl.m4:        [gl_cv_func_ilogbl=yes],
m4/ilogbl.m4:        [gl_cv_func_ilogbl=no])
m4/ilogbl.m4:  if test $gl_cv_func_ilogbl = yes; then
m4/ilogbl.m4:    gl_FUNC_ILOGBL_WORKS
m4/ilogbl.m4:    case "$gl_cv_func_ilogbl_works" in
m4/ilogbl.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/ilogbl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/ilogbl.m4:AC_DEFUN([gl_FUNC_ILOGBL_WORKS],
m4/ilogbl.m4:  AC_CACHE_CHECK([whether ilogbl works], [gl_cv_func_ilogbl_works],
m4/ilogbl.m4:        [gl_cv_func_ilogbl_works=yes],
m4/ilogbl.m4:        [gl_cv_func_ilogbl_works=no],
m4/ilogbl.m4:           aix* | haiku*)     gl_cv_func_ilogbl_works="guessing no" ;;
m4/ilogbl.m4:           mingw* | windows*) gl_cv_func_ilogbl_works="guessing yes" ;;
m4/ilogbl.m4:           *)                 gl_cv_func_ilogbl_works="guessing yes" ;;
m4/imaxabs.m4:AC_DEFUN([gl_FUNC_IMAXABS],
m4/imaxabs.m4:  AC_REQUIRE([gl_INTTYPES_H_DEFAULTS])
m4/imaxabs.m4:  gl_CHECK_FUNCS_ANDROID([imaxabs], [[#include <inttypes.h>]])
m4/imaxabs.m4:    case "$gl_cv_onwards_func_imaxabs" in
m4/imaxabs.m4:AC_DEFUN([gl_PREREQ_IMAXABS], [:])
m4/imaxdiv.m4:AC_DEFUN([gl_FUNC_IMAXDIV],
m4/imaxdiv.m4:  AC_REQUIRE([gl_INTTYPES_H_DEFAULTS])
m4/imaxdiv.m4:  gl_CHECK_FUNCS_ANDROID([imaxdiv], [[#include <inttypes.h>]])
m4/imaxdiv.m4:    case "$gl_cv_onwards_func_imaxdiv" in
m4/imaxdiv.m4:    [gl_cv_type_imaxdiv_t],
m4/imaxdiv.m4:       gl_cv_type_imaxdiv_t=yes
m4/imaxdiv.m4:         [gl_cv_type_imaxdiv_t=yes],
m4/imaxdiv.m4:         [gl_cv_type_imaxdiv_t=no])
m4/imaxdiv.m4:  if test $gl_cv_type_imaxdiv_t = no; then
m4/imaxdiv.m4:AC_DEFUN([gl_PREREQ_IMAXDIV], [:])
m4/immutable.m4:AC_DEFUN([gl_IMMUTABLE],
m4/immutable.m4:  AC_REQUIRE([gl_FUNC_MPROTECT_WORKS])
m4/include_next.m4:AC_DEFUN([gl_INCLUDE_NEXT],
m4/include_next.m4:    [gl_cv_have_include_next],
m4/include_next.m4:     gl_saved_CPPFLAGS="$CPPFLAGS"
m4/include_next.m4:     CPPFLAGS="$gl_saved_CPPFLAGS -Iconftestd1b -Iconftestd2"
m4/include_next.m4:       [gl_cv_have_include_next=yes],
m4/include_next.m4:       [CPPFLAGS="$gl_saved_CPPFLAGS -Iconftestd1a -Iconftestd2"
m4/include_next.m4:          [gl_cv_have_include_next=buggy],
m4/include_next.m4:          [gl_cv_have_include_next=no])
m4/include_next.m4:     CPPFLAGS="$gl_saved_CPPFLAGS"
m4/include_next.m4:  if test $gl_cv_have_include_next = yes; then
m4/include_next.m4:    if test $gl_cv_have_include_next = buggy; then
m4/include_next.m4:    [gl_cv_source_line_length_unlimited],
m4/include_next.m4:       [gl_cv_source_line_length_unlimited=no],
m4/include_next.m4:       [gl_cv_source_line_length_unlimited=yes])
m4/include_next.m4:  if test $gl_cv_source_line_length_unlimited = no; then
m4/include_next.m4:# gl_CHECK_NEXT_HEADERS(HEADER1 HEADER2 ...)
m4/include_next.m4:AC_DEFUN([gl_CHECK_NEXT_HEADERS],
m4/include_next.m4:  gl_NEXT_HEADERS_INTERNAL([$1], [check])
m4/include_next.m4:# gl_NEXT_HEADERS(HEADER1 HEADER2 ...)
m4/include_next.m4:# Like gl_CHECK_NEXT_HEADERS, except do not check whether the headers exist.
m4/include_next.m4:AC_DEFUN([gl_NEXT_HEADERS],
m4/include_next.m4:  gl_NEXT_HEADERS_INTERNAL([$1], [assume])
m4/include_next.m4:# The guts of gl_CHECK_NEXT_HEADERS and gl_NEXT_HEADERS.
m4/include_next.m4:AC_DEFUN([gl_NEXT_HEADERS_INTERNAL],
m4/include_next.m4:  AC_REQUIRE([gl_INCLUDE_NEXT])
m4/include_next.m4:  m4_foreach_w([gl_HEADER_NAME], [$1],
m4/include_next.m4:    [AS_VAR_PUSHDEF([gl_next_header],
m4/include_next.m4:                    [gl_cv_next_]m4_defn([gl_HEADER_NAME]))
m4/include_next.m4:     if test $gl_cv_have_include_next = yes; then
m4/include_next.m4:       AS_VAR_SET([gl_next_header], ['<'gl_HEADER_NAME'>'])
m4/include_next.m4:         [absolute name of <]m4_defn([gl_HEADER_NAME])[>],
m4/include_next.m4:         [gl_next_header],
m4/include_next.m4:            [AS_VAR_PUSHDEF([gl_header_exists],
m4/include_next.m4:                            [ac_cv_header_]m4_defn([gl_HEADER_NAME]))
m4/include_next.m4:             if test AS_VAR_GET([gl_header_exists]) = yes; then
m4/include_next.m4:             AS_VAR_POPDEF([gl_header_exists])
m4/include_next.m4:          gl_ABSOLUTE_HEADER_ONE(gl_HEADER_NAME)
m4/include_next.m4:          AS_VAR_COPY([gl_header], [gl_cv_absolute_]AS_TR_SH(gl_HEADER_NAME))
m4/include_next.m4:          AS_VAR_SET([gl_next_header], ['"'$gl_header'"'])
m4/include_next.m4:               AS_VAR_SET([gl_next_header], ['<'gl_HEADER_NAME'>'])
m4/include_next.m4:       AS_TR_CPP([NEXT_]m4_defn([gl_HEADER_NAME])),
m4/include_next.m4:       [AS_VAR_GET([gl_next_header])])
m4/include_next.m4:     if test $gl_cv_have_include_next = yes || test $gl_cv_have_include_next = buggy; then
m4/include_next.m4:       gl_next_as_first_directive='<'gl_HEADER_NAME'>'
m4/include_next.m4:       gl_next_as_first_directive=AS_VAR_GET([gl_next_header])
m4/include_next.m4:       AS_TR_CPP([NEXT_AS_FIRST_DIRECTIVE_]m4_defn([gl_HEADER_NAME])),
m4/include_next.m4:       [$gl_next_as_first_directive])
m4/include_next.m4:     AS_VAR_POPDEF([gl_next_header])])
m4/inet_ntop.m4:AC_DEFUN([gl_FUNC_INET_NTOP],
m4/inet_ntop.m4:  AC_REQUIRE([gl_ARPA_INET_H_DEFAULTS])
m4/inet_ntop.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/inet_ntop.m4:  gl_PREREQ_SYS_H_WINSOCK2
m4/inet_ntop.m4:    gl_saved_LIBS=$LIBS
m4/inet_ntop.m4:    LIBS=$gl_saved_LIBS
m4/inet_ntop.m4:AC_DEFUN([gl_PREREQ_INET_NTOP], [
m4/inet_ntop.m4:  AC_REQUIRE([gl_SOCKET_FAMILIES])
m4/inet_pton.m4:AC_DEFUN([gl_FUNC_INET_PTON],
m4/inet_pton.m4:  AC_REQUIRE([gl_ARPA_INET_H_DEFAULTS])
m4/inet_pton.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/inet_pton.m4:  gl_PREREQ_SYS_H_WINSOCK2
m4/inet_pton.m4:    gl_saved_LIBS=$LIBS
m4/inet_pton.m4:    LIBS=$gl_saved_LIBS
m4/inet_pton.m4:AC_DEFUN([gl_PREREQ_INET_PTON], [
m4/inet_pton.m4:  AC_REQUIRE([gl_SOCKET_FAMILIES])
m4/init-package-version.m4:#   gl_INIT_PACKAGE(PACKAGE, $VERSION_NUMBER)
m4/init-package-version.m4:# gl_INIT_PACKAGE(PACKAGE-NAME, VERSION)
m4/init-package-version.m4:AC_DEFUN([gl_INIT_PACKAGE],
m4/init-package-version.m4:  m4_define([gl_AM_INIT_AUTOMAKE],
m4/init-package-version.m4:              [AC_PACKAGE_NAME], [gl_INIT_DUMMY])),
m4/init-package-version.m4:          [AC_PACKAGE_TARNAME], [gl_INIT_EMPTY])),
m4/init-package-version.m4:      [AC_PACKAGE_VERSION], [gl_INIT_DUMMY])
m4/init-package-version.m4:    m4_defn([gl_RPL_INIT_AUTOMAKE]))
m4/init-package-version.m4:m4_define([gl_INIT_EMPTY], [])
m4/init-package-version.m4:dnl Automake 1.16.4 no longer accepts an empty value for gl_INIT_DUMMY.
m4/init-package-version.m4:m4_define([gl_INIT_DUMMY], [gl_INIT_DUMMY2])
m4/init-package-version.m4:m4_define([gl_INIT_DUMMY2], [])
m4/init-package-version.m4:AC_DEFUN([gl_RPL_INIT_AUTOMAKE], [
m4/init-package-version.m4:    [m4_fatal([After gl_INIT_PACKAGE, the two-argument form of AM_INIT_AUTOMAKE cannot be used.])])
m4/init-package-version.m4:  gl_AM_INIT_AUTOMAKE([$1 no-define])
m4/inline.m4:AC_DEFUN([gl_INLINE],
m4/inline.m4:    [gl_cv_c_inline_effective],
m4/inline.m4:       gl_cv_c_inline_effective=no
m4/inline.m4:         [gl_cv_c_inline_effective=yes],
m4/inline.m4:         [gl_cv_c_inline_effective=no])
m4/inline.m4:  if test $gl_cv_c_inline_effective = yes; then
m4/intl-thread-locale.m4:  dnl improve the implementation of gl_locale_name_thread(), by removing
m4/intl-thread-locale.m4:  gl_CHECK_FUNCS_ANDROID([uselocale], [[#include <locale.h>]])
m4/intmax_t.m4:AC_DEFUN([gl_AC_TYPE_INTMAX_T],
m4/intmax_t.m4:  AC_REQUIRE([gl_AC_HEADER_INTTYPES_H])
m4/intmax_t.m4:  AC_REQUIRE([gl_AC_HEADER_STDINT_H])
m4/intmax_t.m4:  if test $gl_cv_header_inttypes_h = no && test $gl_cv_header_stdint_h = no; then
m4/intmax_t.m4:  AC_REQUIRE([gl_AC_HEADER_INTTYPES_H])
m4/intmax_t.m4:  AC_REQUIRE([gl_AC_HEADER_STDINT_H])
m4/inttostr.m4:AC_DEFUN([gl_INTTOSTR],
m4/inttostr.m4:  gl_PREREQ_INTTOSTR
m4/inttostr.m4:  gl_PREREQ_IMAXTOSTR
m4/inttostr.m4:  gl_PREREQ_OFFTOSTR
m4/inttostr.m4:  gl_PREREQ_UMAXTOSTR
m4/inttostr.m4:  gl_PREREQ_UINTTOSTR
m4/inttostr.m4:AC_DEFUN([gl_PREREQ_INTTOSTR], [
m4/inttostr.m4:AC_DEFUN([gl_PREREQ_IMAXTOSTR], [:])
m4/inttostr.m4:AC_DEFUN([gl_PREREQ_OFFTOSTR], [:])
m4/inttostr.m4:AC_DEFUN([gl_PREREQ_UMAXTOSTR], [:])
m4/inttostr.m4:AC_DEFUN([gl_PREREQ_UINTTOSTR], [:])
m4/inttypes.m4:AC_DEFUN_ONCE([gl_INTTYPES_H],
m4/inttypes.m4:  AC_REQUIRE([gl_INTTYPES_INCOMPLETE])
m4/inttypes.m4:  gl_INTTYPES_PRI_SCN
m4/inttypes.m4:AC_DEFUN_ONCE([gl_INTTYPES_INCOMPLETE],
m4/inttypes.m4:  AC_REQUIRE([gl_STDINT_H])
m4/inttypes.m4:  AC_REQUIRE([gl_INTTYPES_H_DEFAULTS])
m4/inttypes.m4:  gl_CHECK_NEXT_HEADERS([inttypes.h])
m4/inttypes.m4:  AC_REQUIRE([gl_MULTIARCH])
m4/inttypes.m4:  gl_WARN_ON_USE_PREPARE([[#include <inttypes.h>
m4/inttypes.m4:AC_DEFUN([gl_INTTYPES_PRI_SCN],
m4/inttypes.m4:  gl_INTTYPES_CHECK_LONG_LONG_INT_CONDITION(
m4/inttypes.m4:    gl_INTTYPES_CHECK_LONG_LONG_INT_CONDITION(
m4/inttypes.m4:  gl_INTTYPES_CHECK_LONG_LONG_INT_CONDITION(
m4/inttypes.m4:    gl_INTTYPES_CHECK_LONG_LONG_INT_CONDITION(
m4/inttypes.m4:AC_DEFUN([gl_INTTYPES_CHECK_LONG_LONG_INT_CONDITION],
m4/inttypes.m4:    [gl_cv_test_$1],
m4/inttypes.m4:       [gl_cv_test_$1=yes],
m4/inttypes.m4:       [gl_cv_test_$1=no])])
m4/inttypes.m4:  if test $gl_cv_test_$1 = yes; then
m4/inttypes.m4:# gl_INTTYPES_MODULE_INDICATOR([modulename])
m4/inttypes.m4:AC_DEFUN([gl_INTTYPES_MODULE_INDICATOR],
m4/inttypes.m4:  gl_INTTYPES_H_REQUIRE_DEFAULTS
m4/inttypes.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/inttypes.m4:AC_DEFUN([gl_INTTYPES_H_REQUIRE_DEFAULTS],
m4/inttypes.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_IMAXABS])
m4/inttypes.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_IMAXDIV])
m4/inttypes.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOIMAX])
m4/inttypes.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOUMAX])
m4/inttypes.m4:  AC_REQUIRE([gl_INTTYPES_H_DEFAULTS])
m4/inttypes.m4:AC_DEFUN([gl_INTTYPES_H_DEFAULTS],
m4/inttypes_h.m4:AC_DEFUN([gl_AC_HEADER_INTTYPES_H],
m4/inttypes_h.m4:  AC_CACHE_CHECK([for inttypes.h], [gl_cv_header_inttypes_h],
m4/inttypes_h.m4:       [gl_cv_header_inttypes_h=yes],
m4/inttypes_h.m4:       [gl_cv_header_inttypes_h=no])])
m4/inttypes_h.m4:  if test $gl_cv_header_inttypes_h = yes; then
m4/ioctl.m4:AC_DEFUN([gl_FUNC_IOCTL],
m4/ioctl.m4:  AC_REQUIRE([gl_SYS_IOCTL_H_DEFAULTS])
m4/ioctl.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])
m4/ioctl.m4:      [gl_cv_func_ioctl_posix_signature],
m4/ioctl.m4:         [gl_cv_func_ioctl_posix_signature=yes],
m4/ioctl.m4:         [gl_cv_func_ioctl_posix_signature=no])
m4/ioctl.m4:    if test $gl_cv_func_ioctl_posix_signature != yes; then
m4/isapipe.m4:AC_DEFUN([gl_ISAPIPE],
m4/isapipe.m4:AC_DEFUN([gl_PREREQ_ISAPIPE],
m4/isapipe.m4:    [gl_cv_pipes_are_fifos],
m4/isapipe.m4:       [gl_cv_pipes_are_fifos=`./conftest$ac_exeext -`
m4/isapipe.m4:        test -z "$gl_cv_pipes_are_fifos" && gl_cv_pipes_are_fifos=no],
m4/isapipe.m4:       [gl_cv_pipes_are_fifos=unknown],
m4/isapipe.m4:       [gl_cv_pipes_are_fifos=cross-compiling])])
m4/isapipe.m4:  case $gl_cv_pipes_are_fifos in #(
m4/isapipe.m4:  case $gl_cv_pipes_are_fifos in #(
m4/isapipe.m4:      [`expr "$gl_cv_pipes_are_fifos" : '.*\((.*)\)'`],
m4/isatty.m4:AC_DEFUN([gl_FUNC_ISATTY],
m4/isatty.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/isatty.m4:AC_DEFUN([gl_PREREQ_ISATTY], [:])
m4/isblank.m4:AC_DEFUN([gl_FUNC_ISBLANK],
m4/isblank.m4:  AC_REQUIRE([gl_CTYPE_H_DEFAULTS])
m4/isfinite.m4:AC_DEFUN([gl_ISFINITE],
m4/isfinite.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/isfinite.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/isfinite.m4:    gl_CHECK_MATH_LIB([ISFINITE_LIBM], [double],
m4/isfinite.m4:      gl_ISFINITEL_WORKS
m4/isfinite.m4:      case "$gl_cv_func_isfinitel_works" in
m4/isfinite.m4:AC_DEFUN([gl_ISFINITEL_WORKS],
m4/isfinite.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/isfinite.m4:  AC_REQUIRE([gl_LONG_DOUBLE_EXPONENT_LOCATION])
m4/isfinite.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/isfinite.m4:  AC_CACHE_CHECK([whether isfinite(long double) works], [gl_cv_func_isfinitel_works],
m4/isfinite.m4:      [gl_cv_func_isfinitel_works=yes],
m4/isfinite.m4:      [gl_cv_func_isfinitel_works=no],
m4/isfinite.m4:         mingw* | windows*) gl_cv_func_isfinitel_works="guessing no" ;;
m4/isfinite.m4:         *)                 gl_cv_func_isfinitel_works="guessing yes" ;;
m4/isinf.m4:AC_DEFUN([gl_ISINF],
m4/isinf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/isinf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/isinf.m4:    gl_CHECK_MATH_LIB([ISINF_LIBM], [double],
m4/isinf.m4:      gl_ISINFL_WORKS
m4/isinf.m4:      case "$gl_cv_func_isinfl_works" in
m4/isinf.m4:AC_DEFUN([gl_ISINFL_WORKS],
m4/isinf.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/isinf.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/isinf.m4:  AC_CACHE_CHECK([whether isinf(long double) works], [gl_cv_func_isinfl_works],
m4/isinf.m4:      [gl_cv_func_isinfl_works=yes],
m4/isinf.m4:      [gl_cv_func_isinfl_works=no],
m4/isinf.m4:             [gl_cv_func_isinfl_works="guessing yes"],
m4/isinf.m4:             [gl_cv_func_isinfl_works="guessing no"])
m4/isinf.m4:           gl_cv_func_isinfl_works="guessing yes"
m4/isnan.m4:AC_DEFUN([gl_ISNAN],
m4/isnan.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/isnan.m4:  AC_REQUIRE([gl_FUNC_ISNANF])
m4/isnan.m4:  AC_REQUIRE([gl_FUNC_ISNAND])
m4/isnan.m4:  AC_REQUIRE([gl_FUNC_ISNANL])
m4/isnan.m4:  if test $gl_func_isnanf = yes \
m4/isnan.m4:     && test $gl_func_isnand = yes \
m4/isnan.m4:     && test $gl_func_isnanl = yes; then
m4/isnand.m4:AC_DEFUN_ONCE([gl_FUNC_ISNAND],
m4/isnand.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/isnand.m4:  gl_HAVE_ISNAND_NO_LIBM
m4/isnand.m4:  if test $gl_cv_func_isnand_no_libm = no; then
m4/isnand.m4:    gl_HAVE_ISNAND_IN_LIBM
m4/isnand.m4:    if test $gl_cv_func_isnand_in_libm = yes; then
m4/isnand.m4:  dnl The variable gl_func_isnand set here is used by isnan.m4.
m4/isnand.m4:  if test $gl_cv_func_isnand_no_libm = yes || test -n "$ISNAND_LIBM"; then
m4/isnand.m4:    gl_func_isnand=yes
m4/isnand.m4:    gl_func_isnand=no
m4/isnand.m4:AC_DEFUN([gl_FUNC_ISNAND_NO_LIBM],
m4/isnand.m4:  gl_HAVE_ISNAND_NO_LIBM
m4/isnand.m4:  gl_func_isnand_no_libm=$gl_cv_func_isnand_no_libm
m4/isnand.m4:  if test $gl_cv_func_isnand_no_libm = yes; then
m4/isnand.m4:AC_DEFUN([gl_PREREQ_ISNAND],
m4/isnand.m4:  AC_REQUIRE([gl_DOUBLE_EXPONENT_LOCATION])
m4/isnand.m4:AC_DEFUN([gl_HAVE_ISNAND_IN_LIBM],
m4/isnand.m4:    [gl_cv_func_isnand_in_libm],
m4/isnand.m4:        [gl_cv_func_isnand_in_libm=yes],
m4/isnand.m4:        [gl_cv_func_isnand_in_libm=no])
m4/isnand.m4:AC_DEFUN([gl_HAVE_ISNAND_NO_LIBM],
m4/isnand.m4:    [gl_cv_func_isnand_no_libm],
m4/isnand.m4:        [gl_cv_func_isnand_no_libm=yes],
m4/isnand.m4:        [gl_cv_func_isnand_no_libm=no])
m4/isnanf.m4:AC_DEFUN([gl_FUNC_ISNANF],
m4/isnanf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/isnanf.m4:  gl_HAVE_ISNANF_NO_LIBM
m4/isnanf.m4:  if test $gl_cv_func_isnanf_no_libm = no; then
m4/isnanf.m4:    gl_HAVE_ISNANF_IN_LIBM
m4/isnanf.m4:    if test $gl_cv_func_isnanf_in_libm = yes; then
m4/isnanf.m4:  dnl The variable gl_func_isnanf set here is used by isnan.m4.
m4/isnanf.m4:  if test $gl_cv_func_isnanf_no_libm = yes || test -n "$ISNANF_LIBM"; then
m4/isnanf.m4:    gl_ISNANF_WORKS
m4/isnanf.m4:    case "$gl_cv_func_isnanf_works" in
m4/isnanf.m4:      *yes) gl_func_isnanf=yes ;;
m4/isnanf.m4:      *)    gl_func_isnanf=no; ISNANF_LIBM= ;;
m4/isnanf.m4:    gl_func_isnanf=no
m4/isnanf.m4:  if test $gl_func_isnanf != yes; then
m4/isnanf.m4:AC_DEFUN([gl_FUNC_ISNANF_NO_LIBM],
m4/isnanf.m4:  gl_HAVE_ISNANF_NO_LIBM
m4/isnanf.m4:  if test $gl_cv_func_isnanf_no_libm = yes; then
m4/isnanf.m4:    gl_ISNANF_WORKS
m4/isnanf.m4:  if test $gl_cv_func_isnanf_no_libm = yes \
m4/isnanf.m4:     && { case "$gl_cv_func_isnanf_works" in
m4/isnanf.m4:    gl_func_isnanf_no_libm=yes
m4/isnanf.m4:    gl_func_isnanf_no_libm=no
m4/isnanf.m4:AC_DEFUN([gl_PREREQ_ISNANF],
m4/isnanf.m4:  gl_FLOAT_EXPONENT_LOCATION
m4/isnanf.m4:AC_DEFUN([gl_HAVE_ISNANF_NO_LIBM],
m4/isnanf.m4:    [gl_cv_func_isnanf_no_libm],
m4/isnanf.m4:        [gl_cv_func_isnanf_no_libm=yes],
m4/isnanf.m4:        [gl_cv_func_isnanf_no_libm=no])
m4/isnanf.m4:AC_DEFUN([gl_HAVE_ISNANF_IN_LIBM],
m4/isnanf.m4:    [gl_cv_func_isnanf_in_libm],
m4/isnanf.m4:        [gl_cv_func_isnanf_in_libm=yes],
m4/isnanf.m4:        [gl_cv_func_isnanf_in_libm=no])
m4/isnanf.m4:AC_DEFUN([gl_ISNANF_WORKS],
m4/isnanf.m4:  AC_REQUIRE([gl_FLOAT_EXPONENT_LOCATION])
m4/isnanf.m4:  AC_CACHE_CHECK([whether isnan(float) works], [gl_cv_func_isnanf_works],
m4/isnanf.m4:        [gl_cv_func_isnanf_works=yes],
m4/isnanf.m4:        [gl_cv_func_isnanf_works=no],
m4/isnanf.m4:           irix* | solaris*) gl_cv_func_isnanf_works="guessing no" ;;
m4/isnanf.m4:               [gl_cv_func_isnanf_works="guessing yes"],
m4/isnanf.m4:               [gl_cv_func_isnanf_works="guessing no"])
m4/isnanf.m4:           *) gl_cv_func_isnanf_works="guessing yes" ;;
m4/isnanl.m4:AC_DEFUN_ONCE([gl_FUNC_ISNANL],
m4/isnanl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/isnanl.m4:  gl_HAVE_ISNANL_NO_LIBM
m4/isnanl.m4:  if test $gl_cv_func_isnanl_no_libm = no; then
m4/isnanl.m4:    gl_HAVE_ISNANL_IN_LIBM
m4/isnanl.m4:    if test $gl_cv_func_isnanl_in_libm = yes; then
m4/isnanl.m4:  dnl The variable gl_func_isnanl set here is used by isnan.m4.
m4/isnanl.m4:  if test $gl_cv_func_isnanl_no_libm = yes || test -n "$ISNANL_LIBM"; then
m4/isnanl.m4:    gl_FUNC_ISNANL_WORKS
m4/isnanl.m4:    case "$gl_cv_func_isnanl_works" in
m4/isnanl.m4:      *yes) gl_func_isnanl=yes ;;
m4/isnanl.m4:      *)    gl_func_isnanl=no; ISNANL_LIBM= ;;
m4/isnanl.m4:    gl_func_isnanl=no
m4/isnanl.m4:  if test $gl_func_isnanl != yes; then
m4/isnanl.m4:AC_DEFUN([gl_FUNC_ISNANL_NO_LIBM],
m4/isnanl.m4:  gl_HAVE_ISNANL_NO_LIBM
m4/isnanl.m4:  gl_func_isnanl_no_libm=$gl_cv_func_isnanl_no_libm
m4/isnanl.m4:  if test $gl_func_isnanl_no_libm = yes; then
m4/isnanl.m4:    gl_FUNC_ISNANL_WORKS
m4/isnanl.m4:    case "$gl_cv_func_isnanl_works" in
m4/isnanl.m4:      *)    gl_func_isnanl_no_libm=no ;;
m4/isnanl.m4:  if test $gl_func_isnanl_no_libm = yes; then
m4/isnanl.m4:AC_DEFUN([gl_PREREQ_ISNANL],
m4/isnanl.m4:  gl_LONG_DOUBLE_EXPONENT_LOCATION
m4/isnanl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/isnanl.m4:AC_DEFUN([gl_HAVE_ISNANL_NO_LIBM],
m4/isnanl.m4:    [gl_cv_func_isnanl_no_libm],
m4/isnanl.m4:        [gl_cv_func_isnanl_no_libm=yes],
m4/isnanl.m4:        [gl_cv_func_isnanl_no_libm=no])
m4/isnanl.m4:AC_DEFUN([gl_HAVE_ISNANL_IN_LIBM],
m4/isnanl.m4:    [gl_cv_func_isnanl_in_libm],
m4/isnanl.m4:        [gl_cv_func_isnanl_in_libm=yes],
m4/isnanl.m4:        [gl_cv_func_isnanl_in_libm=no])
m4/isnanl.m4:AC_DEFUN([gl_FUNC_ISNANL_WORKS],
m4/isnanl.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/isnanl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/isnanl.m4:  AC_CACHE_CHECK([whether isnanl works], [gl_cv_func_isnanl_works],
m4/isnanl.m4:        [gl_cv_func_isnanl_works=yes],
m4/isnanl.m4:        [gl_cv_func_isnanl_works=no],
m4/isnanl.m4:               [gl_cv_func_isnanl_works="guessing yes"],
m4/isnanl.m4:               [gl_cv_func_isnanl_works="guessing no"])
m4/isnanl.m4:           *) gl_cv_func_isnanl_works="guessing yes" ;;
m4/iswblank.m4:AC_DEFUN([gl_FUNC_ISWBLANK],
m4/iswblank.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/iswblank.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/iswblank.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/iswblank.m4:  gl_CHECK_FUNCS_ANDROID([iswblank], [[#include <wctype.h>]])
m4/iswblank.m4:       || case "$gl_cv_onwards_func_iswblank" in \
m4/iswctype.m4:AC_DEFUN([gl_FUNC_ISWCTYPE],
m4/iswctype.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/iswctype.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/iswctype.m4:  AC_REQUIRE([gl_FUNC_WCTYPE])
m4/iswdigit.m4:AC_DEFUN([gl_FUNC_ISWDIGIT],
m4/iswdigit.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/iswdigit.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/iswdigit.m4:      [gl_cv_func_iswdigit_works],
m4/iswdigit.m4:           gl_cv_func_iswdigit_works="guessing no" ;;
m4/iswdigit.m4:         *) gl_cv_func_iswdigit_works="guessing yes" ;;
m4/iswdigit.m4:           [gl_cv_func_iswdigit_works=yes],
m4/iswdigit.m4:           [gl_cv_func_iswdigit_works=no],
m4/iswdigit.m4:    case "$gl_cv_func_iswdigit_works" in
m4/iswpunct.m4:AC_DEFUN([gl_FUNC_ISWPUNCT],
m4/iswpunct.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/iswpunct.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/iswpunct.m4:      [gl_cv_func_iswpunct_works],
m4/iswpunct.m4:         [gl_cv_func_iswpunct_works=yes],
m4/iswpunct.m4:         [gl_cv_func_iswpunct_works=no],
m4/iswpunct.m4:            android*) gl_cv_func_iswpunct_works="guessing no" ;;
m4/iswpunct.m4:            *)        gl_cv_func_iswpunct_works="guessing yes" ;;
m4/iswpunct.m4:    case "$gl_cv_func_iswpunct_works" in
m4/iswxdigit.m4:AC_DEFUN([gl_FUNC_ISWXDIGIT],
m4/iswxdigit.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/iswxdigit.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/iswxdigit.m4:      [gl_cv_func_iswxdigit_works],
m4/iswxdigit.m4:           gl_cv_func_iswxdigit_works="guessing no" ;;
m4/iswxdigit.m4:         *) gl_cv_func_iswxdigit_works="guessing yes" ;;
m4/iswxdigit.m4:           [gl_cv_func_iswxdigit_works=yes],
m4/iswxdigit.m4:           [gl_cv_func_iswxdigit_works=no],
m4/iswxdigit.m4:    case "$gl_cv_func_iswxdigit_works" in
m4/jm-winsz1.m4:AC_DEFUN([gl_HEADER_TIOCGWINSZ_IN_TERMIOS_H],
m4/jm-winsz1.m4:                [gl_cv_sys_tiocgwinsz_needs_termios_h],
m4/jm-winsz1.m4:  [gl_cv_sys_tiocgwinsz_needs_termios_h=no
m4/jm-winsz1.m4:     ], [gl_cv_sys_tiocgwinsz_needs_termios_h=yes])
m4/jm-winsz1.m4:AC_DEFUN([gl_WINSIZE_IN_PTEM],
m4/jm-winsz1.m4:     [gl_cv_sys_struct_winsize_needs_sys_ptem_h],
m4/jm-winsz1.m4:     [gl_cv_sys_struct_winsize_needs_sys_ptem_h=yes
m4/jm-winsz1.m4:          [gl_cv_sys_struct_winsize_needs_sys_ptem_h=no])
m4/jm-winsz1.m4:      if test $gl_cv_sys_struct_winsize_needs_sys_ptem_h = yes; then
m4/jm-winsz1.m4:          [], [gl_cv_sys_struct_winsize_needs_sys_ptem_h=no])
m4/jm-winsz1.m4:   if test $gl_cv_sys_struct_winsize_needs_sys_ptem_h = yes; then
m4/jm-winsz2.m4:AC_DEFUN([gl_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL],
m4/jm-winsz2.m4:[AC_REQUIRE([gl_HEADER_TIOCGWINSZ_IN_TERMIOS_H])
m4/jm-winsz2.m4:                [gl_cv_sys_tiocgwinsz_needs_sys_ioctl_h],
m4/jm-winsz2.m4:  [gl_cv_sys_tiocgwinsz_needs_sys_ioctl_h=no
m4/jm-winsz2.m4:   if test $gl_cv_sys_tiocgwinsz_needs_termios_h = no; then
m4/jm-winsz2.m4:       ], [gl_cv_sys_tiocgwinsz_needs_sys_ioctl_h=yes])
m4/jm-winsz2.m4:  if test $gl_cv_sys_tiocgwinsz_needs_sys_ioctl_h = yes; then
m4/langinfo_h.m4:AC_DEFUN_ONCE([gl_LANGINFO_H],
m4/langinfo_h.m4:  AC_REQUIRE([gl_LANGINFO_H_DEFAULTS])
m4/langinfo_h.m4:  gl_CHECK_NEXT_HEADERS([langinfo.h])
m4/langinfo_h.m4:      [gl_cv_header_langinfo_codeset],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_codeset=yes],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_codeset=no])
m4/langinfo_h.m4:    if test $gl_cv_header_langinfo_codeset = yes; then
m4/langinfo_h.m4:      [gl_cv_header_langinfo_t_fmt_ampm],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_t_fmt_ampm=yes],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_t_fmt_ampm=no])
m4/langinfo_h.m4:    if test $gl_cv_header_langinfo_t_fmt_ampm = yes; then
m4/langinfo_h.m4:      [gl_cv_header_langinfo_altmon],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_altmon=yes],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_altmon=no])
m4/langinfo_h.m4:    if test $gl_cv_header_langinfo_altmon = yes; then
m4/langinfo_h.m4:      [gl_cv_header_langinfo_era],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_era=yes],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_era=no])
m4/langinfo_h.m4:    if test $gl_cv_header_langinfo_era = yes; then
m4/langinfo_h.m4:      [gl_cv_header_langinfo_yesexpr],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_yesexpr=yes],
m4/langinfo_h.m4:         [gl_cv_header_langinfo_yesexpr=no])
m4/langinfo_h.m4:    if test $gl_cv_header_langinfo_yesexpr = yes; then
m4/langinfo_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <langinfo.h>
m4/langinfo_h.m4:# gl_LANGINFO_MODULE_INDICATOR([modulename])
m4/langinfo_h.m4:AC_DEFUN([gl_LANGINFO_MODULE_INDICATOR],
m4/langinfo_h.m4:  gl_LANGINFO_H_REQUIRE_DEFAULTS
m4/langinfo_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/langinfo_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/langinfo_h.m4:AC_DEFUN([gl_LANGINFO_H_REQUIRE_DEFAULTS],
m4/langinfo_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_NL_LANGINFO])
m4/langinfo_h.m4:  AC_REQUIRE([gl_LANGINFO_H_DEFAULTS])
m4/langinfo_h.m4:AC_DEFUN([gl_LANGINFO_H_DEFAULTS],
m4/largefile.m4:AC_DEFUN([gl_SET_LARGEFILE_SOURCE],
m4/largefile.m4:  m4_ifdef([gl_LARGEFILE], [
m4/largefile.m4:AC_DEFUN([gl_LARGEFILE],
m4/largefile.m4:      AC_CACHE_CHECK([for 64-bit off_t], [gl_cv_type_off_t_64],
m4/largefile.m4:           [gl_cv_type_off_t_64=yes], [gl_cv_type_off_t_64=no])
m4/largefile.m4:      if test $gl_cv_type_off_t_64 = no; then
m4/largefile.m4:      AC_CACHE_CHECK([for 64-bit st_size], [gl_cv_member_st_size_64],
m4/largefile.m4:           [gl_cv_member_st_size_64=yes], [gl_cv_member_st_size_64=no])
m4/largefile.m4:      if test $gl_cv_member_st_size_64 = no; then
m4/lchmod.m4:AC_DEFUN([gl_FUNC_LCHMOD],
m4/lchmod.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/lchmod.m4:AC_DEFUN([gl_PREREQ_LCHMOD],
m4/lchown.m4:AC_DEFUN([gl_FUNC_LCHOWN],
m4/lchown.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/lchown.m4:  AC_REQUIRE([gl_FUNC_CHOWN])
m4/lchown.m4:    case "$gl_cv_func_chown_slash_works" in
m4/lchown.m4:    case "$gl_cv_func_chown_ctime_works" in
m4/ld-output-def.m4:# gl_LD_OUTPUT_DEF()
m4/ld-output-def.m4:AC_DEFUN([gl_LD_OUTPUT_DEF],
m4/ld-output-def.m4:    [gl_cv_ld_output_def],
m4/ld-output-def.m4:       gl_cv_ld_output_def="not needed, shared libraries are disabled"
m4/ld-output-def.m4:       gl_ldflags_save=$LDFLAGS
m4/ld-output-def.m4:                   [gl_cv_ld_output_def=yes],
m4/ld-output-def.m4:                   [gl_cv_ld_output_def=no])
m4/ld-output-def.m4:       LDFLAGS="$gl_ldflags_save"
m4/ld-output-def.m4:  AM_CONDITIONAL([HAVE_LD_OUTPUT_DEF], test "x$gl_cv_ld_output_def" = "xyes")
m4/ld-version-script.m4:# gl_LD_VERSION_SCRIPT
m4/ld-version-script.m4:AC_DEFUN([gl_LD_VERSION_SCRIPT],
m4/ld-version-script.m4:       [gl_cv_sys_ld_version_script],
m4/ld-version-script.m4:       [gl_cv_sys_ld_version_script=no
m4/ld-version-script.m4:             [gl_cv_sys_ld_version_script=yes])])
m4/ld-version-script.m4:     have_ld_version_script=$gl_cv_sys_ld_version_script])
m4/ldd.m4:AC_DEFUN([gl_LDD],
m4/ldexp.m4:AC_DEFUN([gl_FUNC_LDEXP],
m4/ldexp.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ldexp.m4:  AC_REQUIRE([gl_FUNC_ISNAND]) dnl for ISNAND_LIBM
m4/ldexp.m4:  AC_REQUIRE([gl_CHECK_LDEXP_NO_LIBM])
m4/ldexp.m4:  if test $gl_cv_func_ldexp_no_libm = no; then
m4/ldexp.m4:      [gl_cv_func_ldexp_in_libm],
m4/ldexp.m4:          [gl_cv_func_ldexp_in_libm=yes],
m4/ldexp.m4:          [gl_cv_func_ldexp_in_libm=no])
m4/ldexp.m4:    if test $gl_cv_func_ldexp_in_libm = yes; then
m4/ldexp.m4:  gl_FUNC_LDEXP_WORKS
m4/ldexp.m4:  case "$gl_cv_func_ldexp_works" in
m4/ldexp.m4:dnl Set gl_cv_func_ldexp_no_libm to 'yes' or 'no' accordingly.
m4/ldexp.m4:AC_DEFUN([gl_CHECK_LDEXP_NO_LIBM],
m4/ldexp.m4:    [gl_cv_func_ldexp_no_libm],
m4/ldexp.m4:        [gl_cv_func_ldexp_no_libm=yes],
m4/ldexp.m4:        [gl_cv_func_ldexp_no_libm=no])
m4/ldexp.m4:AC_DEFUN([gl_FUNC_LDEXP_WORKS],
m4/ldexp.m4:  AC_CACHE_CHECK([whether ldexp works], [gl_cv_func_ldexp_works],
m4/ldexp.m4:        [gl_cv_func_ldexp_works=yes],
m4/ldexp.m4:        [gl_cv_func_ldexp_works=no],
m4/ldexp.m4:           openbsd*)          gl_cv_func_ldexp_works="guessing no" ;;
m4/ldexp.m4:           mingw* | windows*) gl_cv_func_ldexp_works="guessing yes" ;;
m4/ldexp.m4:           *)                 gl_cv_func_ldexp_works="guessing yes" ;;
m4/ldexpf.m4:AC_DEFUN([gl_FUNC_LDEXPF],
m4/ldexpf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ldexpf.m4:  AC_REQUIRE([gl_FUNC_LDEXP])
m4/ldexpf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ldexpf.m4:  gl_MATHFUNC([ldexpf], [float], [(float, int)])
m4/ldexpf.m4:  if test $gl_cv_func_ldexpf_no_libm = no \
m4/ldexpf.m4:     && test $gl_cv_func_ldexpf_in_libm = no; then
m4/ldexpf.m4:dnl Set gl_cv_func_ldexpf_no_libm to 'yes' or 'no' accordingly.
m4/ldexpf.m4:AC_DEFUN([gl_CHECK_LDEXPF_NO_LIBM],
m4/ldexpf.m4:    [gl_cv_func_ldexpf_no_libm],
m4/ldexpf.m4:        [gl_cv_func_ldexpf_no_libm=yes],
m4/ldexpf.m4:        [gl_cv_func_ldexpf_no_libm=no])
m4/ldexpl.m4:AC_DEFUN([gl_FUNC_LDEXPL],
m4/ldexpl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/ldexpl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/ldexpl.m4:  AC_REQUIRE([gl_FUNC_ISNANL]) dnl for ISNANL_LIBM
m4/ldexpl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ldexpl.m4:    gl_CHECK_LDEXPL_NO_LIBM
m4/ldexpl.m4:    if test $gl_cv_func_ldexpl_no_libm = no; then
m4/ldexpl.m4:        [gl_cv_func_ldexpl_in_libm],
m4/ldexpl.m4:            [gl_cv_func_ldexpl_in_libm=yes],
m4/ldexpl.m4:            [gl_cv_func_ldexpl_in_libm=no])
m4/ldexpl.m4:      if test $gl_cv_func_ldexpl_in_libm = yes; then
m4/ldexpl.m4:    if test $gl_cv_func_ldexpl_no_libm = yes \
m4/ldexpl.m4:       || test $gl_cv_func_ldexpl_in_libm = yes; then
m4/ldexpl.m4:      gl_FUNC_LDEXPL_WORKS
m4/ldexpl.m4:      case "$gl_cv_func_ldexpl_works" in
m4/ldexpl.m4:        *yes) gl_func_ldexpl=yes ;;
m4/ldexpl.m4:        *)    gl_func_ldexpl=no; REPLACE_LDEXPL=1 ;;
m4/ldexpl.m4:      gl_func_ldexpl=no
m4/ldexpl.m4:    if test $gl_func_ldexpl = yes; then
m4/ldexpl.m4:  if test $HAVE_DECL_LDEXPL = 0 || test $gl_func_ldexpl = no; then
m4/ldexpl.m4:      AC_REQUIRE([gl_FUNC_LDEXP])
m4/ldexpl.m4:dnl Set gl_cv_func_ldexpl_no_libm to 'yes' or 'no' accordingly.
m4/ldexpl.m4:AC_DEFUN([gl_CHECK_LDEXPL_NO_LIBM],
m4/ldexpl.m4:    [gl_cv_func_ldexpl_no_libm],
m4/ldexpl.m4:        [gl_cv_func_ldexpl_no_libm=yes],
m4/ldexpl.m4:        [gl_cv_func_ldexpl_no_libm=no])
m4/ldexpl.m4:AC_DEFUN([gl_FUNC_LDEXPL_WORKS],
m4/ldexpl.m4:  AC_CACHE_CHECK([whether ldexpl works], [gl_cv_func_ldexpl_works],
m4/ldexpl.m4:        [gl_cv_func_ldexpl_works=yes],
m4/ldexpl.m4:        [gl_cv_func_ldexpl_works=no],
m4/ldexpl.m4:           aix | aix[3-6]*)   gl_cv_func_ldexpl_works="guessing no" ;;
m4/ldexpl.m4:           mingw* | windows*) gl_cv_func_ldexpl_works="guessing yes" ;;
m4/ldexpl.m4:           *)                 gl_cv_func_ldexpl_works="guessing yes" ;;
m4/lib-ignore.m4:# gl_IGNORE_UNUSED_LIBRARIES
m4/lib-ignore.m4:AC_DEFUN([gl_IGNORE_UNUSED_LIBRARIES],
m4/lib-ignore.m4:    [gl_cv_prog_[]_AC_LANG_ABBREV[]_ignore_unused_libraries],
m4/lib-ignore.m4:    [gl_cv_prog_[]_AC_LANG_ABBREV[]_ignore_unused_libraries=none
m4/lib-ignore.m4:     gl_saved_ldflags=$LDFLAGS
m4/lib-ignore.m4:     gl_saved_libs=$LIBS
m4/lib-ignore.m4:     for gl_flags in _gl_IGNORE_UNUSED_LIBRARIES_OPTIONS
m4/lib-ignore.m4:       LDFLAGS="$gl_flags $LDFLAGS"
m4/lib-ignore.m4:         [gl_cv_prog_[]_AC_LANG_ABBREV[]_ignore_unused_libraries=$gl_flags])
m4/lib-ignore.m4:       LDFLAGS=$gl_saved_ldflags
m4/lib-ignore.m4:       test "$gl_cv_prog_[]_AC_LANG_ABBREV[]_ignore_unused_libraries" != none &&
m4/lib-ignore.m4:     LIBS=$gl_saved_libs
m4/lib-ignore.m4:  if test "$gl_cv_prog_[]_AC_LANG_ABBREV[]_ignore_unused_libraries" != none; then
m4/lib-ignore.m4:    IGNORE_UNUSED_LIBRARIES_[]_AC_LANG_PREFIX[]FLAGS="$gl_cv_prog_[]_AC_LANG_ABBREV[]_ignore_unused_libraries"
m4/lib-ignore.m4:# _gl_IGNORE_UNUSED_LIBRARIES_OPTIONS
m4/lib-ignore.m4:AC_DEFUN([_gl_IGNORE_UNUSED_LIBRARIES_OPTIONS],
m4/lib-ignore.m4:# _gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(C)
m4/lib-ignore.m4:m4_define([_gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(C)],
m4/lib-ignore.m4:# _gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(C++)
m4/lib-ignore.m4:m4_define([_gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(C++)],
m4/lib-ignore.m4:# _gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(Fortran 77)
m4/lib-ignore.m4:m4_copy([_gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(C++)],
m4/lib-ignore.m4:        [_gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(Fortran 77)])
m4/lib-ignore.m4:# _gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(Fortran)
m4/lib-ignore.m4:m4_copy([_gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(Fortran 77)],
m4/lib-ignore.m4:        [_gl_IGNORE_UNUSED_LIBRARIES_OPTIONS(Fortran)])
m4/lib-prefix.m4:  AC_REQUIRE([gl_HOST_CPU_C_ABI_32BIT])
m4/lib-prefix.m4:  AC_CACHE_CHECK([for ELF binary format], [gl_cv_elf],
m4/lib-prefix.m4:       [gl_cv_elf=yes],
m4/lib-prefix.m4:       [gl_cv_elf=no])
m4/lib-prefix.m4:  if test $gl_cv_elf = yes; then
m4/libgmp.m4:dnl gl_LIBGMP
m4/libgmp.m4:AC_DEFUN([gl_LIBGMP],
m4/libgmp.m4:       [m4_ifdef([gl_HAVE_MODULE_HAVELIB],
m4/libgmp.m4:          [gl_saved_LIBS=$LIBS
m4/libgmp.m4:           LIBS=$gl_saved_LIBS
m4/libgmp.m4:  gl_CONDITIONAL([GL_GENERATE_MINI_GMP_H],
m4/libgmp.m4:  gl_CONDITIONAL([GL_GENERATE_GMP_GMP_H],
m4/libsigsegv.m4:AC_DEFUN([gl_LIBSIGSEGV],
m4/libsigsegv.m4:  gl_cv_lib_sigsegv="$ac_cv_libsigsegv"
m4/libtextstyle-optional.m4:dnl gl_LIBTEXTSTYLE_OPTIONAL([MINIMUM-VERSION])
m4/libtextstyle-optional.m4:AC_DEFUN([gl_LIBTEXTSTYLE_OPTIONAL],
m4/libtextstyle-optional.m4:  gl_LIBTEXTSTYLE([$1])
m4/libtextstyle-optional.m4:    gl_CHECK_FUNCS_ANDROID([tcdrain], [[#include <termios.h>]])
m4/libtextstyle-optional.m4:  dnl In most modules, the gl_CONDITIONAL_HEADER invocation belongs in the
m4/libtextstyle-optional.m4:  dnl not make sense to AC_REQUIRE([gl_LIBTEXTSTYLE_OPTIONAL]).
m4/libtextstyle-optional.m4:  gl_CONDITIONAL_HEADER([textstyle.h])
m4/libtextstyle.m4:dnl gl_LIBTEXTSTYLE([MINIMUM-VERSION])
m4/libtextstyle.m4:AC_DEFUN([gl_LIBTEXTSTYLE],
m4/libtextstyle.m4:  AC_REQUIRE([gl_LIBTEXTSTYLE_INITIALIZE])
m4/libtextstyle.m4:  AC_REQUIRE([gl_LIBTEXTSTYLE_SEARCH])
m4/libtextstyle.m4:  pushdef([MINVERSION], m4_if([$1], [], [gl_LIBTEXTSTYLE_NEWEST_VERSION], [$1]))
m4/libtextstyle.m4:    [m4_fatal([The argument to gl_LIBTEXTSTYLE or gl_LIBTEXTSTYLE_OPTIONAL is not one of the expected values.])])
m4/libtextstyle.m4:  dnl Store the specified minimum version in gl_libtextstyle_minversion.
m4/libtextstyle.m4:    [gl_libtextstyle_minversion="$gl_libtextstyle_minversion MINVERSION "])
m4/libtextstyle.m4:AC_DEFUN([gl_LIBTEXTSTYLE_NEWEST_VERSION], [0.20.5])
m4/libtextstyle.m4:AC_DEFUN([gl_LIBTEXTSTYLE_INITIALIZE],
m4/libtextstyle.m4:  m4_divert_text([DEFAULTS], [gl_libtextstyle_minversion=' 0.20 '])
m4/libtextstyle.m4:AC_DEFUN([gl_LIBTEXTSTYLE_SEARCH],
m4/libtextstyle.m4:  dnl $gl_libtextstyle_minversion evaluates to a space-separated list of
m4/libtextstyle.m4:  case "$gl_libtextstyle_minversion" in
m4/libunistring-base.m4:dnl gl_LIBUNISTRING_MODULE([VERSION], [Module])
m4/libunistring-base.m4:AC_DEFUN([gl_LIBUNISTRING_MODULE],
m4/libunistring-base.m4:  AC_REQUIRE([gl_LIBUNISTRING_LIB_PREPARE])
m4/libunistring-base.m4:  dnl gl_LIBUNISTRING_CORE if that macro has been run.
m4/libunistring-base.m4:  gl_CONDITIONAL(AS_TR_CPP([LIBUNISTRING_COMPILE_$2]),
m4/libunistring-base.m4:    [gl_LIBUNISTRING_VERSION_CMP([$1])])
m4/libunistring-base.m4:dnl gl_LIBUNISTRING_MODULE_WITH_VARIABLE([VERSION], [Module])
m4/libunistring-base.m4:dnl is like gl_LIBUNISTRING_MODULE([VERSION], [Module]), except that it also
m4/libunistring-base.m4:AC_DEFUN([gl_LIBUNISTRING_MODULE_WITH_VARIABLE],
m4/libunistring-base.m4:  gl_LIBUNISTRING_MODULE([$1], [$2])
m4/libunistring-base.m4:  m4_ifndef([gl_IN_LIBUNISTRING],
m4/libunistring-base.m4:dnl gl_LIBUNISTRING_LIBHEADER([VERSION], [HeaderFile])
m4/libunistring-base.m4:dnl (via gl_LIBUNISTRING_MODULE above) that are not contained in the installed
m4/libunistring-base.m4:AC_DEFUN([gl_LIBUNISTRING_LIBHEADER],
m4/libunistring-base.m4:  AC_REQUIRE([gl_LIBUNISTRING_LIB_PREPARE])
m4/libunistring-base.m4:  dnl gl_LIBUNISTRING_CORE if that macro has been run.
m4/libunistring-base.m4:  if gl_LIBUNISTRING_VERSION_CMP([$1]); then
m4/libunistring-base.m4:      LIBUNISTRING_[]AS_TR_CPP([$2])="${gl_source_base_prefix}$2"
m4/libunistring-base.m4:AC_DEFUN([gl_LIBUNISTRING_LIB_PREPARE],
m4/libunistring-base.m4:  m4_ifdef([gl_LIBUNISTRING], [AC_REQUIRE([gl_LIBUNISTRING])])
m4/libunistring-base.m4:gl_libunistring_sed_extract_major='/^[0-9]/{s/^\([0-9]*\).*/\1/p;q;}
m4/libunistring-base.m4:gl_libunistring_sed_extract_minor='/^[0-9][0-9]*[.][0-9]/{s/^[0-9]*[.]\([0-9]*\).*/\1/p;q;}
m4/libunistring-base.m4:gl_libunistring_sed_extract_subminor='/^[0-9][0-9]*[.][0-9][0-9]*[.][0-9]/{s/^[0-9]*[.][0-9]*[.]\([0-9]*\).*/\1/p;q;}
m4/libunistring-base.m4:    LIBUNISTRING_VERSION_MAJOR=`echo "$LIBUNISTRING_VERSION" | sed -n -e "$gl_libunistring_sed_extract_major"`
m4/libunistring-base.m4:    LIBUNISTRING_VERSION_MINOR=`echo "$LIBUNISTRING_VERSION" | sed -n -e "$gl_libunistring_sed_extract_minor"`
m4/libunistring-base.m4:    LIBUNISTRING_VERSION_SUBMINOR=`echo "$LIBUNISTRING_VERSION" | sed -n -e "$gl_libunistring_sed_extract_subminor"`
m4/libunistring-base.m4:  m4_ifdef([gl_IN_LIBUNISTRING],
m4/libunistring-base.m4:dnl gl_LIBUNISTRING_VERSION_CMP([VERSION])
m4/libunistring-base.m4:AC_DEFUN([gl_LIBUNISTRING_VERSION_CMP],
m4/libunistring-base.m4:              [gl_LIBUNISTRING_ARG_OR_ZERO(m4_bpatsubst([$1], [^\([0-9]*\).*], [\1]), [])])
m4/libunistring-base.m4:              [gl_LIBUNISTRING_ARG_OR_ZERO(m4_bpatsubst([$1], [^[0-9]*[.]\([0-9]*\).*], [\1]), [$1])])
m4/libunistring-base.m4:              [gl_LIBUNISTRING_ARG_OR_ZERO(m4_bpatsubst([$1], [^[0-9]*[.][0-9]*[.]\([0-9]*\).*], [\1]), [$1])])
m4/libunistring-base.m4:            requested_version_major=`echo '$1' | sed -n -e "$gl_libunistring_sed_extract_major"`
m4/libunistring-base.m4:            requested_version_minor=`echo '$1' | sed -n -e "$gl_libunistring_sed_extract_minor"`
m4/libunistring-base.m4:            requested_version_subminor=`echo '$1' | sed -n -e "$gl_libunistring_sed_extract_subminor"`
m4/libunistring-base.m4:dnl gl_LIBUNISTRING_ARG_OR_ZERO([ARG], [ORIG]) expands to ARG if it is not the
m4/libunistring-base.m4:m4_define([gl_LIBUNISTRING_ARG_OR_ZERO], [m4_if([$1], [$2], [0], [$1])])
m4/libunistring-optional.m4:dnl gl_LIBUNISTRING_OPTIONAL
m4/libunistring-optional.m4:AC_DEFUN([gl_LIBUNISTRING_OPTIONAL],
m4/libunistring-optional.m4:  dnl gl_LIBUNISTRING does a couple of extra things if this macro is used.
m4/libunistring-optional.m4:  AC_REQUIRE([gl_LIBUNISTRING])
m4/libunistring-optional.m4:  AC_MSG_RESULT([$gl_libunistring_use_included])
m4/libunistring.m4:dnl gl_LIBUNISTRING
m4/libunistring.m4:dnl Define gl_LIBUNISTRING using AC_DEFUN_ONCE, in order dnl to avoid warnings
m4/libunistring.m4:dnl "warning: AC_REQUIRE: `gl_LIBUNISTRING' was expanded before it was required".
m4/libunistring.m4:AC_DEFUN_ONCE([gl_LIBUNISTRING],
m4/libunistring.m4:  AC_BEFORE([$0], [gl_LIBUNISTRING_MODULE])
m4/libunistring.m4:  AC_BEFORE([$0], [gl_LIBUNISTRING_LIBHEADER])
m4/libunistring.m4:  AC_BEFORE([$0], [gl_LIBUNISTRING_LIB_PREPARE])
m4/libunistring.m4:  m4_ifdef([gl_LIBUNISTRING_OPTIONAL],
m4/libunistring.m4:        [gl_libunistring_force_included=$withval],
m4/libunistring.m4:        [gl_libunistring_force_included=no])
m4/libunistring.m4:      AC_MSG_RESULT([$gl_libunistring_force_included])
m4/libunistring.m4:      gl_libunistring_use_included="$gl_libunistring_force_included"
m4/libunistring.m4:      if test "$gl_libunistring_use_included" = yes; then
m4/libunistring.m4:        dnl explicitly invokes gl_LIBUNISTRING_CORE.
m4/libunistring.m4:        gl_LIBUNISTRING_CORE
m4/libunistring.m4:          gl_libunistring_use_included=yes
m4/libunistring.m4:    [gl_LIBUNISTRING_CORE])
m4/libunistring.m4:AC_DEFUN([gl_LIBUNISTRING_CORE],
m4/libunistring.m4:    AC_CACHE_CHECK([for libunistring version], [gl_cv_libunistring_version],
m4/libunistring.m4:      [AC_COMPUTE_INT([gl_libunistring_hexversion],
m4/libunistring.m4:       if test $gl_libunistring_hexversion = 9; then
m4/libunistring.m4:           [gl_cv_libunistring_version092=true],
m4/libunistring.m4:           [gl_cv_libunistring_version092=false])
m4/libunistring.m4:         if $gl_cv_libunistring_version092; then
m4/libunistring.m4:           gl_ABSOLUTE_HEADER_ONE([unistr.h])
m4/libunistring.m4:           if test -n "$gl_cv_absolute_unistr_h" \
m4/libunistring.m4:              && grep 'Copy no more than N units of SRC to DEST.  Return a pointer' $gl_cv_absolute_unistr_h > /dev/null; then
m4/libunistring.m4:             gl_libunistring_hexversion=2307
m4/libunistring.m4:             gl_libunistring_hexversion=2306
m4/libunistring.m4:             [gl_cv_libunistring_version091=true],
m4/libunistring.m4:             [gl_cv_libunistring_version091=false])
m4/libunistring.m4:           if $gl_cv_libunistring_version091; then
m4/libunistring.m4:             gl_libunistring_hexversion=2305
m4/libunistring.m4:             gl_libunistring_hexversion=2304
m4/libunistring.m4:       gl_libunistring_major=`expr $gl_libunistring_hexversion / 65536`
m4/libunistring.m4:       gl_libunistring_minor=`expr $gl_libunistring_hexversion / 256 % 256`
m4/libunistring.m4:       gl_libunistring_subminor=`expr $gl_libunistring_hexversion % 256`
m4/libunistring.m4:       gl_cv_libunistring_version="$gl_libunistring_major.$gl_libunistring_minor.$gl_libunistring_subminor"
m4/libunistring.m4:    LIBUNISTRING_VERSION="$gl_cv_libunistring_version"
m4/limits-h.m4:AC_DEFUN_ONCE([gl_LIMITS_H],
m4/limits-h.m4:  gl_CHECK_NEXT_HEADERS([limits.h])
m4/limits-h.m4:    [gl_cv_header_limits_width],
m4/limits-h.m4:       [gl_cv_header_limits_width=yes],
m4/limits-h.m4:       [gl_cv_header_limits_width=no])])
m4/limits-h.m4:  AS_IF([test "$gl_cv_header_limits_width" = yes],
m4/limits-h.m4:       [gl_cv_header_limits_ssize_max],
m4/limits-h.m4:          [gl_cv_header_limits_ssize_max=yes],
m4/limits-h.m4:          [gl_cv_header_limits_ssize_max=no])])
m4/limits-h.m4:     if test "$gl_cv_header_limits_ssize_max" = yes; then
m4/limits-h.m4:AC_DEFUN([gl_REPLACE_LIMITS_H],
m4/limits-h.m4:  AC_REQUIRE([gl_LIMITS_H])
m4/link-follow.m4:AC_DEFUN([gl_FUNC_LINK_FOLLOWS_SYMLINK],
m4/link-follow.m4:  gl_link_follows_symlinks=0 # assume GNU behavior
m4/link-follow.m4:    AC_CACHE_CHECK([for __xpg4], [gl_cv_have___xpg4],
m4/link-follow.m4:         [gl_cv_have___xpg4=yes],
m4/link-follow.m4:         [gl_cv_have___xpg4=no])
m4/link-follow.m4:    if test $gl_cv_have___xpg4 = yes; then
m4/link-follow.m4:      gl_link_follows_symlinks=-1
m4/link-follow.m4:                     [gl_cv_func_link_follows_symlink],
m4/link-follow.m4:           [gl_cv_func_link_follows_symlink=no], dnl GNU behavior
m4/link-follow.m4:           [gl_cv_func_link_follows_symlink=yes], dnl Followed link/compile failed
m4/link-follow.m4:              linux*-gnu* | gnu*) gl_cv_func_link_follows_symlink="guessing no" ;;
m4/link-follow.m4:              linux*-musl*)       gl_cv_func_link_follows_symlink="guessing no" ;;
m4/link-follow.m4:              *)                  gl_cv_func_link_follows_symlink=unknown ;;
m4/link-follow.m4:      case "$gl_cv_func_link_follows_symlink" in
m4/link-follow.m4:        *yes) gl_link_follows_symlinks=1 ;;
m4/link-follow.m4:        *) gl_link_follows_symlinks=-2 ;;
m4/link-follow.m4:  AC_DEFINE_UNQUOTED([LINK_FOLLOWS_SYMLINKS], [$gl_link_follows_symlinks],
m4/link.m4:AC_DEFUN([gl_FUNC_LINK],
m4/link.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/link.m4:      [gl_cv_func_link_works],
m4/link.m4:         [gl_cv_func_link_works=yes], [gl_cv_func_link_works=no],
m4/link.m4:            linux-* | linux) gl_cv_func_link_works="guessing yes" ;;
m4/link.m4:            midipix*)        gl_cv_func_link_works="guessing yes" ;;
m4/link.m4:            *-gnu* | gnu*)   gl_cv_func_link_works="guessing yes" ;;
m4/link.m4:            *)               gl_cv_func_link_works="$gl_cross_guess_normal" ;;
m4/link.m4:    case "$gl_cv_func_link_works" in
m4/linkat.m4:AC_DEFUN([gl_FUNC_LINKAT],
m4/linkat.m4:  AC_REQUIRE([gl_FUNC_OPENAT])
m4/linkat.m4:  AC_REQUIRE([gl_FUNC_LINK_FOLLOWS_SYMLINK])
m4/linkat.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/linkat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/linkat.m4:  gl_CHECK_FUNCS_ANDROID([linkat], [[#include <unistd.h>]])
m4/linkat.m4:    case "$gl_cv_onwards_func_linkat" in
m4/linkat.m4:      [gl_cv_func_linkat_nofollow],
m4/linkat.m4:         [gl_cv_func_linkat_nofollow=yes],
m4/linkat.m4:         [gl_cv_func_linkat_nofollow=no],
m4/linkat.m4:           darwin*) gl_cv_func_linkat_nofollow="guessing no" ;;
m4/linkat.m4:           *)       gl_cv_func_linkat_nofollow="guessing yes" ;;
m4/linkat.m4:    case $gl_cv_func_linkat_nofollow in
m4/linkat.m4:      [gl_cv_func_linkat_slash],
m4/linkat.m4:         [gl_cv_func_linkat_slash=yes],
m4/linkat.m4:         [gl_cv_func_linkat_slash=no],
m4/linkat.m4:            linux-* | linux) gl_cv_func_linkat_slash="guessing yes";;
m4/linkat.m4:            midipix*)        gl_cv_func_linkat_slash="guessing yes";;
m4/linkat.m4:            *-gnu* | gnu*)   gl_cv_func_linkat_slash="guessing yes";;
m4/linkat.m4:            *)               gl_cv_func_linkat_slash="$gl_cross_guess_normal";;
m4/linkat.m4:    case "$gl_cv_func_linkat_slash" in
m4/linkat.m4:      *yes) gl_linkat_slash_bug=0 ;;
m4/linkat.m4:      *)    gl_linkat_slash_bug=1 ;;
m4/linkat.m4:    case "$gl_cv_func_linkat_nofollow" in
m4/linkat.m4:       || test $gl_linkat_slash_bug = 1; then
m4/linkat.m4:      AC_DEFINE_UNQUOTED([LINKAT_TRAILING_SLASH_BUG], [$gl_linkat_slash_bug],
m4/localcharset.m4:AC_DEFUN([gl_LOCALCHARSET],
m4/locale-zh.m4:          # broken. One witness is the test case in gl_MBRTOWC_SANITYCHECK.
m4/localeconv.m4:AC_DEFUN([gl_FUNC_LOCALECONV],
m4/localeconv.m4:  AC_REQUIRE([gl_LOCALE_H_DEFAULTS])
m4/localeconv.m4:  AC_REQUIRE([gl_LOCALE_H])
m4/localeconv.m4:      [gl_cv_func_localeconv_works],
m4/localeconv.m4:         [gl_cv_func_localeconv_works=yes],
m4/localeconv.m4:         [gl_cv_func_localeconv_works=no],
m4/localeconv.m4:            *-gnu* | gnu*)      gl_cv_func_localeconv_works="guessing yes" ;;
m4/localeconv.m4:            *-musl* | midipix*) gl_cv_func_localeconv_works="guessing yes" ;;
m4/localeconv.m4:            mingw* | windows*)  gl_cv_func_localeconv_works="guessing no" ;;
m4/localeconv.m4:            *)                  gl_cv_func_localeconv_works="$gl_cross_guess_normal" ;;
m4/localeconv.m4:    case "$gl_cv_func_localeconv_works" in
m4/localeconv.m4:AC_DEFUN([gl_PREREQ_LOCALECONV],
m4/localename.m4:AC_DEFUN([gl_LOCALENAME_UNSAFE],
m4/localename.m4:  AC_REQUIRE([gl_LOCALE_H_DEFAULTS])
m4/localename.m4:  AC_REQUIRE([gl_LOCALE_T])
m4/localename.m4:    gl_CHECK_FUNCS_ANDROID([newlocale], [[#include <locale.h>]])
m4/localename.m4:    gl_CHECK_FUNCS_ANDROID([duplocale], [[#include <locale.h>]])
m4/localename.m4:    gl_CHECK_FUNCS_ANDROID([freelocale], [[#include <locale.h>]])
m4/localename.m4:    gl_func_newlocale="$ac_cv_func_newlocale"
m4/localename.m4:    gl_func_duplocale="$ac_cv_func_duplocale"
m4/localename.m4:    gl_func_freelocale="$ac_cv_func_freelocale"
m4/localename.m4:    gl_cv_onwards_func_newlocale='future OS version'
m4/localename.m4:    gl_cv_onwards_func_duplocale='future OS version'
m4/localename.m4:    gl_cv_onwards_func_freelocale='future OS version'
m4/localename.m4:    gl_func_newlocale=no
m4/localename.m4:    gl_func_duplocale=no
m4/localename.m4:    gl_func_freelocale=no
m4/localename.m4:  if test $gl_func_newlocale != yes; then
m4/localename.m4:    case "$gl_cv_onwards_func_newlocale" in
m4/localename.m4:  if test $gl_func_duplocale != yes; then
m4/localename.m4:    case "$gl_cv_onwards_func_duplocale" in
m4/localename.m4:  if test $gl_func_freelocale != yes; then
m4/localename.m4:    case "$gl_cv_onwards_func_freelocale" in
m4/localename.m4:AC_DEFUN([gl_LOCALENAME_UNSAFE_LIMITED],
m4/locale_h.m4:AC_DEFUN_ONCE([gl_LOCALE_H],
m4/locale_h.m4:  AC_REQUIRE([gl_LOCALE_H_DEFAULTS])
m4/locale_h.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/locale_h.m4:  AC_REQUIRE([gl_STDDEF_H])
m4/locale_h.m4:  AC_REQUIRE([gl_LOCALE_T])
m4/locale_h.m4:    [gl_cv_header_locale_h_posix2001],
m4/locale_h.m4:       [gl_cv_header_locale_h_posix2001=yes],
m4/locale_h.m4:       [gl_cv_header_locale_h_posix2001=no])])
m4/locale_h.m4:    [gl_cv_sys_struct_lconv_ok],
m4/locale_h.m4:       [gl_cv_sys_struct_lconv_ok=yes],
m4/locale_h.m4:       [gl_cv_sys_struct_lconv_ok=no])
m4/locale_h.m4:  if test $gl_cv_sys_struct_lconv_ok = no; then
m4/locale_h.m4:  gl_NEXT_HEADERS([locale.h])
m4/locale_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <locale.h>
m4/locale_h.m4:AC_DEFUN([gl_LOCALE_T],
m4/locale_h.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/locale_h.m4:    [gl_cv_header_locale_has_locale_t],
m4/locale_h.m4:       [gl_cv_header_locale_has_locale_t=yes],
m4/locale_h.m4:       [gl_cv_header_locale_has_locale_t=no])
m4/locale_h.m4:    if test $gl_cv_header_locale_has_locale_t = yes; then
m4/locale_h.m4:      gl_cv_header_locale_h_needs_xlocale_h=no
m4/locale_h.m4:      gl_cv_header_locale_h_needs_xlocale_h=yes
m4/locale_h.m4:    gl_cv_header_locale_h_needs_xlocale_h=no
m4/locale_h.m4:    if test $gl_cv_header_locale_has_locale_t = yes; then
m4/locale_h.m4:# gl_LOCALE_MODULE_INDICATOR([modulename])
m4/locale_h.m4:AC_DEFUN([gl_LOCALE_MODULE_INDICATOR],
m4/locale_h.m4:  gl_LOCALE_H_REQUIRE_DEFAULTS
m4/locale_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/locale_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/locale_h.m4:AC_DEFUN([gl_LOCALE_H_REQUIRE_DEFAULTS],
m4/locale_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOCALECONV])
m4/locale_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETLOCALE])
m4/locale_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETLOCALE_NULL])
m4/locale_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_DUPLOCALE])
m4/locale_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOCALENAME_UNSAFE])
m4/locale_h.m4:  AC_REQUIRE([gl_LOCALE_H_DEFAULTS])
m4/locale_h.m4:AC_DEFUN([gl_LOCALE_H_DEFAULTS],
m4/localtime.m4:AC_DEFUN([gl_FUNC_LOCALTIME],
m4/localtime.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/lock.m4:AC_DEFUN([gl_LOCK],
m4/lock.m4:  AC_REQUIRE([gl_THREADLIB])
m4/lock.m4:  if test "$gl_threads_api" = posix; then
m4/lock.m4:      gl_PTHREAD_RWLOCK_RDLOCK_PREFER_WRITER
m4/lock.m4:  gl_PREREQ_LOCK
m4/lock.m4:AC_DEFUN([gl_PREREQ_LOCK], [:])
m4/log-ieee.m4:dnl module description), so that gl_FUNC_LOG can test whether 'aclocal' has
m4/log-ieee.m4:AC_DEFUN([gl_FUNC_LOG_IEEE],
m4/log-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log_required=ieee])
m4/log-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG])
m4/log.m4:AC_DEFUN([gl_FUNC_LOG],
m4/log.m4:  m4_divert_text([DEFAULTS], [gl_log_required=plain])
m4/log.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log.m4:  gl_COMMON_DOUBLE_MATHFUNC([log])
m4/log.m4:  gl_FUNC_LOG_WORKS
m4/log.m4:  case "$gl_cv_func_log_works" in
m4/log.m4:  m4_ifdef([gl_FUNC_LOG_IEEE], [
m4/log.m4:    if test $gl_log_required = ieee && test $REPLACE_LOG = 0; then
m4/log.m4:        [gl_cv_func_log_ieee],
m4/log.m4:            [gl_cv_func_log_ieee=yes],
m4/log.m4:            [gl_cv_func_log_ieee=no],
m4/log.m4:               *-gnu* | gnu*)      gl_cv_func_log_ieee="guessing yes" ;;
m4/log.m4:               *-musl* | midipix*) gl_cv_func_log_ieee="guessing yes" ;;
m4/log.m4:               mingw* | windows*)  gl_cv_func_log_ieee="guessing yes" ;;
m4/log.m4:               *)                  gl_cv_func_log_ieee="$gl_cross_guess_normal" ;;
m4/log.m4:      case "$gl_cv_func_log_ieee" in
m4/log.m4:AC_DEFUN([gl_FUNC_LOG_WORKS],
m4/log.m4:  AC_CACHE_CHECK([whether log works], [gl_cv_func_log_works],
m4/log.m4:        [gl_cv_func_log_works=yes],
m4/log.m4:        [gl_cv_func_log_works=no],
m4/log.m4:           osf*)              gl_cv_func_log_works="guessing no" ;;
m4/log.m4:           mingw* | windows*) gl_cv_func_log_works="guessing yes" ;;
m4/log.m4:           *)                 gl_cv_func_log_works="guessing yes" ;;
m4/log10-ieee.m4:dnl module description), so that gl_FUNC_LOG10 can test whether 'aclocal' has
m4/log10-ieee.m4:AC_DEFUN([gl_FUNC_LOG10_IEEE],
m4/log10-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log10_required=ieee])
m4/log10-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG10])
m4/log10.m4:AC_DEFUN([gl_FUNC_LOG10],
m4/log10.m4:  m4_divert_text([DEFAULTS], [gl_log10_required=plain])
m4/log10.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log10.m4:  gl_COMMON_DOUBLE_MATHFUNC([log10])
m4/log10.m4:  gl_FUNC_LOG10_WORKS
m4/log10.m4:  case "$gl_cv_func_log10_works" in
m4/log10.m4:  m4_ifdef([gl_FUNC_LOG10_IEEE], [
m4/log10.m4:    if test $gl_log10_required = ieee && test $REPLACE_LOG10 = 0; then
m4/log10.m4:        [gl_cv_func_log10_ieee],
m4/log10.m4:            [gl_cv_func_log10_ieee=yes],
m4/log10.m4:            [gl_cv_func_log10_ieee=no],
m4/log10.m4:               *-gnu* | gnu*)      gl_cv_func_log10_ieee="guessing yes" ;;
m4/log10.m4:               *-musl* | midipix*) gl_cv_func_log10_ieee="guessing yes" ;;
m4/log10.m4:               mingw* | windows*)  gl_cv_func_log10_ieee="guessing yes" ;;
m4/log10.m4:               *)                  gl_cv_func_log10_ieee="$gl_cross_guess_normal" ;;
m4/log10.m4:      case "$gl_cv_func_log10_ieee" in
m4/log10.m4:AC_DEFUN([gl_FUNC_LOG10_WORKS],
m4/log10.m4:  AC_CACHE_CHECK([whether log10 works], [gl_cv_func_log10_works],
m4/log10.m4:        [gl_cv_func_log10_works=yes],
m4/log10.m4:        [gl_cv_func_log10_works=no],
m4/log10.m4:           osf*)              gl_cv_func_log10_works="guessing no" ;;
m4/log10.m4:           mingw* | windows*) gl_cv_func_log10_works="guessing yes" ;;
m4/log10.m4:           *)                 gl_cv_func_log10_works="guessing yes" ;;
m4/log10f-ieee.m4:dnl module description), so that gl_FUNC_LOG10F can test whether 'aclocal' has
m4/log10f-ieee.m4:AC_DEFUN([gl_FUNC_LOG10F_IEEE],
m4/log10f-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log10f_required=ieee])
m4/log10f-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG10F])
m4/log10f.m4:AC_DEFUN([gl_FUNC_LOG10F],
m4/log10f.m4:  m4_divert_text([DEFAULTS], [gl_log10f_required=plain])
m4/log10f.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log10f.m4:  AC_REQUIRE([gl_FUNC_LOG10])
m4/log10f.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log10f.m4:    gl_FUNC_LOG10F_WORKS
m4/log10f.m4:    case "$gl_cv_func_log10f_works" in
m4/log10f.m4:    m4_ifdef([gl_FUNC_LOG10F_IEEE], [
m4/log10f.m4:      if test $gl_log10f_required = ieee && test $REPLACE_LOG10F = 0; then
m4/log10f.m4:          [gl_cv_func_log10f_ieee],
m4/log10f.m4:              [gl_cv_func_log10f_ieee=yes],
m4/log10f.m4:              [gl_cv_func_log10f_ieee=no],
m4/log10f.m4:                 *-gnu* | gnu*)      gl_cv_func_log10f_ieee="guessing yes" ;;
m4/log10f.m4:                 *-musl* | midipix*) gl_cv_func_log10f_ieee="guessing yes" ;;
m4/log10f.m4:                 mingw* | windows*)  gl_cv_func_log10f_ieee="guessing yes" ;;
m4/log10f.m4:                 *)                  gl_cv_func_log10f_ieee="$gl_cross_guess_normal" ;;
m4/log10f.m4:        case "$gl_cv_func_log10f_ieee" in
m4/log10f.m4:AC_DEFUN([gl_FUNC_LOG10F_WORKS],
m4/log10f.m4:  AC_CACHE_CHECK([whether log10f works], [gl_cv_func_log10f_works],
m4/log10f.m4:        [gl_cv_func_log10f_works=yes],
m4/log10f.m4:        [gl_cv_func_log10f_works=no],
m4/log10f.m4:           osf*)              gl_cv_func_log10f_works="guessing no" ;;
m4/log10f.m4:           mingw* | windows*) gl_cv_func_log10f_works="guessing yes" ;;
m4/log10f.m4:           *)                 gl_cv_func_log10f_works="guessing yes" ;;
m4/log10l.m4:AC_DEFUN([gl_FUNC_LOG10L],
m4/log10l.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log10l.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/log10l.m4:  AC_REQUIRE([gl_FUNC_LOG10])
m4/log10l.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log10l.m4:    gl_FUNC_LOG10L_WORKS
m4/log10l.m4:    case "$gl_cv_func_log10l_works" in
m4/log10l.m4:        AC_REQUIRE([gl_FUNC_LOGL])
m4/log10l.m4:AC_DEFUN([gl_FUNC_LOG10L_WORKS],
m4/log10l.m4:  AC_CACHE_CHECK([whether log10l works], [gl_cv_func_log10l_works],
m4/log10l.m4:        [gl_cv_func_log10l_works=yes],
m4/log10l.m4:        [gl_cv_func_log10l_works=no],
m4/log10l.m4:           *-gnu* | gnu*)      gl_cv_func_log10l_works="guessing yes" ;;
m4/log10l.m4:           *-musl* | midipix*) gl_cv_func_log10l_works="guessing no" ;;
m4/log10l.m4:           mingw* | windows*)  gl_cv_func_log10l_works="guessing yes" ;;
m4/log10l.m4:           *)                  gl_cv_func_log10l_works="$gl_cross_guess_normal" ;;
m4/log1p-ieee.m4:dnl module description), so that gl_FUNC_LOG1P can test whether 'aclocal' has
m4/log1p-ieee.m4:AC_DEFUN([gl_FUNC_LOG1P_IEEE],
m4/log1p-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log1p_required=ieee])
m4/log1p-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG1P])
m4/log1p.m4:AC_DEFUN_ONCE([gl_FUNC_LOG1P],
m4/log1p.m4:  m4_divert_text([DEFAULTS], [gl_log1p_required=plain])
m4/log1p.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log1p.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log1p.m4:  gl_COMMON_DOUBLE_MATHFUNC([log1p])
m4/log1p.m4:    m4_ifdef([gl_FUNC_LOG1P_IEEE], [
m4/log1p.m4:      if test $gl_log1p_required = ieee && test $REPLACE_LOG1P = 0; then
m4/log1p.m4:          [gl_cv_func_log1p_ieee],
m4/log1p.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/log1p.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/log1p.m4:              [gl_cv_func_log1p_ieee=yes],
m4/log1p.m4:              [gl_cv_func_log1p_ieee=no],
m4/log1p.m4:                 *-gnu* | gnu*)      gl_cv_func_log1p_ieee="guessing yes" ;;
m4/log1p.m4:                 *-musl* | midipix*) gl_cv_func_log1p_ieee="guessing yes" ;;
m4/log1p.m4:                 mingw* | windows*)  gl_cv_func_log1p_ieee="guessing yes" ;;
m4/log1p.m4:                 *)                  gl_cv_func_log1p_ieee="$gl_cross_guess_normal" ;;
m4/log1p.m4:        case "$gl_cv_func_log1p_ieee" in
m4/log1p.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/log1p.m4:    AC_REQUIRE([gl_FUNC_LOG])
m4/log1p.m4:    AC_REQUIRE([gl_FUNC_ROUND])
m4/log1pf-ieee.m4:dnl module description), so that gl_FUNC_LOG1PF can test whether 'aclocal' has
m4/log1pf-ieee.m4:AC_DEFUN([gl_FUNC_LOG1PF_IEEE],
m4/log1pf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log1pf_required=ieee])
m4/log1pf-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG1PF])
m4/log1pf.m4:AC_DEFUN([gl_FUNC_LOG1PF],
m4/log1pf.m4:  m4_divert_text([DEFAULTS], [gl_log1pf_required=plain])
m4/log1pf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log1pf.m4:  AC_REQUIRE([gl_FUNC_LOG1P])
m4/log1pf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log1pf.m4:    gl_FUNC_LOG1PF_WORKS
m4/log1pf.m4:    case "$gl_cv_func_log1pf_works" in
m4/log1pf.m4:    m4_ifdef([gl_FUNC_LOG1PF_IEEE], [
m4/log1pf.m4:      if test $gl_log1pf_required = ieee && test $REPLACE_LOG1PF = 0; then
m4/log1pf.m4:          [gl_cv_func_log1pf_ieee],
m4/log1pf.m4:]gl_FLOAT_MINUS_ZERO_CODE[
m4/log1pf.m4:]gl_FLOAT_SIGNBIT_CODE[
m4/log1pf.m4:              [gl_cv_func_log1pf_ieee=yes],
m4/log1pf.m4:              [gl_cv_func_log1pf_ieee=no],
m4/log1pf.m4:                 *-gnu* | gnu*)      gl_cv_func_log1pf_ieee="guessing yes" ;;
m4/log1pf.m4:                 *-musl* | midipix*) gl_cv_func_log1pf_ieee="guessing yes" ;;
m4/log1pf.m4:                 mingw* | windows*)  gl_cv_func_log1pf_ieee="guessing yes" ;;
m4/log1pf.m4:                 *)                  gl_cv_func_log1pf_ieee="$gl_cross_guess_normal" ;;
m4/log1pf.m4:        case "$gl_cv_func_log1pf_ieee" in
m4/log1pf.m4:AC_DEFUN([gl_FUNC_LOG1PF_WORKS],
m4/log1pf.m4:  AC_CACHE_CHECK([whether log1pf works], [gl_cv_func_log1pf_works],
m4/log1pf.m4:        [gl_cv_func_log1pf_works=yes],
m4/log1pf.m4:        [gl_cv_func_log1pf_works=no],
m4/log1pf.m4:           irix*)             gl_cv_func_log1pf_works="guessing no" ;;
m4/log1pf.m4:           mingw* | windows*) gl_cv_func_log1pf_works="guessing yes" ;;
m4/log1pf.m4:           *)                 gl_cv_func_log1pf_works="guessing yes" ;;
m4/log1pl-ieee.m4:dnl module description), so that gl_FUNC_LOG1PL can test whether 'aclocal' has
m4/log1pl-ieee.m4:AC_DEFUN([gl_FUNC_LOG1PL_IEEE],
m4/log1pl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log1pl_required=ieee])
m4/log1pl-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG1PL])
m4/log1pl.m4:AC_DEFUN([gl_FUNC_LOG1PL],
m4/log1pl.m4:  m4_divert_text([DEFAULTS], [gl_log1pl_required=plain])
m4/log1pl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log1pl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/log1pl.m4:  AC_REQUIRE([gl_FUNC_LOG1P])
m4/log1pl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log1pl.m4:    gl_FUNC_LOG1PL_WORKS
m4/log1pl.m4:    case "$gl_cv_func_log1pl_works" in
m4/log1pl.m4:    m4_ifdef([gl_FUNC_LOG1PL_IEEE], [
m4/log1pl.m4:      if test $gl_log1pl_required = ieee && test $REPLACE_LOG1PL = 0; then
m4/log1pl.m4:          [gl_cv_func_log1pl_ieee],
m4/log1pl.m4:]gl_LONG_DOUBLE_MINUS_ZERO_CODE[
m4/log1pl.m4:]gl_LONG_DOUBLE_SIGNBIT_CODE[
m4/log1pl.m4:              [gl_cv_func_log1pl_ieee=yes],
m4/log1pl.m4:              [gl_cv_func_log1pl_ieee=no],
m4/log1pl.m4:                 *-gnu* | gnu*)      gl_cv_func_log1pl_ieee="guessing yes" ;;
m4/log1pl.m4:                 *-musl* | midipix*) gl_cv_func_log1pl_ieee="guessing yes" ;;
m4/log1pl.m4:                 mingw* | windows*)  gl_cv_func_log1pl_ieee="guessing yes" ;;
m4/log1pl.m4:                 *)                  gl_cv_func_log1pl_ieee="$gl_cross_guess_normal" ;;
m4/log1pl.m4:        case "$gl_cv_func_log1pl_ieee" in
m4/log1pl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/log1pl.m4:      AC_REQUIRE([gl_FUNC_LOGL])
m4/log1pl.m4:      AC_REQUIRE([gl_FUNC_ROUNDL])
m4/log1pl.m4:AC_DEFUN([gl_FUNC_LOG1PL_WORKS],
m4/log1pl.m4:  AC_CACHE_CHECK([whether log1pl works], [gl_cv_func_log1pl_works],
m4/log1pl.m4:        [gl_cv_func_log1pl_works=yes],
m4/log1pl.m4:        [gl_cv_func_log1pl_works=no],
m4/log1pl.m4:           *-gnu* | gnu*)      gl_cv_func_log1pl_works="guessing yes" ;;
m4/log1pl.m4:           *-musl* | midipix*) gl_cv_func_log1pl_works="guessing no" ;;
m4/log1pl.m4:           netbsd*)            gl_cv_func_log1pl_works="guessing no" ;;
m4/log1pl.m4:           mingw* | windows*)  gl_cv_func_log1pl_works="guessing yes" ;;
m4/log1pl.m4:           *)                  gl_cv_func_log1pl_works="$gl_cross_guess_normal" ;;
m4/log2-ieee.m4:dnl module description), so that gl_FUNC_LOG2 can test whether 'aclocal' has
m4/log2-ieee.m4:AC_DEFUN([gl_FUNC_LOG2_IEEE],
m4/log2-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log2_required=ieee])
m4/log2-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG2])
m4/log2.m4:AC_DEFUN([gl_FUNC_LOG2],
m4/log2.m4:  m4_divert_text([DEFAULTS], [gl_log2_required=plain])
m4/log2.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log2.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log2.m4:  gl_COMMON_DOUBLE_MATHFUNC([log2])
m4/log2.m4:  gl_CHECK_FUNCS_ANDROID([log2], [[#include <math.h>]])
m4/log2.m4:    gl_FUNC_LOG2_WORKS
m4/log2.m4:    case "$gl_cv_func_log2_works" in
m4/log2.m4:    m4_ifdef([gl_FUNC_LOG2_IEEE], [
m4/log2.m4:      if test $gl_log2_required = ieee && test $REPLACE_LOG2 = 0; then
m4/log2.m4:          [gl_cv_func_log2_ieee],
m4/log2.m4:              [gl_cv_func_log2_ieee=yes],
m4/log2.m4:              [gl_cv_func_log2_ieee=no],
m4/log2.m4:                 *-gnu* | gnu*)      gl_cv_func_log2_ieee="guessing yes" ;;
m4/log2.m4:                 *-musl* | midipix*) gl_cv_func_log2_ieee="guessing yes" ;;
m4/log2.m4:                 mingw* | windows*)  gl_cv_func_log2_ieee="guessing yes" ;;
m4/log2.m4:                 *)                  gl_cv_func_log2_ieee="$gl_cross_guess_normal" ;;
m4/log2.m4:        case "$gl_cv_func_log2_ieee" in
m4/log2.m4:    case "$gl_cv_onwards_func_log2" in
m4/log2.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/log2.m4:    AC_REQUIRE([gl_FUNC_FREXP])
m4/log2.m4:    AC_REQUIRE([gl_FUNC_LOG])
m4/log2.m4:AC_DEFUN([gl_FUNC_LOG2_WORKS],
m4/log2.m4:  AC_CACHE_CHECK([whether log2 works], [gl_cv_func_log2_works],
m4/log2.m4:        [gl_cv_func_log2_works=yes],
m4/log2.m4:        [gl_cv_func_log2_works=no],
m4/log2.m4:           cygwin* | osf*)    gl_cv_func_log2_works="guessing no" ;;
m4/log2.m4:           mingw* | windows*) gl_cv_func_log2_works="guessing yes" ;;
m4/log2.m4:           *)                 gl_cv_func_log2_works="guessing yes" ;;
m4/log2f-ieee.m4:dnl module description), so that gl_FUNC_LOG2F can test whether 'aclocal' has
m4/log2f-ieee.m4:AC_DEFUN([gl_FUNC_LOG2F_IEEE],
m4/log2f-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_log2f_required=ieee])
m4/log2f-ieee.m4:  AC_REQUIRE([gl_FUNC_LOG2F])
m4/log2f.m4:AC_DEFUN([gl_FUNC_LOG2F],
m4/log2f.m4:  m4_divert_text([DEFAULTS], [gl_log2f_required=plain])
m4/log2f.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log2f.m4:  AC_REQUIRE([gl_FUNC_LOG2])
m4/log2f.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log2f.m4:  gl_COMMON_DOUBLE_MATHFUNC([log2f])
m4/log2f.m4:  gl_CHECK_FUNCS_ANDROID([log2f], [[#include <math.h>]])
m4/log2f.m4:    gl_FUNC_LOG2F_WORKS
m4/log2f.m4:    case "$gl_cv_func_log2f_works" in
m4/log2f.m4:    m4_ifdef([gl_FUNC_LOG2F_IEEE], [
m4/log2f.m4:      if test $gl_log2f_required = ieee && test $REPLACE_LOG2F = 0; then
m4/log2f.m4:          [gl_cv_func_log2f_ieee],
m4/log2f.m4:              [gl_cv_func_log2f_ieee=yes],
m4/log2f.m4:              [gl_cv_func_log2f_ieee=no],
m4/log2f.m4:                 *-gnu* | gnu*)      gl_cv_func_log2f_ieee="guessing yes" ;;
m4/log2f.m4:                 *-musl* | midipix*) gl_cv_func_log2f_ieee="guessing yes" ;;
m4/log2f.m4:                 mingw* | windows*)  gl_cv_func_log2f_ieee="guessing yes" ;;
m4/log2f.m4:                 *)                  gl_cv_func_log2f_ieee="$gl_cross_guess_normal" ;;
m4/log2f.m4:        case "$gl_cv_func_log2f_ieee" in
m4/log2f.m4:    case "$gl_cv_onwards_func_log2f" in
m4/log2f.m4:      AC_REQUIRE([gl_FUNC_ISNANF])
m4/log2f.m4:      AC_REQUIRE([gl_FUNC_FREXPF])
m4/log2f.m4:      AC_REQUIRE([gl_FUNC_LOGF])
m4/log2f.m4:AC_DEFUN([gl_FUNC_LOG2F_WORKS],
m4/log2f.m4:  AC_CACHE_CHECK([whether log2f works], [gl_cv_func_log2f_works],
m4/log2f.m4:        [gl_cv_func_log2f_works=yes],
m4/log2f.m4:        [gl_cv_func_log2f_works=no],
m4/log2f.m4:           cygwin* | osf*)    gl_cv_func_log2f_works="guessing no" ;;
m4/log2f.m4:           mingw* | windows*) gl_cv_func_log2f_works="guessing yes" ;;
m4/log2f.m4:           *)                 gl_cv_func_log2f_works="guessing yes" ;;
m4/log2l.m4:AC_DEFUN([gl_FUNC_LOG2L],
m4/log2l.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/log2l.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/log2l.m4:  AC_REQUIRE([gl_FUNC_LOG2])
m4/log2l.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/log2l.m4:  gl_CHECK_FUNCS_ANDROID([log2l], [[#include <math.h>]])
m4/log2l.m4:    gl_FUNC_LOG2L_WORKS
m4/log2l.m4:    case "$gl_cv_func_log2l_works" in
m4/log2l.m4:    case "$gl_cv_onwards_func_log2l" in
m4/log2l.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/log2l.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/log2l.m4:      AC_REQUIRE([gl_FUNC_LOGL])
m4/log2l.m4:AC_DEFUN([gl_FUNC_LOG2L_WORKS],
m4/log2l.m4:  AC_CACHE_CHECK([whether log2l works], [gl_cv_func_log2l_works],
m4/log2l.m4:        [gl_cv_func_log2l_works=yes],
m4/log2l.m4:        [gl_cv_func_log2l_works=no],
m4/log2l.m4:           *-gnu* | gnu*)      gl_cv_func_log2l_works="guessing yes" ;;
m4/log2l.m4:           *-musl* | midipix*) gl_cv_func_log2l_works="guessing no" ;;
m4/log2l.m4:           netbsd* | osf*)     gl_cv_func_log2l_works="guessing no" ;;
m4/log2l.m4:           mingw* | windows*)  gl_cv_func_log2l_works="guessing yes" ;;
m4/log2l.m4:           *)                  gl_cv_func_log2l_works="$gl_cross_guess_normal" ;;
m4/logb.m4:AC_DEFUN([gl_FUNC_LOGB],
m4/logb.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logb.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logb.m4:    gl_FUNC_LOGB_WORKS
m4/logb.m4:    case "$gl_cv_func_logb_works" in
m4/logb.m4:    AC_REQUIRE([gl_FUNC_FREXP])
m4/logb.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/logb.m4:AC_DEFUN([gl_FUNC_LOGB_WORKS],
m4/logb.m4:  AC_CACHE_CHECK([whether logb works], [gl_cv_func_logb_works],
m4/logb.m4:        [gl_cv_func_logb_works=yes],
m4/logb.m4:        [gl_cv_func_logb_works=no],
m4/logb.m4:           *gnu* | solaris* | cygwin*) gl_cv_func_logb_works="guessing no" ;;
m4/logb.m4:             gl_cv_func_logb_works="guessing yes"
m4/logb.m4:               [gl_cv_func_logb_works="guessing yes"],
m4/logb.m4:               [gl_cv_func_logb_works="guessing no"])
m4/logb.m4:           *) gl_cv_func_logb_works="guessing yes" ;;
m4/logbf.m4:AC_DEFUN([gl_FUNC_LOGBF],
m4/logbf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logbf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logbf.m4:  gl_MATHFUNC([logbf], [float], [(float)])
m4/logbf.m4:  if test $gl_cv_func_logbf_no_libm = yes \
m4/logbf.m4:     || test $gl_cv_func_logbf_in_libm = yes; then
m4/logbf.m4:    gl_FUNC_LOGBF_WORKS
m4/logbf.m4:    case "$gl_cv_func_logbf_works" in
m4/logbf.m4:    AC_REQUIRE([gl_FUNC_FREXPF])
m4/logbf.m4:    AC_REQUIRE([gl_FUNC_ISNANF])
m4/logbf.m4:AC_DEFUN([gl_FUNC_LOGBF_WORKS],
m4/logbf.m4:  AC_CACHE_CHECK([whether logbf works], [gl_cv_func_logbf_works],
m4/logbf.m4:        [gl_cv_func_logbf_works=yes],
m4/logbf.m4:        [gl_cv_func_logbf_works=no],
m4/logbf.m4:           *gnu* | solaris*) gl_cv_func_logbf_works="guessing no" ;;
m4/logbf.m4:             gl_cv_func_logbf_works="guessing yes"
m4/logbf.m4:               [gl_cv_func_logbf_works="guessing yes"],
m4/logbf.m4:               [gl_cv_func_logbf_works="guessing no"])
m4/logbf.m4:           *) gl_cv_func_logbf_works="guessing yes" ;;
m4/logbl.m4:AC_DEFUN([gl_FUNC_LOGBL],
m4/logbl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logbl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/logbl.m4:  AC_REQUIRE([gl_FUNC_LOGB])
m4/logbl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logbl.m4:  gl_MATHFUNC([logbl], [long double], [(long double)])
m4/logbl.m4:  if test $gl_cv_func_logbl_no_libm = yes \
m4/logbl.m4:     || test $gl_cv_func_logbl_in_libm = yes; then
m4/logbl.m4:    gl_FUNC_LOGBL_WORKS
m4/logbl.m4:    case "$gl_cv_func_logbl_works" in
m4/logbl.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/logbl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/logbl.m4:AC_DEFUN([gl_FUNC_LOGBL_WORKS],
m4/logbl.m4:  AC_CACHE_CHECK([whether logbl works], [gl_cv_func_logbl_works],
m4/logbl.m4:        [gl_cv_func_logbl_works=yes],
m4/logbl.m4:        [gl_cv_func_logbl_works=no],
m4/logbl.m4:           *gnu* | solaris*)  gl_cv_func_logbl_works="guessing no" ;;
m4/logbl.m4:           mingw* | windows*) gl_cv_func_logbl_works="guessing yes" ;;
m4/logbl.m4:           *)                 gl_cv_func_logbl_works="guessing yes" ;;
m4/logf-ieee.m4:dnl module description), so that gl_FUNC_LOGF can test whether 'aclocal' has
m4/logf-ieee.m4:AC_DEFUN([gl_FUNC_LOGF_IEEE],
m4/logf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_logf_required=ieee])
m4/logf-ieee.m4:  AC_REQUIRE([gl_FUNC_LOGF])
m4/logf.m4:AC_DEFUN([gl_FUNC_LOGF],
m4/logf.m4:  m4_divert_text([DEFAULTS], [gl_logf_required=plain])
m4/logf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logf.m4:  AC_REQUIRE([gl_FUNC_LOG])
m4/logf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logf.m4:    gl_FUNC_LOGF_WORKS
m4/logf.m4:    case "$gl_cv_func_logf_works" in
m4/logf.m4:    m4_ifdef([gl_FUNC_LOGF_IEEE], [
m4/logf.m4:      if test $gl_logf_required = ieee && test $REPLACE_LOGF = 0; then
m4/logf.m4:          [gl_cv_func_logf_ieee],
m4/logf.m4:              [gl_cv_func_logf_ieee=yes],
m4/logf.m4:              [gl_cv_func_logf_ieee=no],
m4/logf.m4:                 *-gnu* | gnu*)      gl_cv_func_logf_ieee="guessing yes" ;;
m4/logf.m4:                 *-musl* | midipix*) gl_cv_func_logf_ieee="guessing yes" ;;
m4/logf.m4:                 mingw* | windows*)  gl_cv_func_logf_ieee="guessing yes" ;;
m4/logf.m4:                 *)                  gl_cv_func_logf_ieee="$gl_cross_guess_normal" ;;
m4/logf.m4:        case "$gl_cv_func_logf_ieee" in
m4/logf.m4:AC_DEFUN([gl_FUNC_LOGF_WORKS],
m4/logf.m4:  AC_CACHE_CHECK([whether logf works], [gl_cv_func_logf_works],
m4/logf.m4:        [gl_cv_func_logf_works=yes],
m4/logf.m4:        [gl_cv_func_logf_works=no],
m4/logf.m4:           osf*)              gl_cv_func_logf_works="guessing no" ;;
m4/logf.m4:           mingw* | windows*) gl_cv_func_logf_works="guessing yes" ;;
m4/logf.m4:           *)                 gl_cv_func_logf_works="guessing yes" ;;
m4/login_tty.m4:AC_DEFUN([gl_FUNC_LOGIN_TTY],
m4/login_tty.m4:  AC_REQUIRE([gl_PTY_LIB])
m4/login_tty.m4:  gl_saved_libs="$LIBS"
m4/login_tty.m4:  gl_CHECK_FUNCS_ANDROID([login_tty], [[
m4/login_tty.m4:  LIBS="$gl_saved_LIBS"
m4/login_tty.m4:    case "$gl_cv_onwards_func_login_tty" in
m4/logl.m4:AC_DEFUN([gl_FUNC_LOGL],
m4/logl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/logl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logl.m4:    [gl_cv_func_logl_no_libm],
m4/logl.m4:        [gl_cv_func_logl_no_libm=yes],
m4/logl.m4:        [gl_cv_func_logl_no_libm=no])
m4/logl.m4:  if test $gl_cv_func_logl_no_libm = no; then
m4/logl.m4:      [gl_cv_func_logl_in_libm],
m4/logl.m4:          [gl_cv_func_logl_in_libm=yes],
m4/logl.m4:          [gl_cv_func_logl_in_libm=no])
m4/logl.m4:    if test $gl_cv_func_logl_in_libm = yes; then
m4/logl.m4:  if test $gl_cv_func_logl_no_libm = yes \
m4/logl.m4:     || test $gl_cv_func_logl_in_libm = yes; then
m4/logl.m4:    gl_FUNC_LOGL_WORKS
m4/logl.m4:    case "$gl_cv_func_logl_works" in
m4/logl.m4:      AC_REQUIRE([gl_FUNC_LOG])
m4/logl.m4:        AC_REQUIRE([gl_FUNC_FREXPL])
m4/logl.m4:        AC_REQUIRE([gl_FUNC_ISNANL])
m4/logl.m4:        AC_REQUIRE([gl_FUNC_FLOORL])
m4/logl.m4:AC_DEFUN([gl_FUNC_LOGL_WORKS],
m4/logl.m4:  AC_CACHE_CHECK([whether logl works], [gl_cv_func_logl_works],
m4/logl.m4:        [gl_cv_func_logl_works=yes],
m4/logl.m4:        [gl_cv_func_logl_works=no],
m4/logl.m4:           *-gnu* | gnu*)      gl_cv_func_logl_works="guessing yes" ;;
m4/logl.m4:           *-musl* | midipix*) gl_cv_func_logl_works="guessing no" ;;
m4/logl.m4:           mingw* | windows*)  gl_cv_func_logl_works="guessing yes" ;;
m4/logl.m4:           *)                  gl_cv_func_logl_works="$gl_cross_guess_normal" ;;
m4/logp1.m4:AC_DEFUN([gl_FUNC_LOGP1],
m4/logp1.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logp1.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logp1.m4:  gl_COMMON_DOUBLE_MATHFUNC([logp1])
m4/logp1.m4:    AC_REQUIRE([gl_FUNC_LOG1P])
m4/logp1f.m4:AC_DEFUN([gl_FUNC_LOGP1F],
m4/logp1f.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logp1f.m4:  AC_REQUIRE([gl_FUNC_LOGP1])
m4/logp1f.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logp1f.m4:    AC_REQUIRE([gl_FUNC_LOG1PF])
m4/logp1l.m4:AC_DEFUN([gl_FUNC_LOGP1L],
m4/logp1l.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/logp1l.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/logp1l.m4:  AC_REQUIRE([gl_FUNC_LOGP1])
m4/logp1l.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/logp1l.m4:    AC_REQUIRE([gl_FUNC_LOG1PL])
m4/lseek.m4:AC_DEFUN([gl_FUNC_LSEEK],
m4/lseek.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/lseek.m4:  AC_CACHE_CHECK([whether lseek detects pipes], [gl_cv_func_lseek_pipe],
m4/lseek.m4:         gl_cv_func_lseek_pipe=no
m4/lseek.m4:                gl_cv_func_lseek_pipe=yes
m4/lseek.m4:                gl_cv_func_lseek_pipe=no
m4/lseek.m4:             [gl_cv_func_lseek_pipe=no])
m4/lseek.m4:             [gl_cv_func_lseek_pipe=yes], [gl_cv_func_lseek_pipe=no])
m4/lseek.m4:  if test "$gl_cv_func_lseek_pipe" = no; then
m4/lseek.m4:  AC_REQUIRE([gl_SYS_TYPES_H])
m4/lseek.m4:       [gl_cv_func_lseek_works_but_incompatible],
m4/lseek.m4:          [gl_cv_func_lseek_works_but_incompatible=yes],
m4/lseek.m4:          [gl_cv_func_lseek_works_but_incompatible=no])])
m4/lseek.m4:     if test "$gl_cv_func_lseek_works_but_incompatible" = yes; then
m4/lstat.m4:AC_DEFUN([gl_FUNC_LSTAT],
m4/lstat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/lstat.m4:    AC_REQUIRE([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
m4/lstat.m4:    case $host_os,$gl_cv_func_lstat_dereferences_slashed_symlink in
m4/lstat.m4:AC_DEFUN([gl_PREREQ_LSTAT], [:])
m4/lstat.m4:AC_DEFUN([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK],
m4/lstat.m4:    [gl_cv_func_lstat_dereferences_slashed_symlink],
m4/lstat.m4:       [gl_cv_func_lstat_dereferences_slashed_symlink=yes],
m4/lstat.m4:       [gl_cv_func_lstat_dereferences_slashed_symlink=no],
m4/lstat.m4:            gl_cv_func_lstat_dereferences_slashed_symlink="guessing yes" ;;
m4/lstat.m4:            gl_cv_func_lstat_dereferences_slashed_symlink="guessing yes" ;;
m4/lstat.m4:            gl_cv_func_lstat_dereferences_slashed_symlink="guessing yes" ;;
m4/lstat.m4:            gl_cv_func_lstat_dereferences_slashed_symlink="guessing no" ;;
m4/lstat.m4:            gl_cv_func_lstat_dereferences_slashed_symlink="$gl_cross_guess_normal" ;;
m4/lstat.m4:  case "$gl_cv_func_lstat_dereferences_slashed_symlink" in
m4/malloc-align.m4:AC_DEFUN([gl_MALLOC_ALIGNMENT],
m4/malloc-align.m4:    [gl_cv_malloc_alignment],
m4/malloc-align.m4:    [gl_cv_malloc_alignment=
m4/malloc-align.m4:       [gl_cv_malloc_alignment=`cat conftest.out`],
m4/malloc-align.m4:       [gl_cv_malloc_alignment="unknown"],
m4/malloc-align.m4:        gl_cv_malloc_alignment="unknown"
m4/malloc-align.m4:                [gl_cv_malloc_alignment="guessing $nn"
m4/malloc-align.m4:                [gl_cv_malloc_alignment="guessing $nn"
m4/malloc-align.m4:  case "$gl_cv_malloc_alignment" in
m4/malloc-align.m4:      value=`echo "$gl_cv_malloc_alignment" | sed -e 's/guessing //'`
m4/malloc-align.m4:      value="$gl_cv_malloc_alignment"
m4/malloc.m4:          *) ac_cv_func_malloc_0_nonnull="$gl_cross_guess_normal" ;;
m4/malloc.m4:# gl_FUNC_MALLOC_GNU
m4/malloc.m4:AC_DEFUN([gl_FUNC_MALLOC_GNU],
m4/malloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/malloc.m4:  AC_REQUIRE([gl_FUNC_MALLOC_POSIX])
m4/malloc.m4:# gl_FUNC_MALLOC_PTRDIFF
m4/malloc.m4:AC_DEFUN([gl_FUNC_MALLOC_PTRDIFF],
m4/malloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/malloc.m4:  AC_REQUIRE([gl_CHECK_MALLOC_PTRDIFF])
m4/malloc.m4:  test "$gl_cv_malloc_ptrdiff" = yes || REPLACE_MALLOC_FOR_MALLOC_POSIX=1
m4/malloc.m4:# Set gl_cv_func_malloc_gnu to yes or no accordingly.
m4/malloc.m4:AC_DEFUN([gl_CHECK_MALLOC_PTRDIFF],
m4/malloc.m4:    [gl_cv_malloc_ptrdiff],
m4/malloc.m4:       [gl_cv_malloc_ptrdiff=yes],
m4/malloc.m4:       [gl_cv_malloc_ptrdiff=no])
m4/malloc.m4:# gl_FUNC_MALLOC_POSIX
m4/malloc.m4:AC_DEFUN([gl_FUNC_MALLOC_POSIX],
m4/malloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/malloc.m4:  AC_REQUIRE([gl_FUNC_MALLOC_PTRDIFF])
m4/malloc.m4:  AC_REQUIRE([gl_CHECK_MALLOC_POSIX])
m4/malloc.m4:  if test "$gl_cv_func_malloc_posix" = yes; then
m4/malloc.m4:# Set gl_cv_func_malloc_posix to yes or no accordingly.
m4/malloc.m4:AC_DEFUN([gl_CHECK_MALLOC_POSIX],
m4/malloc.m4:    [gl_cv_func_malloc_posix],
m4/malloc.m4:          gl_cv_func_malloc_posix=no ;;
m4/malloc.m4:          gl_cv_func_malloc_posix=no ;;
m4/malloc.m4:          gl_cv_func_malloc_posix=yes ;;
m4/malloca.m4:AC_DEFUN([gl_MALLOCA],
m4/malloca.m4:  dnl gl_FUNC_ALLOCA   dnl Already brought in by the module dependencies.
m4/malloca.m4:  AC_REQUIRE([gl_EEMALLOC])
m4/malloc_h.m4:AC_DEFUN_ONCE([gl_MALLOC_H],
m4/malloc_h.m4:  AC_REQUIRE([gl_MALLOC_H_DEFAULTS])
m4/malloc_h.m4:  gl_CHECK_NEXT_HEADERS([malloc.h])
m4/malloc_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/malloc_h.m4:# gl_MALLOC_MODULE_INDICATOR([modulename])
m4/malloc_h.m4:AC_DEFUN([gl_MALLOC_MODULE_INDICATOR],
m4/malloc_h.m4:  gl_MALLOC_H_REQUIRE_DEFAULTS
m4/malloc_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/malloc_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/malloc_h.m4:AC_DEFUN([gl_MALLOC_H_REQUIRE_DEFAULTS],
m4/malloc_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MEMALIGN])
m4/malloc_h.m4:  gl_STDLIB_H_REQUIRE_DEFAULTS
m4/malloc_h.m4:  AC_REQUIRE([gl_MALLOC_H_DEFAULTS])
m4/malloc_h.m4:AC_DEFUN([gl_MALLOC_H_DEFAULTS],
m4/manywarnings-c++.m4:# Implementation of the specialization of gl_MANYWARN_ALL_GCC
m4/manywarnings-c++.m4:AC_DEFUN([gl_MANYWARN_ALL_GCC_CXX_IMPL],
m4/manywarnings-c++.m4:      [gl_cv_cxx_nomfi_supported],
m4/manywarnings-c++.m4:      [gl_saved_CXXFLAGS="$CXXFLAGS"
m4/manywarnings-c++.m4:         [gl_cv_cxx_nomfi_supported=yes],
m4/manywarnings-c++.m4:         [gl_cv_cxx_nomfi_supported=no])
m4/manywarnings-c++.m4:       CXXFLAGS="$gl_saved_CXXFLAGS"
m4/manywarnings-c++.m4:    if test "$gl_cv_cxx_nomfi_supported" = yes; then
m4/manywarnings-c++.m4:        [gl_cv_cxx_nomfi_needed],
m4/manywarnings-c++.m4:        [gl_saved_CXXFLAGS="$CXXFLAGS"
m4/manywarnings-c++.m4:           [gl_cv_cxx_nomfi_needed=no],
m4/manywarnings-c++.m4:           [gl_cv_cxx_nomfi_needed=yes])
m4/manywarnings-c++.m4:         CXXFLAGS="$gl_saved_CXXFLAGS"
m4/manywarnings-c++.m4:      [gl_cv_cxx_uninitialized_supported],
m4/manywarnings-c++.m4:      [gl_saved_CXXFLAGS="$CXXFLAGS"
m4/manywarnings-c++.m4:         [gl_cv_cxx_uninitialized_supported=yes],
m4/manywarnings-c++.m4:         [gl_cv_cxx_uninitialized_supported=no])
m4/manywarnings-c++.m4:       CXXFLAGS="$gl_saved_CXXFLAGS"
m4/manywarnings-c++.m4:  gl_manywarn_set=
m4/manywarnings-c++.m4:  for gl_manywarn_item in \
m4/manywarnings-c++.m4:    gl_manywarn_set="$gl_manywarn_set $gl_manywarn_item"
m4/manywarnings-c++.m4:  gl_manywarn_set="$gl_manywarn_set -Warray-bounds=2"
m4/manywarnings-c++.m4:  gl_manywarn_set="$gl_manywarn_set -Wnormalized=nfc"
m4/manywarnings-c++.m4:  gl_manywarn_set="$gl_manywarn_set -Wshift-overflow=2"
m4/manywarnings-c++.m4:  gl_manywarn_set="$gl_manywarn_set -Wunused-const-variable=2"
m4/manywarnings-c++.m4:        gl_manywarn_set="$gl_manywarn_set -fdiagnostics-show-option"
m4/manywarnings-c++.m4:        gl_manywarn_set="$gl_manywarn_set -funit-at-a-time"
m4/manywarnings-c++.m4:  if test "$gl_cv_cxx_nomfi_needed" = yes; then
m4/manywarnings-c++.m4:    gl_manywarn_set="$gl_manywarn_set -Wno-missing-field-initializers"
m4/manywarnings-c++.m4:  if test "$gl_cv_cxx_uninitialized_supported" = no; then
m4/manywarnings-c++.m4:    gl_manywarn_set="$gl_manywarn_set -Wno-uninitialized"
m4/manywarnings-c++.m4:  $1=$gl_manywarn_set
m4/manywarnings.m4:# gl_MANYWARN_COMPLEMENT(OUTVAR, LISTVAR, REMOVEVAR)
m4/manywarnings.m4:AC_DEFUN([gl_MANYWARN_COMPLEMENT],
m4/manywarnings.m4:  gl_warn_set=
m4/manywarnings.m4:  for gl_warn_item
m4/manywarnings.m4:      *" $gl_warn_item "*)
m4/manywarnings.m4:        AS_VAR_APPEND([gl_warn_set], [" $gl_warn_item"])
m4/manywarnings.m4:  $1=$gl_warn_set
m4/manywarnings.m4:# gl_MANYWARN_ALL_GCC(VARIABLE)
m4/manywarnings.m4:# Note that you need to test them using gl_WARN_ADD if you want to
m4/manywarnings.m4:AC_DEFUN([gl_MANYWARN_ALL_GCC],
m4/manywarnings.m4:AC_DEFUN([gl_MANYWARN_ALL_GCC(C)],
m4/manywarnings.m4:      [gl_cv_cc_nomfi_needed],
m4/manywarnings.m4:      [gl_cv_cc_nomfi_needed=no
m4/manywarnings.m4:       gl_saved_CFLAGS="$CFLAGS"
m4/manywarnings.m4:            [gl_cv_cc_nomfi_needed=yes])])
m4/manywarnings.m4:       CFLAGS="$gl_saved_CFLAGS"
m4/manywarnings.m4:      [gl_cv_cc_uninitialized_supported],
m4/manywarnings.m4:      [gl_saved_CFLAGS="$CFLAGS"
m4/manywarnings.m4:         [gl_cv_cc_uninitialized_supported=yes],
m4/manywarnings.m4:         [gl_cv_cc_uninitialized_supported=no])
m4/manywarnings.m4:       CFLAGS="$gl_saved_CFLAGS"
m4/manywarnings.m4:  for gl_manywarn_item in -fanalyzer -fstrict-flex-arrays \
m4/manywarnings.m4:    AS_VAR_APPEND([$1], [" $gl_manywarn_item"])
m4/manywarnings.m4:  if test -n "$GCC" && gl_gcc_version=`($CC --version) 2>/dev/null`; then
m4/manywarnings.m4:    case $gl_gcc_version in
m4/manywarnings.m4:    case $gl_gcc_version in
m4/manywarnings.m4:  if test "$gl_cv_cc_nomfi_needed" = yes; then
m4/manywarnings.m4:  if test "$gl_cv_cc_uninitialized_supported" = no; then
m4/manywarnings.m4:AC_DEFUN([gl_MANYWARN_ALL_GCC(C++)],
m4/manywarnings.m4:  gl_MANYWARN_ALL_GCC_CXX_IMPL([$1])
m4/mathfunc.m4:# gl_MATHFUNC(FUNC, RETTYPE, PARAMTYPES [, INCLUDES] [, EXTRA-CODE])
m4/mathfunc.m4:AC_DEFUN([gl_MATHFUNC],
m4/mathfunc.m4:    [gl_cv_func_]func[_no_libm],
m4/mathfunc.m4:        [gl_cv_func_]func[_no_libm=yes],
m4/mathfunc.m4:        [gl_cv_func_]func[_no_libm=no])
m4/mathfunc.m4:  if test $gl_cv_func_[]func[]_no_libm = no; then
m4/mathfunc.m4:      [gl_cv_func_]func[_in_libm],
m4/mathfunc.m4:          [gl_cv_func_]func[_in_libm=yes],
m4/mathfunc.m4:          [gl_cv_func_]func[_in_libm=no])
m4/mathfunc.m4:    if test $gl_cv_func_[]func[]_in_libm = yes; then
m4/mathfunc.m4:# gl_COMMON_DOUBLE_MATHFUNC(FUNC)
m4/mathfunc.m4:AC_DEFUN([gl_COMMON_DOUBLE_MATHFUNC],
m4/mathfunc.m4:  AC_REQUIRE([gl_COMMON_DOUBLE_MATHFUNC_TEST])
m4/mathfunc.m4:AC_DEFUN([gl_COMMON_DOUBLE_MATHFUNC_TEST],
m4/mathfunc.m4:  dnl gl_MATHFUNC([acos], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([asin], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([atan], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([atan2], [double], [(double, double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([cbrt], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([cos], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([cosh], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([erf], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([erfc], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([exp], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([fmod], [double], [(double, double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([hypot], [double], [(double, double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([j0], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([j1], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([jn], [double], [(int, double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([lgamma], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([log], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([log10], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([log1p], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([pow], [double], [(double, double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([remainder], [double], [(double, double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([sin], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([sinh], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([sqrt], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([tan], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([tanh], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([y0], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([y1], [double], [(double)])
m4/mathfunc.m4:  dnl gl_MATHFUNC([yn], [double], [(int, double)])
m4/mathfunc.m4:  gl_MATHFUNC([pow], [double], [(double, double)])
m4/math_h.m4:AC_DEFUN_ONCE([gl_MATH_H],
m4/math_h.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/math_h.m4:  gl_CHECK_NEXT_HEADERS([math.h])
m4/math_h.m4:  AC_CACHE_CHECK([whether NAN macro works], [gl_cv_header_math_nan_works],
m4/math_h.m4:      [gl_cv_header_math_nan_works=yes],
m4/math_h.m4:      [gl_cv_header_math_nan_works=no])])
m4/math_h.m4:  if test $gl_cv_header_math_nan_works = no; then
m4/math_h.m4:  AC_CACHE_CHECK([whether HUGE_VAL works], [gl_cv_header_math_huge_val_works],
m4/math_h.m4:      [gl_cv_header_math_huge_val_works=yes],
m4/math_h.m4:      [gl_cv_header_math_huge_val_works=no])])
m4/math_h.m4:  if test $gl_cv_header_math_huge_val_works = no; then
m4/math_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <math.h>]],
m4/math_h.m4:# gl_MATH_MODULE_INDICATOR([modulename])
m4/math_h.m4:AC_DEFUN([gl_MATH_MODULE_INDICATOR],
m4/math_h.m4:  gl_MATH_H_REQUIRE_DEFAULTS
m4/math_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/math_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/math_h.m4:AC_DEFUN([gl_MATH_H_REQUIRE_DEFAULTS],
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ACOSF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ACOSL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ASINF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ASINL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ATANF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ATANL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ATAN2F])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CBRT])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CBRTF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CBRTL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CEIL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CEILF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CEILL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_COPYSIGN])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_COPYSIGNF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_COPYSIGNL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_COSF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_COSL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_COSHF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXPF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXPL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXP2])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXP2F])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXP2L])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXPM1])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXPM1F])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXPM1L])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FABSF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FABSL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FLOOR])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FLOORF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FLOORL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FMA])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FMAF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FMAL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FMOD])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FMODF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FMODL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FREXPF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FREXP])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FREXPL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPAYLOAD])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPAYLOADF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPAYLOADL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_HYPOT])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_HYPOTF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_HYPOTL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ILOGB])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ILOGBF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ILOGBL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISFINITE])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISINF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISNAN])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISNANF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISNAND])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISNANL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LDEXP])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LDEXPF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LDEXPL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG10])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG10F])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG10L])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG1P])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG1PF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG1PL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG2])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG2F])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOG2L])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGB])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGBF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGBL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGP1])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGP1F])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGP1L])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MODF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MODFF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MODFL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POWF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REMAINDER])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REMAINDERF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REMAINDERL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RINT])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RINTF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RINTL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ROUND])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ROUNDF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ROUNDL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETPAYLOAD])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETPAYLOADF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETPAYLOADL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETPAYLOADSIG])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETPAYLOADSIGF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETPAYLOADSIGL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SIGNBIT])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SINF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SINL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SINHF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SQRTF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SQRTL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TANF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TANL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TANHF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TOTALORDER])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TOTALORDERF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TOTALORDERL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TOTALORDERMAG])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TOTALORDERMAGF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TOTALORDERMAGL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TRUNC])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TRUNCF])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TRUNCL])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_J0], [1])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_J1], [1])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_JN], [1])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_Y0], [1])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_Y1], [1])
m4/math_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_YN], [1])
m4/math_h.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/math_h.m4:AC_DEFUN([gl_MATH_H_DEFAULTS],
m4/math_h.m4:# gl_LONG_DOUBLE_VS_DOUBLE
m4/math_h.m4:AC_DEFUN([gl_LONG_DOUBLE_VS_DOUBLE],
m4/math_h.m4:    [gl_cv_long_double_equals_double],
m4/math_h.m4:       [gl_cv_long_double_equals_double=yes],
m4/math_h.m4:       [gl_cv_long_double_equals_double=no])
m4/math_h.m4:  if test $gl_cv_long_double_equals_double = yes; then
m4/mbchar.m4:AC_DEFUN([gl_MBCHAR],
m4/mbfile.m4:AC_DEFUN([gl_MBFILE],
m4/mbiter.m4:AC_DEFUN([gl_MBITER],
m4/mbrlen.m4:AC_DEFUN([gl_FUNC_MBRLEN],
m4/mbrlen.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/mbrlen.m4:  AC_REQUIRE([gl_FUNC_MBRTOWC])
m4/mbrlen.m4:dnl Result is gl_cv_func_mbrlen_incomplete_state.
m4/mbrlen.m4:AC_DEFUN([gl_MBRLEN_INCOMPLETE_STATE],
m4/mbrlen.m4:    [gl_cv_func_mbrlen_incomplete_state],
m4/mbrlen.m4:        aix* | osf*) gl_cv_func_mbrlen_incomplete_state="guessing no" ;;
m4/mbrlen.m4:        *)           gl_cv_func_mbrlen_incomplete_state="guessing yes" ;;
m4/mbrlen.m4:          [gl_cv_func_mbrlen_incomplete_state=yes],
m4/mbrlen.m4:          [gl_cv_func_mbrlen_incomplete_state=no],
m4/mbrlen.m4:dnl Result is gl_cv_func_mbrlen_retval.
m4/mbrlen.m4:AC_DEFUN([gl_MBRLEN_RETVAL],
m4/mbrlen.m4:    [gl_cv_func_mbrlen_retval],
m4/mbrlen.m4:        hpux* | solaris*) gl_cv_func_mbrlen_retval="guessing no" ;;
m4/mbrlen.m4:        *)                gl_cv_func_mbrlen_retval="guessing yes" ;;
m4/mbrlen.m4:          [gl_cv_func_mbrlen_retval=yes],
m4/mbrlen.m4:          [gl_cv_func_mbrlen_retval=no],
m4/mbrlen.m4:dnl Result is gl_cv_func_mbrlen_nul_retval.
m4/mbrlen.m4:AC_DEFUN([gl_MBRLEN_NUL_RETVAL],
m4/mbrlen.m4:    [gl_cv_func_mbrlen_nul_retval],
m4/mbrlen.m4:        solaris2.9) gl_cv_func_mbrlen_nul_retval="guessing no" ;;
m4/mbrlen.m4:        *)          gl_cv_func_mbrlen_nul_retval="guessing yes" ;;
m4/mbrlen.m4:          [gl_cv_func_mbrlen_nul_retval=yes],
m4/mbrlen.m4:          [gl_cv_func_mbrlen_nul_retval=no],
m4/mbrlen.m4:AC_DEFUN([gl_MBRLEN_EMPTY_INPUT],
m4/mbrlen.m4:    [gl_cv_func_mbrlen_empty_input],
m4/mbrlen.m4:        aix* | *-gnu* | gnu*) gl_cv_func_mbrlen_empty_input="guessing no" ;;
m4/mbrlen.m4:        *)                    gl_cv_func_mbrlen_empty_input="guessing yes" ;;
m4/mbrlen.m4:        [gl_cv_func_mbrlen_empty_input=yes],
m4/mbrlen.m4:        [gl_cv_func_mbrlen_empty_input=no],
m4/mbrlen.m4:AC_DEFUN([gl_PREREQ_MBRLEN], [
m4/mbrtoc16.m4:AC_DEFUN([gl_FUNC_MBRTOC16],
m4/mbrtoc16.m4:  AC_REQUIRE([gl_UCHAR_H_DEFAULTS])
m4/mbrtoc16.m4:  AC_REQUIRE([gl_MBSTATE_T_BROKEN])
m4/mbrtoc16.m4:  AC_REQUIRE([gl_TYPE_CHAR16_T])
m4/mbrtoc16.m4:  AC_REQUIRE([gl_MBRTOC16_SANITYCHECK])
m4/mbrtoc16.m4:  AC_REQUIRE([gl_CHECK_FUNC_MBRTOC16])
m4/mbrtoc16.m4:  if test $gl_cv_func_mbrtoc16 = no; then
m4/mbrtoc16.m4:      gl_MBRTOC16_NULL_DESTINATION
m4/mbrtoc16.m4:      gl_MBRTOC16_RETVAL
m4/mbrtoc16.m4:      gl_MBRTOC16_EMPTY_INPUT
m4/mbrtoc16.m4:      gl_MBRTOC16_C_LOCALE
m4/mbrtoc16.m4:      case "$gl_cv_func_mbrtoc16_null_destination" in
m4/mbrtoc16.m4:      case "$gl_cv_func_mbrtoc16_retval" in
m4/mbrtoc16.m4:      case "$gl_cv_func_mbrtoc16_empty_input" in
m4/mbrtoc16.m4:      case "$gl_cv_func_mbrtoc16_C_locale_sans_EILSEQ" in
m4/mbrtoc16.m4:AC_DEFUN([gl_CHECK_FUNC_MBRTOC16],
m4/mbrtoc16.m4:  dnl Cf. gl_CHECK_FUNCS_ANDROID
m4/mbrtoc16.m4:    gl_cv_func_mbrtoc16="$ac_cv_func_mbrtoc16"
m4/mbrtoc16.m4:    gl_cv_func_mbrtoc16=no
m4/mbrtoc16.m4:AC_DEFUN([gl_MBRTOC16_NULL_DESTINATION],
m4/mbrtoc16.m4:  AC_REQUIRE([gl_TYPE_CHAR16_T])
m4/mbrtoc16.m4:    [gl_cv_func_mbrtoc16_null_destination],
m4/mbrtoc16.m4:        *-gnu* | gnu*) gl_cv_func_mbrtoc16_null_destination="guessing no" ;;
m4/mbrtoc16.m4:        *)             gl_cv_func_mbrtoc16_null_destination="guessing yes" ;;
m4/mbrtoc16.m4:          [gl_cv_func_mbrtoc16_null_destination=yes],
m4/mbrtoc16.m4:          [gl_cv_func_mbrtoc16_null_destination=no],
m4/mbrtoc16.m4:dnl Result is gl_cv_func_mbrtoc16_retval.
m4/mbrtoc16.m4:AC_DEFUN([gl_MBRTOC16_RETVAL],
m4/mbrtoc16.m4:    [gl_cv_func_mbrtoc16_retval],
m4/mbrtoc16.m4:        linux*-android*)   gl_cv_func_mbrtoc16_retval="guessing no" ;;
m4/mbrtoc16.m4:        mingw* | windows*) gl_cv_func_mbrtoc16_retval="guessing no" ;;
m4/mbrtoc16.m4:        *)                 gl_cv_func_mbrtoc16_retval="guessing yes" ;;
m4/mbrtoc16.m4:        [gl_cv_func_mbrtoc16_retval=yes],
m4/mbrtoc16.m4:           gl_cv_func_mbrtoc16_retval=no
m4/mbrtoc16.m4:AC_DEFUN([gl_MBRTOC16_EMPTY_INPUT],
m4/mbrtoc16.m4:    [gl_cv_func_mbrtoc16_empty_input],
m4/mbrtoc16.m4:        [gl_cv_func_mbrtoc16_empty_input=yes],
m4/mbrtoc16.m4:        [gl_cv_func_mbrtoc16_empty_input=no],
m4/mbrtoc16.m4:           *-gnu* | gnu*)   gl_cv_func_mbrtoc16_empty_input="guessing no" ;;
m4/mbrtoc16.m4:           linux*-android*) gl_cv_func_mbrtoc16_empty_input="guessing no" ;;
m4/mbrtoc16.m4:           *)               gl_cv_func_mbrtoc16_empty_input="guessing yes" ;;
m4/mbrtoc16.m4:AC_DEFUN([gl_MBRTOC16_C_LOCALE],
m4/mbrtoc16.m4:    [gl_cv_func_mbrtoc16_C_locale_sans_EILSEQ],
m4/mbrtoc16.m4:       [gl_cv_func_mbrtoc16_C_locale_sans_EILSEQ=yes],
m4/mbrtoc16.m4:       [gl_cv_func_mbrtoc16_C_locale_sans_EILSEQ=no],
m4/mbrtoc16.m4:          mingw* | windows*) gl_cv_func_mbrtoc16_C_locale_sans_EILSEQ="guessing yes" ;;
m4/mbrtoc16.m4:          *)                 gl_cv_func_mbrtoc16_C_locale_sans_EILSEQ="$gl_cross_guess_normal" ;;
m4/mbrtoc16.m4:AC_DEFUN([gl_MBRTOC16_SANITYCHECK],
m4/mbrtoc16.m4:  AC_REQUIRE([gl_TYPE_CHAR16_T])
m4/mbrtoc16.m4:  AC_REQUIRE([gl_CHECK_FUNC_MBRTOC16])
m4/mbrtoc16.m4:  if test $GNULIBHEADERS_OVERRIDE_CHAR16_T = 1 || test $gl_cv_func_mbrtoc16 = no; then
m4/mbrtoc16.m4:      [gl_cv_func_mbrtoc16_sanitycheck],
m4/mbrtoc16.m4:            gl_cv_func_mbrtoc16_sanitycheck="guessing no"
m4/mbrtoc16.m4:            gl_cv_func_mbrtoc16_sanitycheck="guessing yes"
m4/mbrtoc16.m4:            [gl_cv_func_mbrtoc16_sanitycheck=yes],
m4/mbrtoc16.m4:            [gl_cv_func_mbrtoc16_sanitycheck=no],
m4/mbrtoc16.m4:    case "$gl_cv_func_mbrtoc16_sanitycheck" in
m4/mbrtoc16.m4:AC_DEFUN([gl_PREREQ_MBRTOC16], [
m4/mbrtoc32.m4:AC_DEFUN([gl_FUNC_MBRTOC32],
m4/mbrtoc32.m4:  AC_REQUIRE([gl_UCHAR_H_DEFAULTS])
m4/mbrtoc32.m4:  AC_REQUIRE([gl_MBSTATE_T_BROKEN])
m4/mbrtoc32.m4:  AC_REQUIRE([gl_TYPE_CHAR32_T])
m4/mbrtoc32.m4:  AC_REQUIRE([gl_MBRTOC32_SANITYCHECK])
m4/mbrtoc32.m4:  AC_REQUIRE([gl_CHECK_FUNC_MBRTOC32])
m4/mbrtoc32.m4:  if test $gl_cv_func_mbrtoc32 = no; then
m4/mbrtoc32.m4:      gl_MBRTOC32_EMPTY_INPUT
m4/mbrtoc32.m4:      gl_MBRTOC32_C_LOCALE
m4/mbrtoc32.m4:      gl_MBRTOC32_UTF8_LOCALE
m4/mbrtoc32.m4:      case "$gl_cv_func_mbrtoc32_empty_input" in
m4/mbrtoc32.m4:      case "$gl_cv_func_mbrtoc32_C_locale_sans_EILSEQ" in
m4/mbrtoc32.m4:      case "$gl_cv_func_mbrtoc32_utf8_locale_works" in
m4/mbrtoc32.m4:AC_DEFUN([gl_CHECK_FUNC_MBRTOC32],
m4/mbrtoc32.m4:  dnl Cf. gl_CHECK_FUNCS_ANDROID
m4/mbrtoc32.m4:    AC_CACHE_CHECK([for mbrtoc32], [gl_cv_func_mbrtoc32],
m4/mbrtoc32.m4:         [gl_cv_func_mbrtoc32=yes],
m4/mbrtoc32.m4:         [gl_cv_func_mbrtoc32=no])
m4/mbrtoc32.m4:    gl_cv_func_mbrtoc32=no
m4/mbrtoc32.m4:AC_DEFUN([gl_MBRTOC32_EMPTY_INPUT],
m4/mbrtoc32.m4:    [gl_cv_func_mbrtoc32_empty_input],
m4/mbrtoc32.m4:        [gl_cv_func_mbrtoc32_empty_input=yes],
m4/mbrtoc32.m4:        [gl_cv_func_mbrtoc32_empty_input=no],
m4/mbrtoc32.m4:           *-gnu* | gnu*)     gl_cv_func_mbrtoc32_empty_input="guessing no" ;;
m4/mbrtoc32.m4:           linux*-android*)   gl_cv_func_mbrtoc32_empty_input="guessing no" ;;
m4/mbrtoc32.m4:           mingw* | windows*) gl_cv_func_mbrtoc32_empty_input="guessing no" ;;
m4/mbrtoc32.m4:           *)                 gl_cv_func_mbrtoc32_empty_input="guessing yes" ;;
m4/mbrtoc32.m4:AC_DEFUN([gl_MBRTOC32_C_LOCALE],
m4/mbrtoc32.m4:    [gl_cv_func_mbrtoc32_C_locale_sans_EILSEQ],
m4/mbrtoc32.m4:       [gl_cv_func_mbrtoc32_C_locale_sans_EILSEQ=yes],
m4/mbrtoc32.m4:       [gl_cv_func_mbrtoc32_C_locale_sans_EILSEQ=no],
m4/mbrtoc32.m4:          mingw* | windows*) gl_cv_func_mbrtoc32_C_locale_sans_EILSEQ="guessing yes" ;;
m4/mbrtoc32.m4:          *)                 gl_cv_func_mbrtoc32_C_locale_sans_EILSEQ="$gl_cross_guess_normal" ;;
m4/mbrtoc32.m4:AC_DEFUN([gl_MBRTOC32_UTF8_LOCALE],
m4/mbrtoc32.m4:    [gl_cv_func_mbrtoc32_utf8_locale_works],
m4/mbrtoc32.m4:       [gl_cv_func_mbrtoc32_utf8_locale_works=yes],
m4/mbrtoc32.m4:       [gl_cv_func_mbrtoc32_utf8_locale_works=no],
m4/mbrtoc32.m4:          cygwin*) gl_cv_func_mbrtoc32_utf8_locale_works="guessing yes" ;;
m4/mbrtoc32.m4:          *)       gl_cv_func_mbrtoc32_utf8_locale_works="$gl_cross_guess_normal" ;;
m4/mbrtoc32.m4:AC_DEFUN([gl_MBRTOC32_SANITYCHECK],
m4/mbrtoc32.m4:  AC_REQUIRE([gl_TYPE_CHAR32_T])
m4/mbrtoc32.m4:  AC_REQUIRE([gl_CHECK_FUNC_MBRTOC32])
m4/mbrtoc32.m4:  if test $GNULIBHEADERS_OVERRIDE_CHAR32_T = 1 || test $gl_cv_func_mbrtoc32 = no; then
m4/mbrtoc32.m4:      [gl_cv_func_mbrtoc32_sanitycheck],
m4/mbrtoc32.m4:            gl_cv_func_mbrtoc32_sanitycheck="guessing no"
m4/mbrtoc32.m4:            gl_cv_func_mbrtoc32_sanitycheck="guessing yes"
m4/mbrtoc32.m4:            [gl_cv_func_mbrtoc32_sanitycheck=yes],
m4/mbrtoc32.m4:            [gl_cv_func_mbrtoc32_sanitycheck=no],
m4/mbrtoc32.m4:    case "$gl_cv_func_mbrtoc32_sanitycheck" in
m4/mbrtoc32.m4:AC_DEFUN([gl_PREREQ_MBRTOC32], [
m4/mbrtoc32.m4:  AC_REQUIRE([gl_C32RTOMB_SANITYCHECK])
m4/mbrtowc.m4:AC_DEFUN([gl_FUNC_MBRTOWC],
m4/mbrtowc.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/mbrtowc.m4:  AC_REQUIRE([gl_PTHREADLIB])
m4/mbrtowc.m4:  gl_MBSTATE_T_BROKEN
m4/mbrtowc.m4:      gl_MBRTOWC_NULL_ARG1
m4/mbrtowc.m4:      gl_MBRTOWC_NULL_ARG2
m4/mbrtowc.m4:      gl_MBRTOWC_RETVAL
m4/mbrtowc.m4:      gl_MBRTOWC_NUL_RETVAL
m4/mbrtowc.m4:      gl_MBRTOWC_STORES_INCOMPLETE
m4/mbrtowc.m4:      gl_MBRTOWC_EMPTY_INPUT
m4/mbrtowc.m4:      gl_MBRTOWC_C_LOCALE
m4/mbrtowc.m4:      case "$gl_cv_func_mbrtowc_null_arg1" in
m4/mbrtowc.m4:      case "$gl_cv_func_mbrtowc_null_arg2" in
m4/mbrtowc.m4:      case "$gl_cv_func_mbrtowc_retval" in
m4/mbrtowc.m4:      case "$gl_cv_func_mbrtowc_nul_retval" in
m4/mbrtowc.m4:      case "$gl_cv_func_mbrtowc_stores_incomplete" in
m4/mbrtowc.m4:      case "$gl_cv_func_mbrtowc_empty_input" in
m4/mbrtowc.m4:      case "$gl_cv_func_mbrtowc_C_locale_sans_EILSEQ" in
m4/mbrtowc.m4:        gl_WEAK_SYMBOLS
m4/mbrtowc.m4:        case "$gl_cv_have_weak" in
m4/mbrtowc.m4:AC_DEFUN_ONCE([gl_MBSTATE_T_BROKEN],
m4/mbrtowc.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/mbrtowc.m4:    gl_MBRTOWC_INCOMPLETE_STATE
m4/mbrtowc.m4:    gl_MBRTOWC_SANITYCHECK
m4/mbrtowc.m4:    case "$gl_cv_func_mbrtowc_incomplete_state" in
m4/mbrtowc.m4:    case "$gl_cv_func_mbrtowc_sanitycheck" in
m4/mbrtowc.m4:dnl Result is gl_cv_func_mbrtowc_incomplete_state.
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_INCOMPLETE_STATE],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_incomplete_state],
m4/mbrtowc.m4:        aix* | osf*) gl_cv_func_mbrtowc_incomplete_state="guessing no" ;;
m4/mbrtowc.m4:        *)           gl_cv_func_mbrtowc_incomplete_state="guessing yes" ;;
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_incomplete_state=yes],
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_incomplete_state=no],
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_incomplete_state=yes],
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_incomplete_state=no],
m4/mbrtowc.m4:dnl Result is gl_cv_func_mbrtowc_sanitycheck.
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_SANITYCHECK],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_sanitycheck],
m4/mbrtowc.m4:        solaris2.8) gl_cv_func_mbrtowc_sanitycheck="guessing no" ;;
m4/mbrtowc.m4:        *)          gl_cv_func_mbrtowc_sanitycheck="guessing yes" ;;
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_sanitycheck=yes],
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_sanitycheck=no],
m4/mbrtowc.m4:dnl Result is gl_cv_func_mbrtowc_null_arg1.
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_NULL_ARG1],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_null_arg1],
m4/mbrtowc.m4:        solaris*) gl_cv_func_mbrtowc_null_arg1="guessing no" ;;
m4/mbrtowc.m4:        *)        gl_cv_func_mbrtowc_null_arg1="guessing yes" ;;
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_null_arg1=yes],
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_null_arg1=no],
m4/mbrtowc.m4:dnl Result is gl_cv_func_mbrtowc_null_arg2.
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_NULL_ARG2],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_null_arg2],
m4/mbrtowc.m4:        osf*) gl_cv_func_mbrtowc_null_arg2="guessing no" ;;
m4/mbrtowc.m4:        *)    gl_cv_func_mbrtowc_null_arg2="guessing yes" ;;
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_null_arg2=yes],
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_null_arg2=no],
m4/mbrtowc.m4:dnl Result is gl_cv_func_mbrtowc_retval.
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_RETVAL],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_retval],
m4/mbrtowc.m4:          gl_cv_func_mbrtowc_retval="guessing no" ;;
m4/mbrtowc.m4:          gl_cv_func_mbrtowc_retval="guessing yes" ;;
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_retval=yes],
m4/mbrtowc.m4:             gl_cv_func_mbrtowc_retval=no
m4/mbrtowc.m4:dnl Result is gl_cv_func_mbrtowc_nul_retval.
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_NUL_RETVAL],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_nul_retval],
m4/mbrtowc.m4:        solaris2.[89]) gl_cv_func_mbrtowc_nul_retval="guessing no" ;;
m4/mbrtowc.m4:        *)             gl_cv_func_mbrtowc_nul_retval="guessing yes" ;;
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_nul_retval=yes],
m4/mbrtowc.m4:          [gl_cv_func_mbrtowc_nul_retval=no],
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_STORES_INCOMPLETE],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_stores_incomplete],
m4/mbrtowc.m4:       mingw* | windows*) gl_cv_func_mbrtowc_stores_incomplete="guessing yes" ;;
m4/mbrtowc.m4:       *)                 gl_cv_func_mbrtowc_stores_incomplete="guessing no" ;;
m4/mbrtowc.m4:           [gl_cv_func_mbrtowc_stores_incomplete=no],
m4/mbrtowc.m4:           [gl_cv_func_mbrtowc_stores_incomplete=yes],
m4/mbrtowc.m4:             [gl_cv_func_mbrtowc_stores_incomplete=no],
m4/mbrtowc.m4:             [gl_cv_func_mbrtowc_stores_incomplete=yes],
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_EMPTY_INPUT],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_empty_input],
m4/mbrtowc.m4:       [gl_cv_func_mbrtowc_empty_input=yes],
m4/mbrtowc.m4:       [gl_cv_func_mbrtowc_empty_input=no],
m4/mbrtowc.m4:          aix* | *-gnu* | gnu*) gl_cv_func_mbrtowc_empty_input="guessing no" ;;
m4/mbrtowc.m4:          linux*-android*)      gl_cv_func_mbrtowc_empty_input="guessing no" ;;
m4/mbrtowc.m4:          mingw* | windows*)    gl_cv_func_mbrtowc_empty_input="guessing no" ;;
m4/mbrtowc.m4:          *)                    gl_cv_func_mbrtowc_empty_input="guessing yes" ;;
m4/mbrtowc.m4:AC_DEFUN([gl_MBRTOWC_C_LOCALE],
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc_C_locale_sans_EILSEQ],
m4/mbrtowc.m4:       [gl_cv_func_mbrtowc_C_locale_sans_EILSEQ=yes],
m4/mbrtowc.m4:       [gl_cv_func_mbrtowc_C_locale_sans_EILSEQ=no],
m4/mbrtowc.m4:          mingw* | windows*) gl_cv_func_mbrtowc_C_locale_sans_EILSEQ="guessing yes" ;;
m4/mbrtowc.m4:          *)                 gl_cv_func_mbrtowc_C_locale_sans_EILSEQ="$gl_cross_guess_normal" ;;
m4/mbrtowc.m4:AC_DEFUN([gl_PREREQ_MBRTOWC], [
m4/mbrtowc.m4:AC_DEFUN([gl_PREREQ_MBTOWC_LOCK],
m4/mbrtowc.m4:  gl_VISIBILITY
m4/mbrtowc.m4:    [gl_cv_func_mbrtowc],
m4/mbrtowc.m4:       [gl_cv_func_mbrtowc=yes],
m4/mbrtowc.m4:       [gl_cv_func_mbrtowc=no])])
m4/mbrtowc.m4:  if test $gl_cv_func_mbrtowc = yes; then
m4/mbsinit.m4:AC_DEFUN([gl_FUNC_MBSINIT],
m4/mbsinit.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/mbsinit.m4:  gl_MBSTATE_T_BROKEN
m4/mbsinit.m4:AC_DEFUN([gl_PREREQ_MBSINIT], [
m4/mbslen.m4:AC_DEFUN([gl_FUNC_MBSLEN],
m4/mbslen.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/mbsnrtowcs.m4:AC_DEFUN([gl_FUNC_MBSNRTOWCS],
m4/mbsnrtowcs.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/mbsnrtowcs.m4:  gl_MBSTATE_T_BROKEN
m4/mbsnrtowcs.m4:  gl_CHECK_FUNCS_ANDROID([mbsnrtowcs], [[#include <wchar.h>]])
m4/mbsnrtowcs.m4:    case "$gl_cv_onwards_func_mbsnrtowcs" in
m4/mbsnrtowcs.m4:      gl_MBSNRTOWCS_WORKS_IN_TRADITIONAL_LOCALE
m4/mbsnrtowcs.m4:      case "$gl_cv_func_mbsnrtowcs_works_in_traditional_locale" in
m4/mbsnrtowcs.m4:        gl_MBRTOWC_C_LOCALE
m4/mbsnrtowcs.m4:        case "$gl_cv_func_mbrtowc_C_locale_sans_EILSEQ" in
m4/mbsnrtowcs.m4:AC_DEFUN([gl_PREREQ_MBSNRTOWCS], [
m4/mbsnrtowcs.m4:dnl Result is gl_cv_func_mbsnrtowcs_works_in_traditional_locale.
m4/mbsnrtowcs.m4:AC_DEFUN([gl_MBSNRTOWCS_WORKS_IN_TRADITIONAL_LOCALE],
m4/mbsnrtowcs.m4:    [gl_cv_func_mbsnrtowcs_works_in_traditional_locale],
m4/mbsnrtowcs.m4:        solaris*) gl_cv_func_mbsnrtowcs_works_in_traditional_locale="guessing no" ;;
m4/mbsnrtowcs.m4:        *)        gl_cv_func_mbsnrtowcs_works_in_traditional_locale="guessing yes" ;;
m4/mbsnrtowcs.m4:          [gl_cv_func_mbsnrtowcs_works_in_traditional_locale=yes],
m4/mbsnrtowcs.m4:          [gl_cv_func_mbsnrtowcs_works_in_traditional_locale=no],
m4/mbsrtowcs.m4:AC_DEFUN([gl_FUNC_MBSRTOWCS],
m4/mbsrtowcs.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/mbsrtowcs.m4:  gl_MBSTATE_T_BROKEN
m4/mbsrtowcs.m4:      gl_MBSRTOWCS_WORKS
m4/mbsrtowcs.m4:      case "$gl_cv_func_mbsrtowcs_works" in
m4/mbsrtowcs.m4:        gl_MBRTOWC_C_LOCALE
m4/mbsrtowcs.m4:        case "$gl_cv_func_mbrtowc_C_locale_sans_EILSEQ" in
m4/mbsrtowcs.m4:dnl Result is gl_cv_func_mbsrtowcs_works.
m4/mbsrtowcs.m4:AC_DEFUN([gl_MBSRTOWCS_WORKS],
m4/mbsrtowcs.m4:    [gl_cv_func_mbsrtowcs_works],
m4/mbsrtowcs.m4:          gl_cv_func_mbsrtowcs_works="guessing no" ;;
m4/mbsrtowcs.m4:          gl_cv_func_mbsrtowcs_works="guessing yes" ;;
m4/mbsrtowcs.m4:          [gl_cv_func_mbsrtowcs_works=yes],
m4/mbsrtowcs.m4:          [gl_cv_func_mbsrtowcs_works=no],
m4/mbsrtowcs.m4:AC_DEFUN([gl_PREREQ_MBSRTOWCS], [
m4/mbstowcs.m4:AC_DEFUN([gl_FUNC_MBSTOWCS],
m4/mbstowcs.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/mbstowcs.m4:  gl_MBRTOWC_C_LOCALE
m4/mbstowcs.m4:  case "$gl_cv_func_mbrtowc_C_locale_sans_EILSEQ" in
m4/mbstowcs.m4:AC_DEFUN([gl_PREREQ_MBSTOWCS], [
m4/mbswidth.m4:AC_DEFUN([gl_MBSWIDTH],
m4/mbtowc.m4:AC_DEFUN([gl_FUNC_MBTOWC],
m4/mbtowc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/mbtowc.m4:  gl_CHECK_FUNCS_ANDROID([mbtowc], [[#include <stdlib.h>]])
m4/mbtowc.m4:    case "$gl_cv_onwards_func_mbtowc" in
m4/mbtowc.m4:AC_DEFUN([gl_PREREQ_MBTOWC], [
m4/md4.m4:AC_DEFUN([gl_MD4],
m4/md4.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/md5.m4:AC_DEFUN([gl_MD5],
m4/md5.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/md5.m4:  gl_CRYPTO_CHECK([MD5])
m4/memalign.m4:AC_DEFUN([gl_FUNC_MEMALIGN],
m4/memalign.m4:  AC_REQUIRE([gl_MALLOC_H_DEFAULTS])
m4/memalign.m4:      [gl_cv_func_memalign_works],
m4/memalign.m4:         [gl_cv_func_memalign_works=yes],
m4/memalign.m4:         [gl_cv_func_memalign_works=no],
m4/memalign.m4:            solaris*) gl_cv_func_memalign_works="guessing no" ;;
m4/memalign.m4:            *)        gl_cv_func_memalign_works="$gl_cross_guess_normal" ;;
m4/memalign.m4:    case "$gl_cv_func_memalign_works" in
m4/memcasecmp.m4:AC_DEFUN([gl_MEMCASECMP],
m4/memchr.m4:AC_DEFUN_ONCE([gl_FUNC_MEMCHR],
m4/memchr.m4:  gl_FUNC_MMAP_ANON
m4/memchr.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/memchr.m4:  AC_CACHE_CHECK([whether memchr works], [gl_cv_func_memchr_works],
m4/memchr.m4:       [gl_cv_func_memchr_works=yes],
m4/memchr.m4:       [gl_cv_func_memchr_works=no],
m4/memchr.m4:          linux*-android*)   gl_cv_func_memchr_works="guessing no" ;;
m4/memchr.m4:          mingw* | windows*) gl_cv_func_memchr_works="guessing yes" ;;
m4/memchr.m4:          *)                 gl_cv_func_memchr_works="$gl_cross_guess_normal" ;;
m4/memchr.m4:  case "$gl_cv_func_memchr_works" in
m4/memchr.m4:AC_DEFUN([gl_PREREQ_MEMCHR], [
m4/memcmp.m4:AC_DEFUN([gl_FUNC_MEMCMP],
m4/memcmp.m4:  AC_CACHE_CHECK([for working memcmp], [gl_cv_func_memcmp_working],
m4/memcmp.m4:       [gl_cv_func_memcmp_working=yes],
m4/memcmp.m4:       [gl_cv_func_memcmp_working=no],
m4/memcmp.m4:          [gl_cv_func_memcmp_working="guessing yes"],
m4/memcmp.m4:          [gl_cv_func_memcmp_working="guessing no"])
m4/memcmp.m4:  case "$gl_cv_func_memcmp_working" in
m4/memcmp.m4:    *yes) gl_func_memcmp=yes ;;
m4/memcmp.m4:    *)    gl_func_memcmp=no ;;
m4/memcmp.m4:  if test $gl_func_memcmp = no; then
m4/memcmp.m4:AC_DEFUN([gl_PREREQ_MEMCMP], [:])
m4/memcoll.m4:AC_DEFUN([gl_MEMCOLL],
m4/memcpy.m4:AC_DEFUN([gl_FUNC_MEMCPY],
m4/memcpy.m4:AC_DEFUN([gl_PREREQ_MEMCPY], [
m4/memmem.m4:AC_DEFUN([gl_FUNC_MEMMEM_SIMPLE],
m4/memmem.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/memmem.m4:      [gl_cv_func_memmem_works_always],
m4/memmem.m4:        [gl_cv_func_memmem_works_always=yes],
m4/memmem.m4:        [gl_cv_func_memmem_works_always=no],
m4/memmem.m4:           [gl_cv_func_memmem_works_always="guessing yes"],
m4/memmem.m4:           [gl_cv_func_memmem_works_always="$gl_cross_guess_normal"])
m4/memmem.m4:    case "$gl_cv_func_memmem_works_always" in
m4/memmem.m4:  gl_PREREQ_MEMMEM
m4/memmem.m4:]) # gl_FUNC_MEMMEM_SIMPLE
m4/memmem.m4:AC_DEFUN([gl_FUNC_MEMMEM],
m4/memmem.m4:  AC_REQUIRE([gl_FUNC_MEMMEM_SIMPLE])
m4/memmem.m4:      [gl_cv_func_memmem_works_fast],
m4/memmem.m4:        [gl_cv_func_memmem_works_fast=yes], [gl_cv_func_memmem_works_fast=no],
m4/memmem.m4:           [gl_cv_func_memmem_works_fast="guessing yes"],
m4/memmem.m4:           [gl_cv_func_memmem_works_fast="$gl_cross_guess_normal"])
m4/memmem.m4:    case "$gl_cv_func_memmem_works_fast" in
m4/memmem.m4:]) # gl_FUNC_MEMMEM
m4/memmem.m4:AC_DEFUN([gl_PREREQ_MEMMEM], [:])
m4/memmove.m4:AC_DEFUN([gl_FUNC_MEMMOVE],
m4/memmove.m4:AC_DEFUN([gl_PREREQ_MEMMOVE], [
m4/mempcpy.m4:AC_DEFUN([gl_FUNC_MEMPCPY],
m4/mempcpy.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/mempcpy.m4:  gl_CHECK_FUNCS_ANDROID([mempcpy], [[#include <string.h>]])
m4/mempcpy.m4:    case "$gl_cv_onwards_func_mempcpy" in
m4/mempcpy.m4:AC_DEFUN([gl_PREREQ_MEMPCPY], [
m4/memrchr.m4:AC_DEFUN([gl_FUNC_MEMRCHR],
m4/memrchr.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/memrchr.m4:AC_DEFUN([gl_PREREQ_MEMRCHR], [:])
m4/memset.m4:AC_DEFUN([gl_FUNC_MEMSET],
m4/memset.m4:AC_DEFUN([gl_PREREQ_MEMSET], [
m4/memset_explicit.m4:AC_DEFUN([gl_FUNC_MEMSET_EXPLICIT],
m4/memset_explicit.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/memset_explicit.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/memset_explicit.m4:  gl_CHECK_FUNCS_ANDROID([memset_explicit], [[#include <string.h>]])
m4/memset_explicit.m4:    case "$gl_cv_onwards_func_memset_explicit" in
m4/memset_explicit.m4:AC_DEFUN([gl_PREREQ_MEMSET_EXPLICIT],
m4/memxor.m4:AC_DEFUN([gl_MEMXOR],
m4/mgetgroups.m4:AC_DEFUN([gl_MGETGROUPS],
m4/minmax.m4:AC_DEFUN([gl_MINMAX],
m4/minmax.m4:  AC_REQUIRE([gl_PREREQ_MINMAX])
m4/minmax.m4:AC_DEFUN([gl_PREREQ_MINMAX],
m4/minmax.m4:  gl_MINMAX_IN_HEADER([limits.h])
m4/minmax.m4:  gl_MINMAX_IN_HEADER([sys/param.h])
m4/minmax.m4:dnl gl_MINMAX_IN_HEADER(HEADER)
m4/minmax.m4:AC_DEFUN([gl_MINMAX_IN_HEADER],
m4/minmax.m4:    [gl_cv_minmax_in_]header,
m4/minmax.m4:       [gl_cv_minmax_in_]header[=yes],
m4/minmax.m4:       [gl_cv_minmax_in_]header[=no])])
m4/minmax.m4:  if test $gl_cv_minmax_in_[]header = yes; then
m4/minus-zero.m4:AC_DEFUN([gl_FLOAT_MINUS_ZERO_CODE],
m4/minus-zero.m4:AC_DEFUN([gl_DOUBLE_MINUS_ZERO_CODE],
m4/minus-zero.m4:AC_DEFUN([gl_LONG_DOUBLE_MINUS_ZERO_CODE],
m4/mkancesdirs.m4:AC_DEFUN([gl_MKANCESDIRS],
m4/mkdir-p.m4:AC_DEFUN([gl_MKDIR_PARENTS],
m4/mkdir.m4:AC_DEFUN([gl_FUNC_MKDIR],
m4/mkdir.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/mkdir.m4:    [gl_cv_func_mkdir_trailing_slash_works],
m4/mkdir.m4:       [gl_cv_func_mkdir_trailing_slash_works=yes],
m4/mkdir.m4:       [gl_cv_func_mkdir_trailing_slash_works=no],
m4/mkdir.m4:          linux-* | linux)   gl_cv_func_mkdir_trailing_slash_works="guessing yes" ;;
m4/mkdir.m4:          midipix*)          gl_cv_func_mkdir_trailing_slash_works="guessing yes" ;;
m4/mkdir.m4:          *-gnu* | gnu*)     gl_cv_func_mkdir_trailing_slash_works="guessing yes" ;;
m4/mkdir.m4:          windows*-msvc*)    gl_cv_func_mkdir_trailing_slash_works="guessing yes" ;;
m4/mkdir.m4:                               [gl_cv_func_mkdir_trailing_slash_works="guessing yes"],
m4/mkdir.m4:                               [gl_cv_func_mkdir_trailing_slash_works="guessing no"])
m4/mkdir.m4:          *)                 gl_cv_func_mkdir_trailing_slash_works="$gl_cross_guess_normal" ;;
m4/mkdir.m4:  case "$gl_cv_func_mkdir_trailing_slash_works" in
m4/mkdir.m4:    [gl_cv_func_mkdir_trailing_dot_works],
m4/mkdir.m4:       [gl_cv_func_mkdir_trailing_dot_works=yes],
m4/mkdir.m4:       [gl_cv_func_mkdir_trailing_dot_works=no],
m4/mkdir.m4:          *-gnu* | gnu*)     gl_cv_func_mkdir_trailing_dot_works="guessing yes" ;;
m4/mkdir.m4:          *-musl*)           gl_cv_func_mkdir_trailing_dot_works="guessing yes" ;;
m4/mkdir.m4:          midipix*)          gl_cv_func_mkdir_trailing_dot_works="guessing yes" ;;
m4/mkdir.m4:          mingw* | windows*) gl_cv_func_mkdir_trailing_dot_works="guessing no" ;;
m4/mkdir.m4:          *)                 gl_cv_func_mkdir_trailing_dot_works="$gl_cross_guess_normal" ;;
m4/mkdir.m4:  case "$gl_cv_func_mkdir_trailing_dot_works" in
m4/mkdirat.m4:AC_DEFUN([gl_FUNC_MKDIRAT],
m4/mkdirat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/mkdirat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/mkdirat.m4:AC_DEFUN([gl_PREREQ_MKDIRAT],
m4/mkdtemp.m4:AC_DEFUN([gl_FUNC_MKDTEMP],
m4/mkdtemp.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/mkdtemp.m4:AC_DEFUN([gl_PREREQ_MKDTEMP],
m4/mkfifo.m4:AC_DEFUN([gl_FUNC_MKFIFO],
m4/mkfifo.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/mkfifo.m4:  AC_CACHE_CHECK([for mkfifo], [gl_cv_func_mkfifo],
m4/mkfifo.m4:       [gl_cv_func_mkfifo=yes],
m4/mkfifo.m4:       [gl_cv_func_mkfifo=no])
m4/mkfifo.m4:  if test $gl_cv_func_mkfifo = no; then
m4/mkfifo.m4:      [gl_cv_func_mkfifo_works],
m4/mkfifo.m4:         [gl_cv_func_mkfifo_works=yes], [gl_cv_func_mkfifo_works=no],
m4/mkfifo.m4:            linux-* | linux) gl_cv_func_mkfifo_works="guessing yes" ;;
m4/mkfifo.m4:            *-gnu* | gnu*)   gl_cv_func_mkfifo_works="guessing yes" ;;
m4/mkfifo.m4:            *)               gl_cv_func_mkfifo_works="$gl_cross_guess_normal" ;;
m4/mkfifo.m4:    case "$gl_cv_func_mkfifo_works" in
m4/mkfifoat.m4:AC_DEFUN([gl_FUNC_MKFIFOAT],
m4/mkfifoat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/mkfifoat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/mkfifoat.m4:  AC_REQUIRE([gl_FUNC_OPENAT])
m4/mkfifoat.m4:  gl_CHECK_FUNCS_ANDROID_MACOS([mknodat], [[#include <sys/stat.h>]])
m4/mkfifoat.m4:  gl_CHECK_FUNCS_ANDROID_MACOS([mkfifoat], [[#include <sys/stat.h>]])
m4/mkfifoat.m4:      [gl_cv_func_mkfifoat_works],
m4/mkfifoat.m4:         [gl_cv_func_mkfifoat_works=yes],
m4/mkfifoat.m4:         [gl_cv_func_mkfifoat_works=no],
m4/mkfifoat.m4:            linux-* | linux) gl_cv_func_mkfifoat_works="guessing yes" ;;
m4/mkfifoat.m4:            *-gnu* | gnu*)   gl_cv_func_mkfifoat_works="guessing yes" ;;
m4/mkfifoat.m4:            darwin*)         gl_cv_func_mkfifoat_works="guessing no" ;;
m4/mkfifoat.m4:            aix*)            gl_cv_func_mkfifoat_works="guessing no" ;;
m4/mkfifoat.m4:            *)               gl_cv_func_mkfifoat_works="$gl_cross_guess_normal" ;;
m4/mkfifoat.m4:    case "$gl_cv_func_mkfifoat_works" in
m4/mkfifoat.m4:    case "$gl_cv_onwards_func_mkfifoat" in
m4/mkfifoat.m4:    case "$gl_cv_onwards_func_mknodat" in
m4/mknod.m4:AC_DEFUN([gl_FUNC_MKNOD],
m4/mknod.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/mknod.m4:  AC_REQUIRE([gl_FUNC_MKFIFO])
m4/mknod.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/mknod.m4:      [gl_cv_func_mknod_works],
m4/mknod.m4:         [gl_cv_func_mknod_works=yes],
m4/mknod.m4:          gl_cv_func_mknod_works=no],
m4/mknod.m4:            linux-* | linux) gl_cv_func_mknod_works="guessing yes" ;;
m4/mknod.m4:            *-gnu* | gnu*)   gl_cv_func_mknod_works="guessing yes" ;;
m4/mknod.m4:            *)               gl_cv_func_mknod_works="$gl_cross_guess_normal" ;;
m4/mknod.m4:    case "$gl_cv_func_mknod_works" in
m4/mkostemp.m4:AC_DEFUN([gl_FUNC_MKOSTEMP],
m4/mkostemp.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/mkostemp.m4:  gl_CHECK_FUNCS_ANDROID([mkostemp], [[#include <stdlib.h>]])
m4/mkostemp.m4:    case "$gl_cv_onwards_func_mkostemp" in
m4/mkostemp.m4:AC_DEFUN([gl_PREREQ_MKOSTEMP],
m4/mkostemps.m4:AC_DEFUN([gl_FUNC_MKOSTEMPS],
m4/mkostemps.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/mkostemps.m4:  gl_CHECK_FUNCS_ANDROID([mkostemps], [[#include <stdlib.h>]])
m4/mkostemps.m4:    case "$gl_cv_onwards_func_mkostemps" in
m4/mkstemp.m4:AC_DEFUN([gl_FUNC_MKSTEMP],
m4/mkstemp.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/mkstemp.m4:      [gl_cv_func_working_mkstemp],
m4/mkstemp.m4:          [gl_cv_func_working_mkstemp=yes],
m4/mkstemp.m4:          [gl_cv_func_working_mkstemp=no],
m4/mkstemp.m4:             *-gnu* | gnu*)      gl_cv_func_working_mkstemp="guessing yes" ;;
m4/mkstemp.m4:             *-musl* | midipix*) gl_cv_func_working_mkstemp="guessing yes" ;;
m4/mkstemp.m4:             mingw* | windows*)  gl_cv_func_working_mkstemp="guessing no" ;;
m4/mkstemp.m4:             *)                  gl_cv_func_working_mkstemp="$gl_cross_guess_normal" ;;
m4/mkstemp.m4:    case "$gl_cv_func_working_mkstemp" in
m4/mkstemp.m4:AC_DEFUN([gl_PREREQ_MKSTEMP],
m4/mkstemps.m4:AC_DEFUN([gl_FUNC_MKSTEMPS],
m4/mkstemps.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/mktime.m4:AC_DEFUN([gl_TIME_T_IS_SIGNED],
m4/mktime.m4:    [gl_cv_time_t_is_signed],
m4/mktime.m4:       [gl_cv_time_t_is_signed=yes],
m4/mktime.m4:       [gl_cv_time_t_is_signed=no])])
m4/mktime.m4:  if test $gl_cv_time_t_is_signed = yes; then
m4/mktime.m4:dnl Test whether mktime works. Set gl_cv_func_working_mktime.
m4/mktime.m4:AC_DEFUN([gl_FUNC_MKTIME_WORKS],
m4/mktime.m4:  AC_REQUIRE([gl_TIME_T_IS_SIGNED])
m4/mktime.m4:  AC_REQUIRE([gl_MULTIARCH])
m4/mktime.m4:  AC_CACHE_CHECK([for working mktime], [gl_cv_func_working_mktime],
m4/mktime.m4:       gl_cv_func_working_mktime="guessing no"
m4/mktime.m4:         [gl_cv_func_working_mktime=yes],
m4/mktime.m4:         [gl_cv_func_working_mktime=no],
m4/mktime.m4:            mingw* | windows*) gl_cv_func_working_mktime="guessing no" ;;
m4/mktime.m4:            *)                 gl_cv_func_working_mktime="$gl_cross_guess_normal" ;;
m4/mktime.m4:AC_DEFUN([gl_FUNC_MKTIME],
m4/mktime.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/mktime.m4:  AC_REQUIRE([gl_FUNC_MKTIME_WORKS])
m4/mktime.m4:  if test "$gl_cv_func_working_mktime" != yes; then
m4/mktime.m4:AC_DEFUN([gl_FUNC_MKTIME_INTERNAL], [
m4/mktime.m4:  AC_REQUIRE([gl_FUNC_MKTIME_WORKS])
m4/mktime.m4:AC_DEFUN([gl_PREREQ_MKTIME], [:])
m4/mmap-anon.m4:AC_DEFUN_ONCE([gl_FUNC_MMAP_ANON],
m4/mmap-anon.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/mmap-anon.m4:  AC_CHECK_FUNC([mmap], [gl_have_mmap=yes], [gl_have_mmap=no])
m4/mmap-anon.m4:  gl_have_mmap_anonymous=no
m4/mmap-anon.m4:  if test $gl_have_mmap = yes; then
m4/mmap-anon.m4:      [gl_have_mmap_anonymous=yes])
m4/mmap-anon.m4:    if test $gl_have_mmap_anonymous != yes; then
m4/mmap-anon.m4:         gl_have_mmap_anonymous=yes])
m4/mmap-anon.m4:    AC_MSG_RESULT([$gl_have_mmap_anonymous])
m4/mmap-anon.m4:    if test $gl_have_mmap_anonymous = yes; then
m4/mntent_h.m4:AC_DEFUN_ONCE([gl_MNTENT_H],
m4/mntent_h.m4:  AC_REQUIRE([gl_MNTENT_H_DEFAULTS])
m4/mntent_h.m4:    gl_CHECK_NEXT_HEADERS([mntent.h])
m4/mntent_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <mntent.h>
m4/mntent_h.m4:# gl_MNTENT_MODULE_INDICATOR([modulename])
m4/mntent_h.m4:AC_DEFUN([gl_MNTENT_MODULE_INDICATOR],
m4/mntent_h.m4:  gl_MNTENT_H_REQUIRE_DEFAULTS
m4/mntent_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/mntent_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/mntent_h.m4:AC_DEFUN([gl_MNTENT_H_REQUIRE_DEFAULTS],
m4/mntent_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_HASMNTOPT])
m4/mntent_h.m4:  AC_REQUIRE([gl_MNTENT_H_DEFAULTS])
m4/mntent_h.m4:AC_DEFUN([gl_MNTENT_H_DEFAULTS],
m4/modechange.m4:AC_DEFUN([gl_MODECHANGE],
m4/mode_t.m4:AC_DEFUN([gl_PROMOTED_TYPE_MODE_T],
m4/mode_t.m4:  AC_CACHE_CHECK([for promoted mode_t type], [gl_cv_promoted_mode_t], [
m4/mode_t.m4:      [gl_cv_promoted_mode_t='int'],
m4/mode_t.m4:      [gl_cv_promoted_mode_t='mode_t'])
m4/mode_t.m4:  AC_DEFINE_UNQUOTED([PROMOTED_MODE_T], [$gl_cv_promoted_mode_t],
m4/modf-ieee.m4:dnl module description), so that gl_FUNC_MODF can test whether 'aclocal' has
m4/modf-ieee.m4:AC_DEFUN([gl_FUNC_MODF_IEEE],
m4/modf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_modf_required=ieee])
m4/modf-ieee.m4:  AC_REQUIRE([gl_FUNC_MODF])
m4/modf.m4:AC_DEFUN([gl_FUNC_MODF],
m4/modf.m4:  m4_divert_text([DEFAULTS], [gl_modf_required=plain])
m4/modf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/modf.m4:  gl_MATHFUNC([modf], [double], [(double, double *)])
m4/modf.m4:  m4_ifdef([gl_FUNC_MODF_IEEE], [
m4/modf.m4:    if test $gl_modf_required = ieee && test $REPLACE_MODF = 0; then
m4/modf.m4:        [gl_cv_func_modf_ieee],
m4/modf.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/modf.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/modf.m4:            [gl_cv_func_modf_ieee=yes],
m4/modf.m4:            [gl_cv_func_modf_ieee=no],
m4/modf.m4:               *-gnu* | gnu*)      gl_cv_func_modf_ieee="guessing yes" ;;
m4/modf.m4:               *-musl* | midipix*) gl_cv_func_modf_ieee="guessing yes" ;;
m4/modf.m4:               windows*-msvc*)     gl_cv_func_modf_ieee="guessing yes" ;;
m4/modf.m4:                                     [gl_cv_func_modf_ieee="guessing yes"],
m4/modf.m4:                                     [gl_cv_func_modf_ieee="guessing no"])
m4/modf.m4:               *)                  gl_cv_func_modf_ieee="$gl_cross_guess_normal" ;;
m4/modf.m4:      case "$gl_cv_func_modf_ieee" in
m4/modf.m4:    AC_REQUIRE([gl_FUNC_TRUNC])
m4/modff-ieee.m4:dnl module description), so that gl_FUNC_MODFF can test whether 'aclocal' has
m4/modff-ieee.m4:AC_DEFUN([gl_FUNC_MODFF_IEEE],
m4/modff-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_modff_required=ieee])
m4/modff-ieee.m4:  AC_REQUIRE([gl_FUNC_MODFF])
m4/modff.m4:AC_DEFUN([gl_FUNC_MODFF],
m4/modff.m4:  m4_divert_text([DEFAULTS], [gl_modff_required=plain])
m4/modff.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/modff.m4:  AC_REQUIRE([gl_FUNC_MODF])
m4/modff.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/modff.m4:  gl_MATHFUNC([modff], [float], [(float, float *)])
m4/modff.m4:  if test $gl_cv_func_modff_no_libm = yes \
m4/modff.m4:     || test $gl_cv_func_modff_in_libm = yes; then
m4/modff.m4:    m4_ifdef([gl_FUNC_MODFF_IEEE], [
m4/modff.m4:      if test $gl_modff_required = ieee && test $REPLACE_MODFF = 0; then
m4/modff.m4:          [gl_cv_func_modff_ieee],
m4/modff.m4:]gl_FLOAT_MINUS_ZERO_CODE[
m4/modff.m4:]gl_FLOAT_SIGNBIT_CODE[
m4/modff.m4:              [gl_cv_func_modff_ieee=yes],
m4/modff.m4:              [gl_cv_func_modff_ieee=no],
m4/modff.m4:                 *-gnu* | gnu*)      gl_cv_func_modff_ieee="guessing yes" ;;
m4/modff.m4:                 *-musl* | midipix*) gl_cv_func_modff_ieee="guessing yes" ;;
m4/modff.m4:                 windows*-msvc*)     gl_cv_func_modff_ieee="guessing yes" ;;
m4/modff.m4:                                       [gl_cv_func_modff_ieee="guessing yes"],
m4/modff.m4:                                       [gl_cv_func_modff_ieee="guessing no"])
m4/modff.m4:                 *)                  gl_cv_func_modff_ieee="$gl_cross_guess_normal" ;;
m4/modff.m4:        case "$gl_cv_func_modff_ieee" in
m4/modfl-ieee.m4:dnl module description), so that gl_FUNC_MODFL can test whether 'aclocal' has
m4/modfl-ieee.m4:AC_DEFUN([gl_FUNC_MODFL_IEEE],
m4/modfl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_modfl_required=ieee])
m4/modfl-ieee.m4:  AC_REQUIRE([gl_FUNC_MODFL])
m4/modfl.m4:AC_DEFUN([gl_FUNC_MODFL],
m4/modfl.m4:  m4_divert_text([DEFAULTS], [gl_modfl_required=plain])
m4/modfl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/modfl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/modfl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/modfl.m4:  gl_MATHFUNC([modfl], [long double], [(long double, long double *)])
m4/modfl.m4:  if test $gl_cv_func_modfl_no_libm = yes \
m4/modfl.m4:     || test $gl_cv_func_modfl_in_libm = yes; then
m4/modfl.m4:      [gl_cv_func_modfl_works],
m4/modfl.m4:          [gl_cv_func_modfl_works=yes],
m4/modfl.m4:          [gl_cv_func_modfl_works=no],
m4/modfl.m4:             *-gnu* | gnu*)      gl_cv_func_modfl_works="guessing yes" ;;
m4/modfl.m4:             *-musl* | midipix*) gl_cv_func_modfl_works="guessing yes" ;;
m4/modfl.m4:             mingw* | windows*)  gl_cv_func_modfl_works="guessing yes" ;;
m4/modfl.m4:             *)                  gl_cv_func_modfl_works="$gl_cross_guess_normal" ;;
m4/modfl.m4:    case "$gl_cv_func_modfl_works" in
m4/modfl.m4:    m4_ifdef([gl_FUNC_MODFL_IEEE], [
m4/modfl.m4:      if test $gl_modfl_required = ieee && test $REPLACE_MODFL = 0; then
m4/modfl.m4:          [gl_cv_func_modfl_ieee],
m4/modfl.m4:]gl_LONG_DOUBLE_MINUS_ZERO_CODE[
m4/modfl.m4:]gl_LONG_DOUBLE_SIGNBIT_CODE[
m4/modfl.m4:              [gl_cv_func_modfl_ieee=yes],
m4/modfl.m4:              [gl_cv_func_modfl_ieee=no],
m4/modfl.m4:                 *-gnu* | gnu*)      gl_cv_func_modfl_ieee="guessing yes" ;;
m4/modfl.m4:                 *-musl* | midipix*) gl_cv_func_modfl_ieee="guessing yes" ;;
m4/modfl.m4:                 windows*-msvc*)     gl_cv_func_modfl_ieee="guessing yes" ;;
m4/modfl.m4:                                       [gl_cv_func_modfl_ieee="guessing yes"],
m4/modfl.m4:                                       [gl_cv_func_modfl_ieee="guessing no"])
m4/modfl.m4:                 *)                  gl_cv_func_modfl_ieee="$gl_cross_guess_normal" ;;
m4/modfl.m4:        case "$gl_cv_func_modfl_ieee" in
m4/modfl.m4:      AC_REQUIRE([gl_FUNC_MODF])
m4/modfl.m4:      AC_REQUIRE([gl_FUNC_TRUNCL])
m4/monetary_h.m4:AC_DEFUN_ONCE([gl_MONETARY_H],
m4/monetary_h.m4:  AC_REQUIRE([gl_MONETARY_H_DEFAULTS])
m4/monetary_h.m4:  m4_ifdef([gl_ANSI_CXX], [AC_REQUIRE([gl_ANSI_CXX])])
m4/monetary_h.m4:  if m4_ifdef([gl_POSIXCHECK], [true], [m4_ifdef([gl_ANSI_CXX], [test "$CXX" != no], [false]) || test $ac_cv_header_monetary_h = yes]); then
m4/monetary_h.m4:    gl_CHECK_NEXT_HEADERS([monetary.h])
m4/monetary_h.m4:    gl_WARN_ON_USE_PREPARE([[
m4/monetary_h.m4:# gl_MONETARY_MODULE_INDICATOR([modulename])
m4/monetary_h.m4:AC_DEFUN([gl_MONETARY_MODULE_INDICATOR],
m4/monetary_h.m4:  gl_MONETARY_H_REQUIRE_DEFAULTS
m4/monetary_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/monetary_h.m4:AC_DEFUN([gl_MONETARY_H_REQUIRE_DEFAULTS],
m4/monetary_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRFMON_L])
m4/monetary_h.m4:  AC_REQUIRE([gl_MONETARY_H_DEFAULTS])
m4/monetary_h.m4:AC_DEFUN([gl_MONETARY_H_DEFAULTS],
m4/more-warnings.m4:    gl_MANYWARN_ALL_GCC([possible_warning_options])
m4/more-warnings.m4:    gl_MANYWARN_COMPLEMENT([desired_warning_options],
m4/more-warnings.m4:    gl_MANYWARN_COMPLEMENT([remaining_undesired_warning_options],
m4/more-warnings.m4:      gl_WARN_ADD([$w])
m4/more-warnings.m4:      gl_WARN_ADD([$w])
m4/more-warnings.m4:    gl_WARN_ADD([-Wshadow=local])
m4/more-warnings.m4:        gl_WARN_ADD([-fno-analyzer])
m4/more-warnings.m4:      gl_WARN_ADD([$w], [FOREIGN_WARN_CFLAGS])
m4/more-warnings.m4:    gl_WARN_ADD([-fno-analyzer], [NO_EXPENSIVE_WARN_CFLAGS])
m4/mountlist.m4:AC_DEFUN([gl_MOUNTLIST],
m4/mountlist.m4:        gl_CHECK_FUNCS_ANDROID([setmntent],
m4/mountlist.m4:        gl_CHECK_FUNCS_ANDROID([endmntent],
m4/mountlist.m4:        gl_CHECK_FUNCS_ANDROID([hasmntopt],
m4/mountlist.m4:    gl_cv_list_mounted_fs=yes
m4/mountlist.m4:    gl_cv_list_mounted_fs=no
m4/mountlist.m4:# Prerequisites of lib/mountlist.c not done by gl_MOUNTLIST.
m4/mountlist.m4:AC_DEFUN([gl_PREREQ_MOUNTLIST_EXTRA],
m4/mountlist.m4:  dnl Note gl_MOUNTLIST checks for mntent.h, not sys/mntent.h.
m4/mountlist.m4:  gl_FSTYPENAME
m4/mprotect.m4:dnl Sets gl_cv_func_mprotect_works and defines HAVE_WORKING_MPROTECT.
m4/mprotect.m4:AC_DEFUN([gl_FUNC_MPROTECT_WORKS],
m4/mprotect.m4:  AC_REQUIRE([gl_FUNC_MMAP_ANON])
m4/mprotect.m4:    AC_CACHE_CHECK([for working mprotect], [gl_cv_func_mprotect_works],
m4/mprotect.m4:           gl_cv_func_mprotect_works=yes
m4/mprotect.m4:           gl_cv_func_mprotect_works=no
m4/mprotect.m4:             gl_cv_func_mprotect_works="guessing yes" ;;
m4/mprotect.m4:             gl_cv_func_mprotect_works="guessing no" ;;
m4/mprotect.m4:             gl_cv_func_mprotect_works="$gl_cross_guess_normal" ;;
m4/mprotect.m4:    case "$gl_cv_func_mprotect_works" in
m4/mpsort.m4:AC_DEFUN([gl_MPSORT],
m4/msvc-inval.m4:AC_DEFUN([gl_MSVC_INVAL],
m4/msvc-nothrow.m4:AC_DEFUN([gl_MSVC_NOTHROW],
m4/msvc-nothrow.m4:  AC_REQUIRE([gl_MSVC_INVAL])
m4/mtx.m4:AC_DEFUN([gl_FUNC_MTX_INIT],
m4/mtx.m4:  AC_REQUIRE([gl_THREADS_H])
m4/mtx.m4:  gl_CHECK_FUNCS_ANDROID([mtx_init], [[#include <threads.h>]])
m4/mtx.m4:  case "$gl_cv_onwards_func_mtx_init" in
m4/multiarch.m4:AC_DEFUN_ONCE([gl_MULTIARCH],
m4/multiarch.m4:    [gl_cv_c_multiarch],
m4/multiarch.m4:    [gl_cv_c_multiarch=no
m4/multiarch.m4:                  gl_cv_c_multiarch=yes
m4/multiarch.m4:  if test $gl_cv_c_multiarch = yes; then
m4/musl.m4:AC_DEFUN_ONCE([gl_MUSL_LIBC],
m4/nan-mips.m4:AC_DEFUN_ONCE([gl_NAN_MIPS],
m4/nan-mips.m4:        [gl_cv_nan2008_f],
m4/nan-mips.m4:           [gl_cv_nan2008_f=yes],
m4/nan-mips.m4:           [gl_cv_nan2008_f=no],
m4/nan-mips.m4:           [gl_cv_nan2008_f="guessing no"])
m4/nan-mips.m4:      case "$gl_cv_nan2008_f" in
m4/nan-mips.m4:        *yes) gl_mips_nan2008_f=1 ;;
m4/nan-mips.m4:        *)    gl_mips_nan2008_f=0 ;;
m4/nan-mips.m4:      AC_DEFINE_UNQUOTED([MIPS_NAN2008_FLOAT], [$gl_mips_nan2008_f],
m4/nan-mips.m4:        [gl_cv_nan2008_d],
m4/nan-mips.m4:           [gl_cv_nan2008_d=yes],
m4/nan-mips.m4:           [gl_cv_nan2008_d=no],
m4/nan-mips.m4:           [gl_cv_nan2008_d="guessing no"])
m4/nan-mips.m4:      case "$gl_cv_nan2008_d" in
m4/nan-mips.m4:        *yes) gl_mips_nan2008_d=1 ;;
m4/nan-mips.m4:        *)    gl_mips_nan2008_d=0 ;;
m4/nan-mips.m4:      AC_DEFINE_UNQUOTED([MIPS_NAN2008_DOUBLE], [$gl_mips_nan2008_d],
m4/nan-mips.m4:        [gl_cv_nan2008_l],
m4/nan-mips.m4:           [gl_cv_nan2008_l=yes],
m4/nan-mips.m4:           [gl_cv_nan2008_l=no],
m4/nan-mips.m4:           [gl_cv_nan2008_l="guessing no"])
m4/nan-mips.m4:      case "$gl_cv_nan2008_l" in
m4/nan-mips.m4:        *yes) gl_mips_nan2008_l=1 ;;
m4/nan-mips.m4:        *)    gl_mips_nan2008_l=0 ;;
m4/nan-mips.m4:      AC_DEFINE_UNQUOTED([MIPS_NAN2008_LONG_DOUBLE], [$gl_mips_nan2008_l],
m4/nanosleep.m4:AC_DEFUN([gl_FUNC_NANOSLEEP],
m4/nanosleep.m4: AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/nanosleep.m4: AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/nanosleep.m4: gl_saved_LIBS=$LIBS
m4/nanosleep.m4:   AC_REQUIRE([gl_MULTIARCH])
m4/nanosleep.m4:     gl_cv_func_nanosleep='no (mishandles large arguments)'
m4/nanosleep.m4:    [gl_cv_func_nanosleep],
m4/nanosleep.m4:       [gl_cv_func_nanosleep=yes],
m4/nanosleep.m4:        4|5|6) gl_cv_func_nanosleep='no (mishandles large arguments)' ;;
m4/nanosleep.m4:        7)     gl_cv_func_nanosleep='no (mishandles negative tv_nsec)' ;;
m4/nanosleep.m4:        *)     gl_cv_func_nanosleep=no ;;
m4/nanosleep.m4:            gl_cv_func_nanosleep='guessing no (mishandles large arguments)' ;;
m4/nanosleep.m4:            gl_cv_func_nanosleep='guessing yes' ;;
m4/nanosleep.m4:            gl_cv_func_nanosleep='guessing no' ;;
m4/nanosleep.m4:            gl_cv_func_nanosleep="$gl_cross_guess_normal" ;;
m4/nanosleep.m4:   case "$gl_cv_func_nanosleep" in
m4/nanosleep.m4:       case "$gl_cv_func_nanosleep" in
m4/nanosleep.m4: LIBS=$gl_saved_LIBS
m4/netdb_h.m4:AC_DEFUN_ONCE([gl_NETDB_H],
m4/netdb_h.m4:  AC_REQUIRE([gl_NETDB_H_DEFAULTS])
m4/netdb_h.m4:  gl_CHECK_NEXT_HEADERS([netdb.h])
m4/netdb_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <netdb.h>]],
m4/netdb_h.m4:# gl_NETDB_MODULE_INDICATOR([modulename])
m4/netdb_h.m4:AC_DEFUN([gl_NETDB_MODULE_INDICATOR],
m4/netdb_h.m4:  gl_NETDB_H_REQUIRE_DEFAULTS
m4/netdb_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/netdb_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/netdb_h.m4:AC_DEFUN([gl_NETDB_H_REQUIRE_DEFAULTS],
m4/netdb_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETADDRINFO])
m4/netdb_h.m4:  AC_REQUIRE([gl_NETDB_H_DEFAULTS])
m4/netdb_h.m4:AC_DEFUN([gl_NETDB_H_DEFAULTS],
m4/netinet_in_h.m4:AC_DEFUN([gl_HEADER_NETINET_IN],
m4/netinet_in_h.m4:    [gl_cv_header_netinet_in_h_selfcontained],
m4/netinet_in_h.m4:        [gl_cv_header_netinet_in_h_selfcontained=yes],
m4/netinet_in_h.m4:        [gl_cv_header_netinet_in_h_selfcontained=no])
m4/netinet_in_h.m4:  if test $gl_cv_header_netinet_in_h_selfcontained = yes; then
m4/netinet_in_h.m4:    gl_CHECK_NEXT_HEADERS([netinet/in.h])
m4/net_if_h.m4:AC_DEFUN([gl_HEADER_NET_IF],
m4/net_if_h.m4:    [gl_cv_header_net_if_h_selfcontained],
m4/net_if_h.m4:        [gl_cv_header_net_if_h_selfcontained=yes],
m4/net_if_h.m4:        [gl_cv_header_net_if_h_selfcontained=no])
m4/net_if_h.m4:  if test $gl_cv_header_net_if_h_selfcontained = yes; then
m4/net_if_h.m4:    gl_NEXT_HEADERS([net/if.h])
m4/nl_langinfo.m4:AC_DEFUN([gl_FUNC_NL_LANGINFO],
m4/nl_langinfo.m4:  AC_REQUIRE([gl_LANGINFO_H_DEFAULTS])
m4/nl_langinfo.m4:  AC_REQUIRE([gl_LANGINFO_H])
m4/nl_langinfo.m4:  gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/nl_langinfo.m4:  AC_REQUIRE([gl_FUNC_SETLOCALE_NULL])
m4/nl_langinfo.m4:  AC_REQUIRE([gl_PTHREADLIB])
m4/nl_langinfo.m4:      [gl_cv_func_nl_langinfo_yesexpr_works],
m4/nl_langinfo.m4:         [gl_cv_func_nl_langinfo_yesexpr_works=yes],
m4/nl_langinfo.m4:         [gl_cv_func_nl_langinfo_yesexpr_works=no],
m4/nl_langinfo.m4:           irix*)  gl_cv_func_nl_langinfo_yesexpr_works="guessing no";;
m4/nl_langinfo.m4:           *)      gl_cv_func_nl_langinfo_yesexpr_works="guessing yes";;
m4/nl_langinfo.m4:    case $gl_cv_func_nl_langinfo_yesexpr_works in
m4/nl_langinfo.m4:    case "$gl_cv_onwards_func_nl_langinfo" in
m4/nl_langinfo.m4:AC_DEFUN([gl_PREREQ_NL_LANGINFO_LOCK],
m4/nl_langinfo.m4:  gl_VISIBILITY
m4/non-recursive-gnulib-prefix-hack.m4:dnl gl_NON_RECURSIVE_GNULIB_PREFIX_HACK LIB_DIR
m4/non-recursive-gnulib-prefix-hack.m4:dnl Adjust configure-set $gl_LIBOBJS and each AC_SUBST'd *_H variable
m4/non-recursive-gnulib-prefix-hack.m4:AC_DEFUN([gl_NON_RECURSIVE_GNULIB_PREFIX_HACK],
m4/non-recursive-gnulib-prefix-hack.m4:  # and "strstr.o" in gl_LIBOBJS.  With non-recursive make, we must prefix each
m4/non-recursive-gnulib-prefix-hack.m4:  gl_LIBOBJS=`echo "$gl_LIBOBJS" | sed -e 's, , $1/,g'`
m4/nonblocking.m4:dnl Sets gl_cv_have_nonblocking.
m4/nonblocking.m4:dnl Sets gl_cv_have_open_O_NONBLOCK.
m4/nonblocking.m4:AC_DEFUN([gl_NONBLOCKING_IO],
m4/nonblocking.m4:  AC_REQUIRE([gl_NONBLOCKING_IO_BODY])
m4/nonblocking.m4:AC_DEFUN([gl_NONBLOCKING_IO_BODY],
m4/nonblocking.m4:    mingw* | windows*) gl_cv_have_nonblocking=no ;;
m4/nonblocking.m4:    *)                 gl_cv_have_nonblocking=yes ;;
m4/nonblocking.m4:    mingw* | windows*) gl_cv_have_open_O_NONBLOCK=no ;;
m4/nonblocking.m4:    *)                 gl_cv_have_open_O_NONBLOCK=yes ;;
m4/nproc.m4:AC_DEFUN([gl_NPROC],
m4/nproc.m4:  gl_PREREQ_NPROC
m4/nproc.m4:AC_DEFUN([gl_PREREQ_NPROC],
m4/nproc.m4:  gl_CHECK_FUNCS_ANDROID([sched_getaffinity], [[#include <sched.h>]])
m4/nproc.m4:      [gl_cv_func_sched_getaffinity3],
m4/nproc.m4:         [gl_cv_func_sched_getaffinity3=yes],
m4/nproc.m4:         [gl_cv_func_sched_getaffinity3=no])
m4/nproc.m4:    if test $gl_cv_func_sched_getaffinity3 = yes; then
m4/nstrftime.m4:AC_DEFUN([gl_FUNC_GNU_STRFTIME],
m4/nstrftime.m4: AC_REQUIRE([gl_TM_GMTOFF])
m4/nullptr.m4:AC_DEFUN([gl_NULLPTR],
m4/nullptr.m4:     AC_CACHE_CHECK([for C nullptr], [gl_cv_c_nullptr],
m4/nullptr.m4:          [gl_cv_c_nullptr=yes
m4/nullptr.m4:           gl_saved_CFLAGS=$CFLAGS
m4/nullptr.m4:                [gl_cv_c_nullptr='not as a sentinel'])])
m4/nullptr.m4:           CFLAGS=$gl_saved_CFLAGS],
m4/nullptr.m4:          [gl_cv_c_nullptr=no])])
m4/nullptr.m4:      gl_c_nullptr=$gl_cv_c_nullptr
m4/nullptr.m4:     [gl_c_nullptr=no])
m4/nullptr.m4:  if test "$gl_c_nullptr" = yes; then
m4/nullptr.m4:     AC_CACHE_CHECK([for C++ nullptr], [gl_cv_cxx_nullptr],
m4/nullptr.m4:          [gl_cv_cxx_nullptr=yes],
m4/nullptr.m4:             [gl_cv_cxx_nullptr="yes, but it is a <stddef.h> macro"],
m4/nullptr.m4:             [gl_cv_cxx_nullptr=no])])])
m4/nullptr.m4:     AS_CASE([$gl_cv_cxx_nullptr],
m4/nullptr.m4:       [yes],  [gl_have_cxx_nullptr=1],
m4/nullptr.m4:       [yes*], [gl_have_cxx_nullptr="(-1)"],
m4/nullptr.m4:               [gl_have_cxx_nullptr=0])
m4/nullptr.m4:     AC_DEFINE_UNQUOTED([HAVE_CXX_NULLPTR], [$gl_have_cxx_nullptr],
m4/obstack-printf-gnu.m4:AC_DEFUN([gl_FUNC_OBSTACK_PRINTF_GNU],
m4/obstack-printf-gnu.m4:  AC_REQUIRE([gl_FUNC_OBSTACK_PRINTF_IS_POSIX])
m4/obstack-printf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/obstack-printf-gnu.m4:  gl_cv_func_obstack_printf_gnu=no
m4/obstack-printf-gnu.m4:  if test $gl_cv_func_obstack_printf_posix = yes; then
m4/obstack-printf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/obstack-printf-gnu.m4:        gl_cv_func_obstack_printf_gnu=yes
m4/obstack-printf-gnu.m4:  if test $gl_cv_func_obstack_printf_gnu = no; then
m4/obstack-printf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/obstack-printf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/obstack-printf-gnu.m4:    gl_REPLACE_OBSTACK_PRINTF
m4/obstack-printf-gnu.m4:  gl_DECL_OBSTACK_PRINTF
m4/obstack-printf-posix.m4:AC_DEFUN([gl_FUNC_OBSTACK_PRINTF_POSIX],
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_FUNC_OBSTACK_PRINTF_IS_POSIX])
m4/obstack-printf-posix.m4:  if test $gl_cv_func_obstack_printf_posix = no; then
m4/obstack-printf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/obstack-printf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/obstack-printf-posix.m4:    gl_REPLACE_OBSTACK_PRINTF
m4/obstack-printf-posix.m4:  gl_DECL_OBSTACK_PRINTF
m4/obstack-printf-posix.m4:dnl Result is gl_cv_func_obstack_printf_posix.
m4/obstack-printf-posix.m4:AC_DEFUN([gl_FUNC_OBSTACK_PRINTF_IS_POSIX],
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/obstack-printf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/obstack-printf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/obstack-printf-posix.m4:  gl_cv_func_obstack_printf_posix=no
m4/obstack-printf-posix.m4:    case "$gl_cv_func_printf_sizes_c99" in
m4/obstack-printf-posix.m4:        case "$gl_cv_func_printf_sizes_c23" in
m4/obstack-printf-posix.m4:            case "$gl_cv_func_printf_long_double" in
m4/obstack-printf-posix.m4:                case "$gl_cv_func_printf_infinite" in
m4/obstack-printf-posix.m4:                    case "$gl_cv_func_printf_infinite_long_double" in
m4/obstack-printf-posix.m4:                        case "$gl_cv_func_printf_directive_a" in
m4/obstack-printf-posix.m4:                            case "$gl_cv_func_printf_directive_b" in
m4/obstack-printf-posix.m4:                                case "$gl_cv_func_printf_directive_f" in
m4/obstack-printf-posix.m4:                                    case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/obstack-printf-posix.m4:                                        case "$gl_cv_func_printf_directive_ls" in
m4/obstack-printf-posix.m4:                                            case "$gl_cv_func_printf_directive_lc" in
m4/obstack-printf-posix.m4:                                                case "$gl_cv_func_printf_positions" in
m4/obstack-printf-posix.m4:                                                    case "$gl_cv_func_printf_flag_grouping" in
m4/obstack-printf-posix.m4:                                                        case "$gl_cv_func_printf_flag_leftadjust" in
m4/obstack-printf-posix.m4:                                                            case "$gl_cv_func_printf_flag_zero" in
m4/obstack-printf-posix.m4:                                                                case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/obstack-printf-posix.m4:                                                                    case "$gl_cv_func_printf_precision" in
m4/obstack-printf-posix.m4:                                                                        case "$gl_cv_func_printf_enomem" in
m4/obstack-printf-posix.m4:                                                                            gl_cv_func_obstack_printf_posix=yes
m4/obstack-printf.m4:AC_DEFUN([gl_FUNC_OBSTACK_PRINTF],
m4/obstack-printf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/obstack-printf.m4:    gl_REPLACE_OBSTACK_PRINTF
m4/obstack-printf.m4:  gl_DECL_OBSTACK_PRINTF
m4/obstack-printf.m4:AC_DEFUN([gl_REPLACE_OBSTACK_PRINTF],
m4/obstack-printf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/obstack-printf.m4:AC_DEFUN([gl_DECL_OBSTACK_PRINTF],
m4/obstack.m4:AC_DEFUN([gl_FUNC_OBSTACK],
m4/obstack.m4:      [gl_cv_func_obstack],
m4/obstack.m4:         [gl_cv_func_obstack=yes],
m4/obstack.m4:         [gl_cv_func_obstack=no])
m4/obstack.m4:    if test $gl_cv_func_obstack = yes; then
m4/obstack.m4:    [gl_cv_ptrdiff_t_wide_enough],
m4/obstack.m4:       [gl_cv_ptrdiff_t_wide_enough=yes],
m4/obstack.m4:       [gl_cv_ptrdiff_t_wide_enough=no])
m4/obstack.m4:  if test $gl_cv_ptrdiff_t_wide_enough = yes; then
m4/off64_t.m4:AC_DEFUN([gl_TYPE_OFF64_T],
m4/off64_t.m4:  AC_CACHE_CHECK([for off64_t], [gl_cv_off64_t],
m4/off64_t.m4:       [gl_cv_off64_t=yes], [gl_cv_off64_t=no])])
m4/off64_t.m4:  if test $gl_cv_off64_t != no; then
m4/off_t.m4:AC_DEFUN([gl_TYPE_OFF_T],
m4/off_t.m4:  m4_ifdef([gl_LARGEFILE], [
m4/off_t.m4:    AC_REQUIRE([gl_LARGEFILE])
m4/omp_h.m4:AC_DEFUN([gl_OMP_H],
m4/omp_h.m4:  gl_NEXT_HEADERS([omp.h])
m4/once.m4:AC_DEFUN([gl_ONCE],
m4/once.m4:  AC_REQUIRE([gl_THREADLIB])
m4/open-cloexec.m4:AC_DEFUN([gl_PREPROC_O_CLOEXEC],
m4/open-cloexec.m4:    [gl_cv_macro_O_CLOEXEC],
m4/open-cloexec.m4:       [gl_cv_macro_O_CLOEXEC=yes],
m4/open-cloexec.m4:       [gl_cv_macro_O_CLOEXEC=no])])
m4/open-slash.m4:dnl Sets gl_cv_func_open_slash.
m4/open-slash.m4:AC_DEFUN([gl_OPEN_TRAILING_SLASH_BUG],
m4/open-slash.m4:    [gl_cv_func_open_slash],
m4/open-slash.m4:       [gl_cv_func_open_slash=yes],
m4/open-slash.m4:       [gl_cv_func_open_slash=no],
m4/open-slash.m4:            gl_cv_func_open_slash="guessing no" ;;
m4/open-slash.m4:            gl_cv_func_open_slash="guessing yes" ;;
m4/open-slash.m4:  case "$gl_cv_func_open_slash" in
m4/open.m4:AC_DEFUN([gl_FUNC_OPEN],
m4/open.m4:  AC_REQUIRE([gl_PREPROC_O_CLOEXEC])
m4/open.m4:      if test "$gl_cv_macro_O_CLOEXEC" != yes; then
m4/open.m4:      gl_OPEN_TRAILING_SLASH_BUG
m4/open.m4:      case "$gl_cv_func_open_slash" in
m4/open.m4:  m4_ifdef([gl_FUNC_FCHDIR], [
m4/open.m4:      gl_TEST_FCHDIR
m4/open.m4:  m4_ifdef([gl_NONBLOCKING_IO], [
m4/open.m4:      gl_NONBLOCKING_IO
m4/open.m4:      if test $gl_cv_have_open_O_NONBLOCK != yes; then
m4/open.m4:AC_DEFUN([gl_PREREQ_OPEN],
m4/open.m4:  AC_REQUIRE([gl_PROMOTED_TYPE_MODE_T])
m4/openat.m4:AC_DEFUN([gl_FUNC_OPENAT],
m4/openat.m4:  AC_REQUIRE([gl_FCNTL_H_DEFAULTS])
m4/openat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/openat.m4:  AC_REQUIRE([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
m4/openat.m4:  AC_REQUIRE([gl_PREPROC_O_CLOEXEC])
m4/openat.m4:  case $ac_cv_func_openat+$gl_cv_func_lstat_dereferences_slashed_symlink+$gl_cv_macro_O_CLOEXEC in
m4/openat.m4:AC_DEFUN([gl_PREREQ_OPENAT],
m4/openat.m4:  AC_REQUIRE([gl_PROMOTED_TYPE_MODE_T])
m4/opendir.m4:AC_DEFUN([gl_FUNC_OPENDIR],
m4/opendir.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/opendir.m4:    AC_REQUIRE([gl_DIRENT_DIR])
m4/opendir.m4:    m4_ifdef([gl_FUNC_FCHDIR], [
m4/opendir.m4:      gl_TEST_FCHDIR
m4/pagealign_alloc.m4:AC_DEFUN([gl_PAGEALIGN_ALLOC],
m4/pagealign_alloc.m4:  gl_PREREQ_PAGEALIGN_ALLOC
m4/pagealign_alloc.m4:AC_DEFUN([gl_PREREQ_PAGEALIGN_ALLOC],
m4/pagealign_alloc.m4:  AC_REQUIRE([gl_FUNC_MMAP_ANON])
m4/pagealign_alloc.m4:  gl_CHECK_FUNCS_ANDROID([posix_memalign], [[#include <stdlib.h>]])
m4/parse-datetime.m4:AC_DEFUN([gl_C_COMPOUND_LITERALS],
m4/parse-datetime.m4:  AC_CACHE_CHECK([for compound literals], [gl_cv_compound_literals],
m4/parse-datetime.m4:       [gl_cv_compound_literals=yes],
m4/parse-datetime.m4:       [gl_cv_compound_literals=no])
m4/parse-datetime.m4:  if test $gl_cv_compound_literals = yes; then
m4/parse-datetime.m4:AC_DEFUN([gl_PARSE_DATETIME],
m4/parse-datetime.m4:  gl_PROG_BISON([PARSE_DATETIME_BISON], [2.4])
m4/parse-datetime.m4:  AC_REQUIRE([gl_TIMESPEC])
m4/parse-datetime.m4:  AC_REQUIRE([gl_BISON])
m4/parse-datetime.m4:  AC_REQUIRE([gl_C_COMPOUND_LITERALS])
m4/parse-datetime.m4:  AC_REQUIRE([gl_CLOCK_TIME])
m4/parse-datetime.m4:  AC_REQUIRE([gl_TM_GMTOFF])
m4/passfd.m4:AC_DEFUN([gl_PASSFD],
m4/passfd.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])
m4/pathmax.m4:AC_DEFUN([gl_PATHMAX],
m4/pathmax.m4:AC_DEFUN([gl_PATHMAX_SNIPPET], [[
m4/pathmax.m4:# Prerequisites of gl_PATHMAX_SNIPPET.
m4/pathmax.m4:AC_DEFUN([gl_PATHMAX_SNIPPET_PREREQ],
m4/pclose.m4:AC_DEFUN([gl_FUNC_PCLOSE],
m4/pclose.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/pclose.m4:AC_DEFUN([gl_PREREQ_PCLOSE],
m4/perl.m4:AC_DEFUN([gl_PERL],
m4/perl.m4: [gl_cv_prog_perl],
m4/perl.m4:  gl_cv_prog_perl=no
m4/perl.m4:      gl_cv_prog_perl=$perl
m4/perl.m4:if test "$gl_cv_prog_perl" != no; then
m4/perl.m4:  PERL=$gl_cv_prog_perl
m4/perror.m4:AC_DEFUN([gl_FUNC_PERROR],
m4/perror.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/perror.m4:  AC_REQUIRE([gl_HEADER_ERRNO_H])
m4/perror.m4:  AC_REQUIRE([gl_FUNC_STRERROR_R])
m4/perror.m4:  AC_REQUIRE([gl_FUNC_STRERROR_0])
m4/perror.m4:  case ${gl_cv_func_strerror_r_works-unset} in
m4/perror.m4:        [gl_cv_func_perror_works],
m4/perror.m4:              gl_cv_func_perror_works=yes
m4/perror.m4:              gl_cv_func_perror_works=no
m4/perror.m4:           [gl_cv_func_perror_works=no],
m4/perror.m4:              *-musl* | midipix*) gl_cv_func_perror_works="guessing yes" ;;
m4/perror.m4:              mingw* | windows*)  gl_cv_func_perror_works="guessing yes" ;;
m4/perror.m4:              *)                  gl_cv_func_perror_works="$gl_cross_guess_normal" ;;
m4/perror.m4:      case "$gl_cv_func_perror_works" in
m4/physmem.m4:AC_DEFUN([gl_SYS__SYSTEM_CONFIGURATION],
m4/physmem.m4:                  [gl_cv_var__system_configuration],
m4/physmem.m4:      [gl_cv_var__system_configuration=yes],
m4/physmem.m4:      [gl_cv_var__system_configuration=no])])
m4/physmem.m4:    if test $gl_cv_var__system_configuration = yes; then
m4/physmem.m4:AC_DEFUN([gl_PHYSMEM],
m4/physmem.m4:  AC_REQUIRE([gl_SYS__SYSTEM_CONFIGURATION])
m4/pid_t.m4:       [gl_pid_type='int'],
m4/pid_t.m4:       [gl_pid_type='__int64'])
m4/pid_t.m4:     AC_DEFINE_UNQUOTED([pid_t], [$gl_pid_type],
m4/pipe.m4:AC_DEFUN([gl_FUNC_PIPE],
m4/pipe.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/pipe2.m4:AC_DEFUN([gl_FUNC_PIPE2],
m4/pipe2.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/pipe2.m4:  gl_CHECK_FUNCS_ANDROID([pipe2], [[#include <unistd.h>]])
m4/pipe2.m4:    case "$gl_cv_onwards_func_pipe2" in
m4/poll.m4:AC_DEFUN([gl_FUNC_POLL],
m4/poll.m4:  AC_REQUIRE([gl_POLL_H])
m4/poll.m4:  AC_REQUIRE([gl_SOCKETS])
m4/poll.m4:    gl_cv_func_poll=no
m4/poll.m4:         [gl_cv_func_poll=yes],
m4/poll.m4:         [gl_cv_func_poll=no],
m4/poll.m4:], [gl_cv_func_poll="guessing no"], [gl_cv_func_poll="guessing yes"])])])
m4/poll.m4:  case "$gl_cv_func_poll" in
m4/poll.m4:AC_DEFUN([gl_PREREQ_POLL],
m4/poll_h.m4:AC_DEFUN_ONCE([gl_POLL_H],
m4/poll_h.m4:  AC_REQUIRE([gl_POLL_H_DEFAULTS])
m4/poll_h.m4:  gl_CHECK_NEXT_HEADERS([poll.h])
m4/poll_h.m4:  gl_PREREQ_SYS_H_WINSOCK2 dnl for HAVE_WINSOCK2_H
m4/poll_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <poll.h>]],
m4/poll_h.m4:# gl_POLL_MODULE_INDICATOR([modulename])
m4/poll_h.m4:AC_DEFUN([gl_POLL_MODULE_INDICATOR],
m4/poll_h.m4:  gl_POLL_H_REQUIRE_DEFAULTS
m4/poll_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/poll_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/poll_h.m4:AC_DEFUN([gl_POLL_H_REQUIRE_DEFAULTS],
m4/poll_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POLL])
m4/poll_h.m4:  AC_REQUIRE([gl_POLL_H_DEFAULTS])
m4/poll_h.m4:AC_DEFUN([gl_POLL_H_DEFAULTS],
m4/popen.m4:AC_DEFUN([gl_FUNC_POPEN],
m4/popen.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/popen.m4:      [gl_cv_func_popen_works],
m4/popen.m4:          [gl_cv_func_popen_works=yes],
m4/popen.m4:          [gl_cv_func_popen_works=no],
m4/popen.m4:             cygwin*)           gl_cv_func_popen_works="guessing no" ;;
m4/popen.m4:             mingw* | windows*) gl_cv_func_popen_works="guessing yes" ;;
m4/popen.m4:             *)                 gl_cv_func_popen_works="guessing yes" ;;
m4/popen.m4:    case "$gl_cv_func_popen_works" in
m4/popen.m4:AC_DEFUN([gl_PREREQ_POPEN],
m4/posix-shell.m4:AC_DEFUN([gl_POSIX_SHELL],
m4/posix-shell.m4:  AC_CACHE_CHECK([for a shell that conforms to POSIX], [gl_cv_posix_shell],
m4/posix-shell.m4:    [gl_test_posix_shell_script='
m4/posix-shell.m4:     for gl_cv_posix_shell in \
m4/posix-shell.m4:       case $gl_cv_posix_shell in
m4/posix-shell.m4:           "$gl_cv_posix_shell" -c "$gl_test_posix_shell_script" 2>/dev/null \
m4/posix-shell.m4:  if test "$gl_cv_posix_shell" != no; then
m4/posix-shell.m4:    POSIX_SHELL=$gl_cv_posix_shell
m4/posixcheck.m4:AC_DEFUN([gl_POSIXCHECK],
m4/posixtm.m4:AC_DEFUN([gl_POSIXTM],
m4/posixver.m4:AC_DEFUN([gl_POSIXVER],
m4/posixver.m4:  AC_REQUIRE([gl_DEFAULT_POSIX2_VERSION])
m4/posixver.m4:AC_DEFUN([gl_DEFAULT_POSIX2_VERSION],
m4/posixver.m4:  gl_default_posix2_version=none-specified
m4/posixver.m4:    gl_default_posix2_version=$ac_cv_env_DEFAULT_POSIX2_VERSION_value
m4/posixver.m4:      $gl_default_posix2_version,
m4/posixver.m4:  AC_MSG_RESULT([$gl_default_posix2_version])
m4/posix_memalign.m4:AC_DEFUN([gl_FUNC_POSIX_MEMALIGN],
m4/posix_memalign.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/posix_memalign.m4:  gl_CHECK_FUNCS_ANDROID([posix_memalign], [[#include <stdlib.h>]])
m4/posix_memalign.m4:      [gl_cv_func_posix_memalign_works],
m4/posix_memalign.m4:         [gl_cv_func_posix_memalign_works=yes],
m4/posix_memalign.m4:         [gl_cv_func_posix_memalign_works=no],
m4/posix_memalign.m4:            openbsd*) gl_cv_func_posix_memalign_works="guessing no" ;;
m4/posix_memalign.m4:            *)        gl_cv_func_posix_memalign_works="$gl_cross_guess_normal" ;;
m4/posix_memalign.m4:    case "$gl_cv_func_posix_memalign_works" in
m4/posix_memalign.m4:    case "$gl_cv_onwards_func_posix_memalign" in
m4/posix_openpt.m4:AC_DEFUN([gl_FUNC_POSIX_OPENPT],
m4/posix_openpt.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/posix_openpt.m4:  gl_CHECK_FUNCS_ANDROID([posix_openpt], [[#include <stdlib.h>]])
m4/posix_openpt.m4:    case "$gl_cv_onwards_func_posix_openpt" in
m4/posix_spawn.m4:AC_DEFUN([gl_POSIX_SPAWN],
m4/posix_spawn.m4:  AC_REQUIRE([gl_POSIX_SPAWN_BODY])
m4/posix_spawn.m4:AC_DEFUN([gl_POSIX_SPAWN_BODY],
m4/posix_spawn.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/posix_spawn.m4:  AC_REQUIRE([gl_HAVE_POSIX_SPAWN])
m4/posix_spawn.m4:    m4_ifdef([gl_FUNC_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR],
m4/posix_spawn.m4:       gl_CHECK_FUNCS_ANDROID([posix_spawn_file_actions_addchdir_np],
m4/posix_spawn.m4:    m4_ifdef([gl_FUNC_POSIX_SPAWN_FILE_ACTIONS_ADDFCHDIR],
m4/posix_spawn.m4:       gl_CHECK_FUNCS_ANDROID([posix_spawn_file_actions_addfchdir_np],
m4/posix_spawn.m4:      gl_POSIX_SPAWN_WORKS
m4/posix_spawn.m4:      case "$gl_cv_func_posix_spawn_works" in
m4/posix_spawn.m4:      gl_POSIX_SPAWN_SECURE
m4/posix_spawn.m4:      case "$gl_cv_func_posix_spawn_secure_exec" in
m4/posix_spawn.m4:      case "$gl_cv_func_posix_spawnp_secure_exec" in
m4/posix_spawn.m4:        [gl_cv_func_spawnattr_setschedpolicy],
m4/posix_spawn.m4:           [gl_cv_func_spawnattr_setschedpolicy=yes],
m4/posix_spawn.m4:           [gl_cv_func_spawnattr_setschedpolicy=no])
m4/posix_spawn.m4:        [gl_cv_func_spawnattr_setschedparam],
m4/posix_spawn.m4:           [gl_cv_func_spawnattr_setschedparam=yes],
m4/posix_spawn.m4:           [gl_cv_func_spawnattr_setschedparam=no])
m4/posix_spawn.m4:AC_DEFUN([gl_POSIX_SPAWN_WORKS],
m4/posix_spawn.m4:  AC_CACHE_CHECK([whether posix_spawn works], [gl_cv_func_posix_spawn_works],
m4/posix_spawn.m4:            gl_cv_func_posix_spawn_works=yes
m4/posix_spawn.m4:            gl_cv_func_posix_spawn_works=no
m4/posix_spawn.m4:         [gl_cv_func_posix_spawn_works=no])
m4/posix_spawn.m4:       if test $gl_cv_func_posix_spawn_works = yes; then
m4/posix_spawn.m4:           [gl_cv_func_posix_spawn_works=no])
m4/posix_spawn.m4:         aix*) gl_cv_func_posix_spawn_works="guessing no";;
m4/posix_spawn.m4:         *)    gl_cv_func_posix_spawn_works="guessing yes";;
m4/posix_spawn.m4:AC_DEFUN([gl_POSIX_SPAWN_SECURE],
m4/posix_spawn.m4:    [gl_cv_func_posix_spawn_secure_exec],
m4/posix_spawn.m4:       [gl_cv_func_posix_spawn_secure_exec=yes],
m4/posix_spawn.m4:       [gl_cv_func_posix_spawn_secure_exec=no],
m4/posix_spawn.m4:            gl_cv_func_posix_spawn_secure_exec="guessing no" ;;
m4/posix_spawn.m4:            gl_cv_func_posix_spawn_secure_exec="guessing yes" ;;
m4/posix_spawn.m4:    [gl_cv_func_posix_spawnp_secure_exec],
m4/posix_spawn.m4:       [gl_cv_func_posix_spawnp_secure_exec=yes],
m4/posix_spawn.m4:       [gl_cv_func_posix_spawnp_secure_exec=no],
m4/posix_spawn.m4:            gl_cv_func_posix_spawnp_secure_exec="guessing yes" ;;
m4/posix_spawn.m4:            gl_cv_func_posix_spawnp_secure_exec="guessing no" ;;
m4/posix_spawn.m4:            gl_cv_func_posix_spawnp_secure_exec="$gl_cross_guess_normal" ;;
m4/posix_spawn.m4:AC_DEFUN([gl_PREREQ_POSIX_SPAWN_INTERNAL],
m4/posix_spawn.m4:AC_DEFUN([gl_FUNC_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE],
m4/posix_spawn.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/posix_spawn.m4:  gl_POSIX_SPAWN
m4/posix_spawn.m4:      [gl_cv_func_posix_spawn_file_actions_addclose_works],
m4/posix_spawn.m4:         [gl_cv_func_posix_spawn_file_actions_addclose_works=yes],
m4/posix_spawn.m4:         [gl_cv_func_posix_spawn_file_actions_addclose_works=no],
m4/posix_spawn.m4:            *-musl* | midipix*) gl_cv_func_posix_spawn_file_actions_addclose_works="guessing no" ;;
m4/posix_spawn.m4:            solaris*)           gl_cv_func_posix_spawn_file_actions_addclose_works="guessing no" ;;
m4/posix_spawn.m4:            mingw* | windows*)  gl_cv_func_posix_spawn_file_actions_addclose_works="guessing no" ;;
m4/posix_spawn.m4:            *)                  gl_cv_func_posix_spawn_file_actions_addclose_works="guessing yes" ;;
m4/posix_spawn.m4:    case "$gl_cv_func_posix_spawn_file_actions_addclose_works" in
m4/posix_spawn.m4:AC_DEFUN([gl_FUNC_POSIX_SPAWN_FILE_ACTIONS_ADDDUP2],
m4/posix_spawn.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/posix_spawn.m4:  gl_POSIX_SPAWN
m4/posix_spawn.m4:      [gl_cv_func_posix_spawn_file_actions_adddup2_works],
m4/posix_spawn.m4:         [gl_cv_func_posix_spawn_file_actions_adddup2_works=yes],
m4/posix_spawn.m4:         [gl_cv_func_posix_spawn_file_actions_adddup2_works=no],
m4/posix_spawn.m4:            *-musl* | midipix*) gl_cv_func_posix_spawn_file_actions_adddup2_works="guessing no";;
m4/posix_spawn.m4:            solaris*)           gl_cv_func_posix_spawn_file_actions_adddup2_works="guessing no";;
m4/posix_spawn.m4:            mingw* | windows*)  gl_cv_func_posix_spawn_file_actions_adddup2_works="guessing no" ;;
m4/posix_spawn.m4:            *)                  gl_cv_func_posix_spawn_file_actions_adddup2_works="guessing yes";;
m4/posix_spawn.m4:    case "$gl_cv_func_posix_spawn_file_actions_adddup2_works" in
m4/posix_spawn.m4:AC_DEFUN([gl_FUNC_POSIX_SPAWN_FILE_ACTIONS_ADDOPEN],
m4/posix_spawn.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/posix_spawn.m4:  gl_POSIX_SPAWN
m4/posix_spawn.m4:      [gl_cv_func_posix_spawn_file_actions_addopen_works],
m4/posix_spawn.m4:         [gl_cv_func_posix_spawn_file_actions_addopen_works=yes],
m4/posix_spawn.m4:         [gl_cv_func_posix_spawn_file_actions_addopen_works=no],
m4/posix_spawn.m4:            *-musl* | midipix*) gl_cv_func_posix_spawn_file_actions_addopen_works="guessing no";;
m4/posix_spawn.m4:            solaris*)           gl_cv_func_posix_spawn_file_actions_addopen_works="guessing no";;
m4/posix_spawn.m4:            mingw* | windows*)  gl_cv_func_posix_spawn_file_actions_addopen_works="guessing no" ;;
m4/posix_spawn.m4:            *)                  gl_cv_func_posix_spawn_file_actions_addopen_works="guessing yes";;
m4/posix_spawn.m4:    case "$gl_cv_func_posix_spawn_file_actions_addopen_works" in
m4/posix_spawn_faction_addchdir.m4:AC_DEFUN([gl_FUNC_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR],
m4/posix_spawn_faction_addchdir.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/posix_spawn_faction_addchdir.m4:  gl_POSIX_SPAWN
m4/posix_spawn_faction_addchdir.m4:  gl_CHECK_FUNCS_ANDROID([posix_spawn_file_actions_addchdir_np],
m4/posix_spawn_faction_addfchdir.m4:AC_DEFUN([gl_FUNC_POSIX_SPAWN_FILE_ACTIONS_ADDFCHDIR],
m4/posix_spawn_faction_addfchdir.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/posix_spawn_faction_addfchdir.m4:  gl_POSIX_SPAWN
m4/posix_spawn_faction_addfchdir.m4:  gl_CHECK_FUNCS_ANDROID([posix_spawn_file_actions_addfchdir_np],
m4/pow.m4:AC_DEFUN([gl_FUNC_POW],
m4/pow.m4:  gl_COMMON_DOUBLE_MATHFUNC([pow])
m4/powf.m4:AC_DEFUN([gl_FUNC_POWF],
m4/powf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/powf.m4:  AC_REQUIRE([gl_FUNC_POW])
m4/powf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/pread.m4:AC_DEFUN([gl_FUNC_PREAD],
m4/pread.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/pread.m4:  gl_CHECK_FUNCS_ANDROID([pread], [[#include <unistd.h>]])
m4/pread.m4:      [gl_cv_func_pread_works],
m4/pread.m4:          hpux*) gl_cv_func_pread_works="guessing no" ;;
m4/pread.m4:          *)     gl_cv_func_pread_works="guessing yes" ;;
m4/pread.m4:        gl_saved_CPPFLAGS="$CPPFLAGS"
m4/pread.m4:          [gl_cv_func_pread_works=yes],
m4/pread.m4:          [gl_cv_func_pread_works=no],
m4/pread.m4:        CPPFLAGS="$gl_saved_CPPFLAGS"
m4/pread.m4:    case "$gl_cv_func_pread_works" in
m4/pread.m4:    case "$gl_cv_onwards_func_pread" in
m4/printf-frexp.m4:AC_DEFUN([gl_FUNC_PRINTF_FREXP],
m4/printf-frexp.m4:  AC_REQUIRE([gl_CHECK_FREXP_NO_LIBM])
m4/printf-frexp.m4:  if test $gl_cv_func_frexp_no_libm = yes; then
m4/printf-frexp.m4:    gl_FUNC_FREXP_WORKS
m4/printf-frexp.m4:    case "$gl_cv_func_frexp_works" in
m4/printf-frexp.m4:    [gl_cv_func_ldexp_no_libm],
m4/printf-frexp.m4:        [gl_cv_func_ldexp_no_libm=yes],
m4/printf-frexp.m4:        [gl_cv_func_ldexp_no_libm=no])
m4/printf-frexp.m4:  if test $gl_cv_func_ldexp_no_libm = yes; then
m4/printf-frexpl.m4:AC_DEFUN([gl_FUNC_PRINTF_FREXPL],
m4/printf-frexpl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/printf-frexpl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/printf-frexpl.m4:  dnl Subset of gl_FUNC_FREXPL_NO_LIBM.
m4/printf-frexpl.m4:  gl_CHECK_FREXPL_NO_LIBM
m4/printf-frexpl.m4:  if test $gl_cv_func_frexpl_no_libm = yes; then
m4/printf-frexpl.m4:    gl_FUNC_FREXPL_WORKS
m4/printf-frexpl.m4:    case "$gl_cv_func_frexpl_works" in
m4/printf-frexpl.m4:      *yes) gl_func_frexpl_no_libm=yes ;;
m4/printf-frexpl.m4:      *)    gl_func_frexpl_no_libm=no; REPLACE_FREXPL=1 ;;
m4/printf-frexpl.m4:    gl_func_frexpl_no_libm=no
m4/printf-frexpl.m4:  if test $gl_func_frexpl_no_libm = yes; then
m4/printf-frexpl.m4:  gl_CHECK_LDEXPL_NO_LIBM
m4/printf-frexpl.m4:  if test $gl_cv_func_ldexpl_no_libm = yes; then
m4/printf-frexpl.m4:    gl_FUNC_LDEXPL_WORKS
m4/printf-frexpl.m4:    case "$gl_cv_func_ldexpl_works" in
m4/printf-gnu.m4:AC_DEFUN([gl_FUNC_PRINTF_GNU],
m4/printf-gnu.m4:  AC_REQUIRE([gl_FUNC_PRINTF_IS_POSIX])
m4/printf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/printf-gnu.m4:  gl_cv_func_printf_gnu=no
m4/printf-gnu.m4:  if test $gl_cv_func_printf_posix = yes; then
m4/printf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/printf-gnu.m4:        gl_cv_func_printf_gnu=yes
m4/printf-gnu.m4:  if test $gl_cv_func_printf_gnu = no; then
m4/printf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/printf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/printf-gnu.m4:    gl_REPLACE_PRINTF
m4/printf-posix.m4:AC_DEFUN([gl_FUNC_PRINTF_POSIX],
m4/printf-posix.m4:  AC_REQUIRE([gl_FUNC_PRINTF_IS_POSIX])
m4/printf-posix.m4:  if test $gl_cv_func_printf_posix = no; then
m4/printf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/printf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/printf-posix.m4:    gl_REPLACE_PRINTF
m4/printf-posix.m4:dnl Result is gl_cv_func_printf_posix.
m4/printf-posix.m4:AC_DEFUN([gl_FUNC_PRINTF_IS_POSIX],
m4/printf-posix.m4:  AC_REQUIRE([gl_FUNC_VFPRINTF_IS_POSIX])
m4/printf-posix.m4:  gl_cv_func_printf_posix="$gl_cv_func_vfprintf_posix"
m4/printf-posix.m4:AC_DEFUN([gl_REPLACE_PRINTF],
m4/printf-posix.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/printf-posix.m4:  AC_REQUIRE([gl_ASM_SYMBOL_PREFIX])
m4/printf-posix.m4:  gl_PREREQ_PRINTF
m4/printf-posix.m4:AC_DEFUN([gl_PREREQ_PRINTF], [:])
m4/printf-with-n-directive.m4:AC_DEFUN([gl_PRINTF_SUPPORT_N_DIRECTIVE], [
m4/printf.m4:dnl Result is gl_cv_func_printf_sizes_c99.
m4/printf.m4:AC_DEFUN([gl_PRINTF_SIZES_C99],
m4/printf.m4:  AC_REQUIRE([gl_AC_HEADER_STDINT_H])
m4/printf.m4:  AC_REQUIRE([gl_AC_HEADER_INTTYPES_H])
m4/printf.m4:    [gl_cv_func_printf_sizes_c99],
m4/printf.m4:        [gl_cv_func_printf_sizes_c99=yes],
m4/printf.m4:        [gl_cv_func_printf_sizes_c99=no],
m4/printf.m4:           *-gnu* | gnu*)        gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           *-musl* | midipix*)   gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           freebsd[1-4].*)       gl_cv_func_printf_sizes_c99="guessing no";;
m4/printf.m4:           freebsd* | kfreebsd*) gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           midnightbsd*)         gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           darwin[1-6].*)        gl_cv_func_printf_sizes_c99="guessing no";;
m4/printf.m4:           darwin*)              gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:                                 gl_cv_func_printf_sizes_c99="guessing no";;
m4/printf.m4:           openbsd*)             gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           solaris2.[1-9][0-9]*) gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           solaris*)             gl_cv_func_printf_sizes_c99="guessing no";;
m4/printf.m4:                                 gl_cv_func_printf_sizes_c99="guessing no";;
m4/printf.m4:           netbsd*)              gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           linux*-android*)      gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           windows*-msvc*)       gl_cv_func_printf_sizes_c99="guessing yes" ;;
m4/printf.m4:                                   [gl_cv_func_printf_sizes_c99="guessing yes"],
m4/printf.m4:                                   [gl_cv_func_printf_sizes_c99="guessing no"])
m4/printf.m4:           *)                    gl_cv_func_printf_sizes_c99="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_sizes_c23.
m4/printf.m4:AC_DEFUN([gl_PRINTF_SIZES_C23],
m4/printf.m4:  AC_REQUIRE([gl_AC_HEADER_STDINT_H])
m4/printf.m4:  AC_REQUIRE([gl_AC_HEADER_INTTYPES_H])
m4/printf.m4:    [gl_cv_func_printf_sizes_c23],
m4/printf.m4:        [gl_cv_func_printf_sizes_c23=yes],
m4/printf.m4:        [gl_cv_func_printf_sizes_c23=no],
m4/printf.m4:           *-gnu* | gnu*)      gl_cv_func_printf_sizes_c23="guessing no";;
m4/printf.m4:           *-musl* | midipix*) gl_cv_func_printf_sizes_c23="guessing no";;
m4/printf.m4:           linux*-android*)    gl_cv_func_printf_sizes_c23="guessing no";;
m4/printf.m4:           mingw* | windows*)  gl_cv_func_printf_sizes_c23="guessing no";;
m4/printf.m4:           *)                  gl_cv_func_printf_sizes_c23="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_long_double.
m4/printf.m4:AC_DEFUN([gl_PRINTF_LONG_DOUBLE],
m4/printf.m4:    [gl_cv_func_printf_long_double],
m4/printf.m4:        [gl_cv_func_printf_long_double=yes],
m4/printf.m4:        [gl_cv_func_printf_long_double=no],
m4/printf.m4:           beos*)             gl_cv_func_printf_long_double="guessing no";;
m4/printf.m4:           linux*-android*)   gl_cv_func_printf_long_double="guessing yes";;
m4/printf.m4:           windows*-msvc*)    gl_cv_func_printf_long_double="guessing yes" ;;
m4/printf.m4:                                [gl_cv_func_printf_long_double="guessing yes"],
m4/printf.m4:                                [gl_cv_func_printf_long_double="guessing no"])
m4/printf.m4:           *)                 gl_cv_func_printf_long_double="guessing yes";;
m4/printf.m4:dnl Result is gl_cv_func_printf_infinite.
m4/printf.m4:AC_DEFUN([gl_PRINTF_INFINITE],
m4/printf.m4:    [gl_cv_func_printf_infinite],
m4/printf.m4:        [gl_cv_func_printf_infinite=yes],
m4/printf.m4:        [gl_cv_func_printf_infinite=no],
m4/printf.m4:           *-gnu* | gnu*)        gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           *-musl* | midipix*)   gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           freebsd[1-5].*)       gl_cv_func_printf_infinite="guessing no";;
m4/printf.m4:           freebsd* | kfreebsd*) gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           midnightbsd*)         gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           darwin[1-6].*)        gl_cv_func_printf_infinite="guessing no";;
m4/printf.m4:           darwin*)              gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           hpux[7-9]* | hpux10*) gl_cv_func_printf_infinite="guessing no";;
m4/printf.m4:           hpux*)                gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:                                 gl_cv_func_printf_infinite="guessing no";;
m4/printf.m4:           netbsd*)              gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           openbsd[1-5].*)       gl_cv_func_printf_infinite="guessing no";;
m4/printf.m4:           openbsd*)             gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           beos*)                gl_cv_func_printf_infinite="guessing yes";;
m4/printf.m4:           linux*-android*)      gl_cv_func_printf_infinite="guessing no";;
m4/printf.m4:           windows*-msvc*)       gl_cv_func_printf_infinite="guessing yes" ;;
m4/printf.m4:                                   [gl_cv_func_printf_infinite="guessing yes"],
m4/printf.m4:                                   [gl_cv_func_printf_infinite="guessing no"])
m4/printf.m4:           *)                    gl_cv_func_printf_infinite="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_infinite_long_double.
m4/printf.m4:AC_DEFUN([gl_PRINTF_INFINITE_LONG_DOUBLE],
m4/printf.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/printf.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/printf.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/printf.m4:  dnl The user can set or unset the variable gl_printf_safe to indicate
m4/printf.m4:  if test -n "$gl_printf_safe"; then
m4/printf.m4:  case "$gl_cv_func_printf_long_double" in
m4/printf.m4:        [gl_cv_func_printf_infinite_long_double],
m4/printf.m4:            [gl_cv_func_printf_infinite_long_double=yes],
m4/printf.m4:            [gl_cv_func_printf_infinite_long_double=no],
m4/printf.m4:               ia64 | x86_64 | i*86) gl_cv_func_printf_infinite_long_double="guessing no";;
m4/printf.m4:                   *-gnu* | gnu*)        gl_cv_func_printf_infinite_long_double="guessing yes";;
m4/printf.m4:                   *-musl* | midipix*)   gl_cv_func_printf_infinite_long_double="guessing yes";;
m4/printf.m4:                   freebsd[1-5].*)       gl_cv_func_printf_infinite_long_double="guessing no";;
m4/printf.m4:                   freebsd* | kfreebsd*) gl_cv_func_printf_infinite_long_double="guessing yes";;
m4/printf.m4:                   midnightbsd*)         gl_cv_func_printf_infinite_long_double="guessing yes";;
m4/printf.m4:                   hpux[7-9]* | hpux10*) gl_cv_func_printf_infinite_long_double="guessing no";;
m4/printf.m4:                   hpux*)                gl_cv_func_printf_infinite_long_double="guessing yes";;
m4/printf.m4:                   openbsd[1-5].*)       gl_cv_func_printf_infinite_long_double="guessing no";;
m4/printf.m4:                   openbsd*)             gl_cv_func_printf_infinite_long_double="guessing yes";;
m4/printf.m4:                   linux*-android*)      gl_cv_func_printf_infinite_long_double="guessing no";;
m4/printf.m4:                   windows*-msvc*)       gl_cv_func_printf_infinite_long_double="guessing yes" ;;
m4/printf.m4:                                           [gl_cv_func_printf_infinite_long_double="guessing yes"],
m4/printf.m4:                                           [gl_cv_func_printf_infinite_long_double="guessing no"])
m4/printf.m4:                   *)                    gl_cv_func_printf_infinite_long_double="$gl_cross_guess_normal";;
m4/printf.m4:      gl_cv_func_printf_infinite_long_double="irrelevant"
m4/printf.m4:dnl Result is gl_cv_func_printf_directive_a.
m4/printf.m4:AC_DEFUN([gl_PRINTF_DIRECTIVE_A],
m4/printf.m4:    [gl_cv_func_printf_directive_a],
m4/printf.m4:        [gl_cv_func_printf_directive_a=yes],
m4/printf.m4:        [gl_cv_func_printf_directive_a=no],
m4/printf.m4:               [gl_cv_func_printf_directive_a="guessing yes"],
m4/printf.m4:               [gl_cv_func_printf_directive_a="guessing no"])
m4/printf.m4:           *-musl* | midipix*)   gl_cv_func_printf_directive_a="guessing yes";;
m4/printf.m4:           linux*-android*)      gl_cv_func_printf_directive_a="guessing no";;
m4/printf.m4:           mingw* | windows*)    gl_cv_func_printf_directive_a="guessing no";;
m4/printf.m4:           *)                    gl_cv_func_printf_directive_a="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_directive_b.
m4/printf.m4:AC_DEFUN([gl_PRINTF_DIRECTIVE_B],
m4/printf.m4:    [gl_cv_func_printf_directive_b],
m4/printf.m4:        [gl_cv_func_printf_directive_b=yes],
m4/printf.m4:        [gl_cv_func_printf_directive_b=no],
m4/printf.m4:               [gl_cv_func_printf_directive_uppercase_b="guessing yes"],
m4/printf.m4:               [gl_cv_func_printf_directive_uppercase_b="guessing no"])
m4/printf.m4:           *-musl* | midipix*) gl_cv_func_printf_directive_b="guessing no";;
m4/printf.m4:           linux*-android*)    gl_cv_func_printf_directive_b="guessing no";;
m4/printf.m4:           mingw* | windows*)  gl_cv_func_printf_directive_b="guessing no";;
m4/printf.m4:           *)                  gl_cv_func_printf_directive_b="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_directive_uppercase_b.
m4/printf.m4:AC_DEFUN([gl_PRINTF_DIRECTIVE_UPPERCASE_B],
m4/printf.m4:    [gl_cv_func_printf_directive_uppercase_b],
m4/printf.m4:        [gl_cv_func_printf_directive_uppercase_b=yes],
m4/printf.m4:        [gl_cv_func_printf_directive_uppercase_b=no],
m4/printf.m4:               [gl_cv_func_printf_directive_uppercase_b="guessing yes"],
m4/printf.m4:               [gl_cv_func_printf_directive_uppercase_b="guessing no"])
m4/printf.m4:           *-musl* | midipix*) gl_cv_func_printf_directive_uppercase_b="guessing no";;
m4/printf.m4:           linux*-android*)    gl_cv_func_printf_directive_uppercase_b="guessing no";;
m4/printf.m4:           mingw* | windows*)  gl_cv_func_printf_directive_uppercase_b="guessing no";;
m4/printf.m4:           *)                  gl_cv_func_printf_directive_uppercase_b="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_directive_f.
m4/printf.m4:AC_DEFUN([gl_PRINTF_DIRECTIVE_F],
m4/printf.m4:    [gl_cv_func_printf_directive_f],
m4/printf.m4:        [gl_cv_func_printf_directive_f=yes],
m4/printf.m4:        [gl_cv_func_printf_directive_f=no],
m4/printf.m4:           *-gnu* | gnu*)        gl_cv_func_printf_directive_f="guessing yes";;
m4/printf.m4:           *-musl* | midipix*)   gl_cv_func_printf_directive_f="guessing yes";;
m4/printf.m4:           freebsd[1-5].*)       gl_cv_func_printf_directive_f="guessing no";;
m4/printf.m4:           freebsd* | kfreebsd*) gl_cv_func_printf_directive_f="guessing yes";;
m4/printf.m4:           midnightbsd*)         gl_cv_func_printf_directive_f="guessing yes";;
m4/printf.m4:           darwin[1-6].*)        gl_cv_func_printf_directive_f="guessing no";;
m4/printf.m4:           darwin*)              gl_cv_func_printf_directive_f="guessing yes";;
m4/printf.m4:           openbsd[1-5].*)       gl_cv_func_printf_directive_f="guessing no";;
m4/printf.m4:           openbsd*)             gl_cv_func_printf_directive_f="guessing yes";;
m4/printf.m4:           solaris2.[1-9][0-9]*) gl_cv_func_printf_directive_f="guessing yes";;
m4/printf.m4:           solaris*)             gl_cv_func_printf_directive_f="guessing no";;
m4/printf.m4:           linux*-android*)      gl_cv_func_printf_directive_f="guessing no";;
m4/printf.m4:           windows*-msvc*)       gl_cv_func_printf_directive_f="guessing yes" ;;
m4/printf.m4:                                   [gl_cv_func_printf_directive_f="guessing yes"],
m4/printf.m4:                                   [gl_cv_func_printf_directive_f="guessing no"])
m4/printf.m4:           *)                    gl_cv_func_printf_directive_f="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_directive_n.
m4/printf.m4:AC_DEFUN([gl_PRINTF_DIRECTIVE_N],
m4/printf.m4:    [gl_cv_func_printf_directive_n],
m4/printf.m4:        [gl_cv_func_printf_directive_n=yes],
m4/printf.m4:        [gl_cv_func_printf_directive_n=no],
m4/printf.m4:                                [gl_cv_func_printf_directive_n="guessing yes"],
m4/printf.m4:                                [gl_cv_func_printf_directive_n="guessing no"])
m4/printf.m4:           linux*-android*)   gl_cv_func_printf_directive_n="guessing no";;
m4/printf.m4:           mingw* | windows*) gl_cv_func_printf_directive_n="guessing no";;
m4/printf.m4:           *)                 gl_cv_func_printf_directive_n="guessing yes";;
m4/printf.m4:dnl Result is gl_cv_func_printf_directive_ls.
m4/printf.m4:AC_DEFUN([gl_PRINTF_DIRECTIVE_LS],
m4/printf.m4:    [gl_cv_func_printf_directive_ls],
m4/printf.m4:        [gl_cv_func_printf_directive_ls=yes],
m4/printf.m4:        [gl_cv_func_printf_directive_ls=no],
m4/printf.m4:           openbsd[1-5].*)    gl_cv_func_printf_directive_ls="guessing no";;
m4/printf.m4:           openbsd*)          gl_cv_func_printf_directive_ls="guessing yes";;
m4/printf.m4:           irix*)             gl_cv_func_printf_directive_ls="guessing no";;
m4/printf.m4:           solaris*)          gl_cv_func_printf_directive_ls="guessing no";;
m4/printf.m4:           cygwin*)           gl_cv_func_printf_directive_ls="guessing no";;
m4/printf.m4:           beos* | haiku*)    gl_cv_func_printf_directive_ls="guessing no";;
m4/printf.m4:           linux*-android*)   gl_cv_func_printf_directive_ls="guessing no";;
m4/printf.m4:           mingw* | windows*) gl_cv_func_printf_directive_ls="guessing yes";;
m4/printf.m4:           *)                 gl_cv_func_printf_directive_ls="guessing yes";;
m4/printf.m4:dnl Result is gl_cv_func_printf_directive_lc.
m4/printf.m4:AC_DEFUN([gl_PRINTF_DIRECTIVE_LC],
m4/printf.m4:    [gl_cv_func_printf_directive_lc],
m4/printf.m4:        [gl_cv_func_printf_directive_lc=yes],
m4/printf.m4:        [gl_cv_func_printf_directive_lc=no],
m4/printf.m4:           *-musl* | midipix*) gl_cv_func_printf_directive_lc="guessing no";;
m4/printf.m4:           *)                  gl_cv_func_printf_directive_lc="guessing yes";;
m4/printf.m4:dnl Result is gl_cv_func_printf_positions.
m4/printf.m4:AC_DEFUN_ONCE([gl_PRINTF_POSITIONS],
m4/printf.m4:    [gl_cv_func_printf_positions],
m4/printf.m4:        [gl_cv_func_printf_positions=yes],
m4/printf.m4:        [gl_cv_func_printf_positions=no],
m4/printf.m4:             gl_cv_func_printf_positions="guessing no";;
m4/printf.m4:             gl_cv_func_printf_positions="guessing no";;
m4/printf.m4:             gl_cv_func_printf_positions="guessing yes";;
m4/printf.m4:             gl_cv_func_printf_positions="guessing no";;
m4/printf.m4:             gl_cv_func_printf_positions="guessing yes";;
m4/printf.m4:dnl Result is gl_cv_func_printf_flag_grouping.
m4/printf.m4:AC_DEFUN([gl_PRINTF_FLAG_GROUPING],
m4/printf.m4:    [gl_cv_func_printf_flag_grouping],
m4/printf.m4:        [gl_cv_func_printf_flag_grouping=yes],
m4/printf.m4:        [gl_cv_func_printf_flag_grouping=no],
m4/printf.m4:           cygwin*)                 gl_cv_func_printf_flag_grouping="guessing no";;
m4/printf.m4:           netbsd*)                 gl_cv_func_printf_flag_grouping="guessing no";;
m4/printf.m4:           linux*-android*)         gl_cv_func_printf_flag_grouping="guessing no";;
m4/printf.m4:           mingw* | windows* | pw*) gl_cv_func_printf_flag_grouping="guessing no";;
m4/printf.m4:           *)                       gl_cv_func_printf_flag_grouping="guessing yes";;
m4/printf.m4:dnl Result is gl_cv_func_printf_flag_leftadjust.
m4/printf.m4:AC_DEFUN([gl_PRINTF_FLAG_LEFTADJUST],
m4/printf.m4:    [gl_cv_func_printf_flag_leftadjust],
m4/printf.m4:        [gl_cv_func_printf_flag_leftadjust=yes],
m4/printf.m4:        [gl_cv_func_printf_flag_leftadjust=no],
m4/printf.m4:           hpux11*)           gl_cv_func_printf_flag_leftadjust="guessing yes";;
m4/printf.m4:           hpux*)             gl_cv_func_printf_flag_leftadjust="guessing no";;
m4/printf.m4:           linux*-android*)   gl_cv_func_printf_flag_leftadjust="guessing yes";;
m4/printf.m4:           mingw* | windows*) gl_cv_func_printf_flag_leftadjust="guessing yes";;
m4/printf.m4:           *)                 gl_cv_func_printf_flag_leftadjust="guessing yes";;
m4/printf.m4:dnl Result is gl_cv_func_printf_flag_zero.
m4/printf.m4:AC_DEFUN([gl_PRINTF_FLAG_ZERO],
m4/printf.m4:    [gl_cv_func_printf_flag_zero],
m4/printf.m4:        [gl_cv_func_printf_flag_zero=yes],
m4/printf.m4:        [gl_cv_func_printf_flag_zero=no],
m4/printf.m4:           *-gnu* | gnu*)      gl_cv_func_printf_flag_zero="guessing yes";;
m4/printf.m4:           *-musl* | midipix*) gl_cv_func_printf_flag_zero="guessing yes";;
m4/printf.m4:           beos*)              gl_cv_func_printf_flag_zero="guessing yes";;
m4/printf.m4:           linux*-android*)    gl_cv_func_printf_flag_zero="guessing no";;
m4/printf.m4:           mingw* | windows*)  gl_cv_func_printf_flag_zero="guessing no";;
m4/printf.m4:           *)                  gl_cv_func_printf_flag_zero="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_printf_flag_alt_precision_zero.
m4/printf.m4:AC_DEFUN([gl_PRINTF_FLAG_ALT_PRECISION_ZERO],
m4/printf.m4:    [gl_cv_func_printf_flag_alt_precision_zero],
m4/printf.m4:        [gl_cv_func_printf_flag_alt_precision_zero=yes],
m4/printf.m4:        [gl_cv_func_printf_flag_alt_precision_zero=no],
m4/printf.m4:                    gl_cv_func_printf_flag_alt_precision_zero="guessing no" ;;
m4/printf.m4:           darwin*) gl_cv_func_printf_flag_alt_precision_zero="guessing yes" ;;
m4/printf.m4:           *)       gl_cv_func_printf_flag_alt_precision_zero="guessing yes" ;;
m4/printf.m4:dnl Result is gl_cv_func_printf_precision.
m4/printf.m4:AC_DEFUN([gl_PRINTF_PRECISION],
m4/printf.m4:    [gl_cv_func_printf_precision],
m4/printf.m4:        [gl_cv_func_printf_precision=yes],
m4/printf.m4:        [gl_cv_func_printf_precision=no],
m4/printf.m4:           solaris*)                gl_cv_func_printf_precision="guessing no" ;;
m4/printf.m4:           mingw* | windows* | pw*) gl_cv_func_printf_precision="guessing no" ;;
m4/printf.m4:           beos*)                   gl_cv_func_printf_precision="guessing no" ;;
m4/printf.m4:           linux*-android*)         gl_cv_func_printf_precision="guessing yes" ;;
m4/printf.m4:           *)                       gl_cv_func_printf_precision="guessing yes" ;;
m4/printf.m4:dnl Result is gl_cv_func_printf_enomem.
m4/printf.m4:AC_DEFUN([gl_PRINTF_ENOMEM],
m4/printf.m4:  AC_REQUIRE([gl_MULTIARCH])
m4/printf.m4:    [gl_cv_func_printf_enomem],
m4/printf.m4:      gl_cv_func_printf_enomem="guessing no"
m4/printf.m4:              0) gl_cv_func_printf_enomem="yes" ;;
m4/printf.m4:              77) gl_cv_func_printf_enomem="guessing no" ;;
m4/printf.m4:              *) gl_cv_func_printf_enomem="no" ;;
m4/printf.m4:            gl_cv_func_printf_enomem="guessing no"
m4/printf.m4:          gl_cv_func_printf_enomem="guessing no"
m4/printf.m4:      if test "$gl_cv_func_printf_enomem" = "guessing no"; then
m4/printf.m4:          *-gnu* | gnu*)   gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:          solaris*)        gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:          aix*)            gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:                             hppa*) gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:                             *)     gl_cv_func_printf_enomem="guessing no";;
m4/printf.m4:          irix*)           gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:          osf*)            gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:          beos*)           gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:          haiku*)          gl_cv_func_printf_enomem="guessing yes";;
m4/printf.m4:          linux*-android*) gl_cv_func_printf_enomem="guessing no";;
m4/printf.m4:          *)               gl_cv_func_printf_enomem="$gl_cross_guess_normal";;
m4/printf.m4:AC_DEFUN([gl_SNPRINTF_PRESENCE],
m4/printf.m4:dnl Result is gl_cv_func_snprintf_truncation_c99.
m4/printf.m4:AC_DEFUN_ONCE([gl_SNPRINTF_TRUNCATION_C99],
m4/printf.m4:  AC_REQUIRE([gl_SNPRINTF_PRESENCE])
m4/printf.m4:    [gl_cv_func_snprintf_truncation_c99],
m4/printf.m4:        [gl_cv_func_snprintf_truncation_c99=yes],
m4/printf.m4:        [gl_cv_func_snprintf_truncation_c99=no],
m4/printf.m4:           *-gnu* | gnu*)        gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           *-musl* | midipix*)   gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           freebsd[1-4].*)       gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           freebsd* | kfreebsd*) gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           midnightbsd*)         gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           darwin[1-6].*)        gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           darwin*)              gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:                                 gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           openbsd*)             gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:                                 gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           solaris*)             gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           aix[1-3]*)            gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           aix*)                 gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           hpux[7-9]* | hpux10*) gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           hpux*)                gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           irix6.5)              gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           osf[3-4]*)            gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           osf*)                 gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:                                 gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           netbsd*)              gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           beos*)                gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           linux*-android*)      gl_cv_func_snprintf_truncation_c99="guessing yes";;
m4/printf.m4:           mingw* | windows*)    gl_cv_func_snprintf_truncation_c99="guessing no";;
m4/printf.m4:           *)                    gl_cv_func_snprintf_truncation_c99="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_snprintf_retval_c99.
m4/printf.m4:AC_DEFUN_ONCE([gl_SNPRINTF_RETVAL_C99],
m4/printf.m4:  AC_REQUIRE([gl_SNPRINTF_PRESENCE])
m4/printf.m4:    [gl_cv_func_snprintf_retval_c99],
m4/printf.m4:        [gl_cv_func_snprintf_retval_c99=yes],
m4/printf.m4:        [gl_cv_func_snprintf_retval_c99=no],
m4/printf.m4:           *-gnu* | gnu*)        gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           *-musl* | midipix*)   gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           freebsd[1-4].*)       gl_cv_func_snprintf_retval_c99="guessing no";;
m4/printf.m4:           freebsd* | kfreebsd*) gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           midnightbsd*)         gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           darwin[1-6].*)        gl_cv_func_snprintf_retval_c99="guessing no";;
m4/printf.m4:           darwin*)              gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:                                 gl_cv_func_snprintf_retval_c99="guessing no";;
m4/printf.m4:           openbsd*)             gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           solaris2.[1-9][0-9]*) gl_cv_func_printf_sizes_c99="guessing yes";;
m4/printf.m4:           solaris*)             gl_cv_func_printf_sizes_c99="guessing no";;
m4/printf.m4:           aix[1-3]*)            gl_cv_func_snprintf_retval_c99="guessing no";;
m4/printf.m4:           aix*)                 gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:                                 gl_cv_func_snprintf_retval_c99="guessing no";;
m4/printf.m4:           netbsd*)              gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           beos*)                gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           linux*-android*)      gl_cv_func_snprintf_retval_c99="guessing yes";;
m4/printf.m4:           windows*-msvc*)       gl_cv_func_snprintf_retval_c99="guessing yes" ;;
m4/printf.m4:                                   [gl_cv_func_snprintf_retval_c99="guessing yes"],
m4/printf.m4:                                   [gl_cv_func_snprintf_retval_c99="guessing no"])
m4/printf.m4:           *)                    gl_cv_func_snprintf_retval_c99="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_snprintf_directive_n.
m4/printf.m4:AC_DEFUN([gl_SNPRINTF_DIRECTIVE_N],
m4/printf.m4:  AC_REQUIRE([gl_SNPRINTF_PRESENCE])
m4/printf.m4:    [gl_cv_func_snprintf_directive_n],
m4/printf.m4:        [gl_cv_func_snprintf_directive_n=yes],
m4/printf.m4:        [gl_cv_func_snprintf_directive_n=no],
m4/printf.m4:                                   [gl_cv_func_snprintf_directive_n="guessing yes"],
m4/printf.m4:                                   [gl_cv_func_snprintf_directive_n="guessing no"])
m4/printf.m4:           *-musl* | midipix*)   gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           freebsd[1-4].*)       gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           freebsd* | kfreebsd*) gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           midnightbsd*)         gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           darwin[1-6].*)        gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           darwin*)              gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:                                 gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           solaris*)             gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           aix[1-3]*)            gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           aix*)                 gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           irix6.5)              gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           osf[3-4]*)            gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           osf*)                 gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:                                 gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           netbsd*)              gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           beos*)                gl_cv_func_snprintf_directive_n="guessing yes";;
m4/printf.m4:           linux*-android*)      gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           mingw* | windows*)    gl_cv_func_snprintf_directive_n="guessing no";;
m4/printf.m4:           *)                    gl_cv_func_snprintf_directive_n="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_snprintf_size1.
m4/printf.m4:AC_DEFUN([gl_SNPRINTF_SIZE1],
m4/printf.m4:  AC_REQUIRE([gl_SNPRINTF_PRESENCE])
m4/printf.m4:    [gl_cv_func_snprintf_size1],
m4/printf.m4:        [gl_cv_func_snprintf_size1=yes],
m4/printf.m4:        [gl_cv_func_snprintf_size1=no],
m4/printf.m4:           linux*-android*)   gl_cv_func_snprintf_size1="guessing yes" ;;
m4/printf.m4:           mingw* | windows*) gl_cv_func_snprintf_size1="guessing yes" ;;
m4/printf.m4:           *)                 gl_cv_func_snprintf_size1="guessing yes" ;;
m4/printf.m4:dnl Result is gl_cv_func_vsnprintf_zerosize_c99.
m4/printf.m4:AC_DEFUN([gl_VSNPRINTF_ZEROSIZE_C99],
m4/printf.m4:    [gl_cv_func_vsnprintf_zerosize_c99],
m4/printf.m4:        [gl_cv_func_vsnprintf_zerosize_c99=yes],
m4/printf.m4:        [gl_cv_func_vsnprintf_zerosize_c99=no],
m4/printf.m4:           *-gnu* | gnu*)           gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           *-musl* | midipix*)      gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           freebsd[1-4].*)          gl_cv_func_vsnprintf_zerosize_c99="guessing no";;
m4/printf.m4:           freebsd* | kfreebsd*)    gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           midnightbsd*)            gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           darwin[1-6].*)           gl_cv_func_vsnprintf_zerosize_c99="guessing no";;
m4/printf.m4:           darwin*)                 gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           cygwin*)                 gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:                                    gl_cv_func_vsnprintf_zerosize_c99="guessing no";;
m4/printf.m4:           solaris*)                gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           aix[1-3]*)               gl_cv_func_vsnprintf_zerosize_c99="guessing no";;
m4/printf.m4:           aix*)                    gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           irix6.5)                 gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:                                    gl_cv_func_vsnprintf_zerosize_c99="guessing no";;
m4/printf.m4:           netbsd*)                 gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           beos*)                   gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           linux*-android*)         gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           mingw* | windows* | pw*) gl_cv_func_vsnprintf_zerosize_c99="guessing yes";;
m4/printf.m4:           *)                       gl_cv_func_vsnprintf_zerosize_c99="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_swprintf_works.
m4/printf.m4:AC_DEFUN([gl_SWPRINTF_WORKS],
m4/printf.m4:    [gl_cv_func_swprintf_works],
m4/printf.m4:        [gl_cv_func_swprintf_works=yes],
m4/printf.m4:        [gl_cv_func_swprintf_works=no],
m4/printf.m4:           *-gnu* | gnu*)           gl_cv_func_swprintf_works="guessing yes";;
m4/printf.m4:           *-musl* | midipix*)      gl_cv_func_swprintf_works="guessing no";;
m4/printf.m4:                                    gl_cv_func_swprintf_works="guessing no";;
m4/printf.m4:           mingw* | windows* | pw*) gl_cv_func_swprintf_works="guessing no";;
m4/printf.m4:           *)                       gl_cv_func_swprintf_works="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_swprintf_directive_la.
m4/printf.m4:AC_DEFUN([gl_SWPRINTF_DIRECTIVE_LA],
m4/printf.m4:    [gl_cv_func_swprintf_directive_la],
m4/printf.m4:        [gl_cv_func_swprintf_directive_la=yes],
m4/printf.m4:        [gl_cv_func_swprintf_directive_la=no],
m4/printf.m4:               [gl_cv_func_swprintf_directive_la="guessing yes"],
m4/printf.m4:               [gl_cv_func_swprintf_directive_la="guessing no"])
m4/printf.m4:           *-musl* | midipix*) gl_cv_func_swprintf_directive_la="guessing yes";;
m4/printf.m4:           linux*-android*)    gl_cv_func_swprintf_directive_la="guessing yes";;
m4/printf.m4:           netbsd*)            gl_cv_func_swprintf_directive_la="guessing no";;
m4/printf.m4:           mingw* | windows*)  gl_cv_func_swprintf_directive_la="guessing no";;
m4/printf.m4:           *)                  gl_cv_func_swprintf_directive_la="$gl_cross_guess_normal";;
m4/printf.m4:dnl Result is gl_cv_func_swprintf_directive_lc.
m4/printf.m4:AC_DEFUN([gl_SWPRINTF_DIRECTIVE_LC],
m4/printf.m4:    [gl_cv_func_swprintf_directive_lc],
m4/printf.m4:        [gl_cv_func_swprintf_directive_lc=yes],
m4/printf.m4:        [gl_cv_func_swprintf_directive_lc=no],
m4/printf.m4:           *-gnu* | gnu*)      gl_cv_func_swprintf_directive_lc="guessing yes";;
m4/printf.m4:           *-musl* | midipix*) gl_cv_func_swprintf_directive_lc="guessing no";;
m4/printf.m4:           linux*-android*)    gl_cv_func_swprintf_directive_lc="guessing no";;
m4/printf.m4:           mingw* | windows*)  gl_cv_func_swprintf_directive_lc="guessing yes";;
m4/printf.m4:           *)                  gl_cv_func_swprintf_directive_lc="$gl_cross_guess_normal";;
m4/printf.m4:dnl 1 = gl_PRINTF_SIZES_C99
m4/printf.m4:dnl 2 = gl_PRINTF_SIZES_C23
m4/printf.m4:dnl 3 = gl_PRINTF_LONG_DOUBLE
m4/printf.m4:dnl 4 = gl_PRINTF_INFINITE
m4/printf.m4:dnl 5 = gl_PRINTF_INFINITE_LONG_DOUBLE
m4/printf.m4:dnl 6 = gl_PRINTF_DIRECTIVE_A
m4/printf.m4:dnl 7 = gl_PRINTF_DIRECTIVE_B
m4/printf.m4:dnl 8 = gl_PRINTF_DIRECTIVE_UPPERCASE_B
m4/printf.m4:dnl 9 = gl_PRINTF_DIRECTIVE_F
m4/printf.m4:dnl 10 = gl_PRINTF_DIRECTIVE_N
m4/printf.m4:dnl 11 = gl_PRINTF_DIRECTIVE_LS
m4/printf.m4:dnl 12 = gl_PRINTF_DIRECTIVE_LC
m4/printf.m4:dnl 13 = gl_PRINTF_POSITIONS
m4/printf.m4:dnl 14 = gl_PRINTF_FLAG_GROUPING
m4/printf.m4:dnl 15 = gl_PRINTF_FLAG_LEFTADJUST
m4/printf.m4:dnl 16 = gl_PRINTF_FLAG_ZERO
m4/printf.m4:dnl 17 = gl_PRINTF_FLAG_ALT_PRECISION_ZERO
m4/printf.m4:dnl 18 = gl_PRINTF_PRECISION
m4/printf.m4:dnl 19 = gl_PRINTF_ENOMEM
m4/printf.m4:dnl 20 = gl_SNPRINTF_PRESENCE
m4/printf.m4:dnl 21 = gl_SNPRINTF_TRUNCATION_C99
m4/printf.m4:dnl 22 = gl_SNPRINTF_RETVAL_C99
m4/printf.m4:dnl 23 = gl_SNPRINTF_DIRECTIVE_N
m4/printf.m4:dnl 24 = gl_SNPRINTF_SIZE1
m4/printf.m4:dnl 25 = gl_VSNPRINTF_ZEROSIZE_C99
m4/printf.m4:dnl 26 = gl_SWPRINTF_WORKS
m4/printf.m4:dnl 27 = gl_SWPRINTF_DIRECTIVE_LA
m4/printf.m4:dnl 28 = gl_SWPRINTF_DIRECTIVE_LC
m4/priv-set.m4:AC_DEFUN([gl_PRIV_SET],
m4/pselect.m4:AC_DEFUN([gl_FUNC_PSELECT],
m4/pselect.m4:  AC_REQUIRE([gl_SYS_SELECT_H])
m4/pselect.m4:      [gl_cv_sig_pselect],
m4/pselect.m4:         [gl_cv_sig_pselect=yes],
m4/pselect.m4:         [gl_cv_sig_pselect=no])])
m4/pselect.m4:      [gl_cv_func_pselect_detects_ebadf],
m4/pselect.m4:]])], [gl_cv_func_pselect_detects_ebadf=yes],
m4/pselect.m4:      [gl_cv_func_pselect_detects_ebadf=no],
m4/pselect.m4:            linux-* | linux) gl_cv_func_pselect_detects_ebadf="guessing yes" ;;
m4/pselect.m4:            midipix*)        gl_cv_func_pselect_detects_ebadf="guessing yes" ;;
m4/pselect.m4:            *-gnu* | gnu*)   gl_cv_func_pselect_detects_ebadf="guessing yes" ;;
m4/pselect.m4:            *)               gl_cv_func_pselect_detects_ebadf="$gl_cross_guess_normal" ;;
m4/pselect.m4:    case $gl_cv_func_pselect_detects_ebadf in
m4/pselect.m4:  if test $ac_cv_func_pselect = no || test $gl_cv_sig_pselect = no; then
m4/pthread-cond.m4:AC_DEFUN([gl_PTHREAD_COND],
m4/pthread-cond.m4:  AC_REQUIRE([gl_PTHREAD_H])
m4/pthread-cond.m4:     && test $gl_threads_api = windows; then
m4/pthread-mutex.m4:AC_DEFUN([gl_PTHREAD_MUTEX],
m4/pthread-mutex.m4:  AC_REQUIRE([gl_PTHREAD_H])
m4/pthread-mutex.m4:     && test $gl_threads_api = windows; then
m4/pthread-mutex.m4:        [gl_cv_func_pthread_mutexattr_getrobust],
m4/pthread-mutex.m4:           [gl_cv_func_pthread_mutexattr_getrobust=yes],
m4/pthread-mutex.m4:           [gl_cv_func_pthread_mutexattr_getrobust=no])
m4/pthread-mutex.m4:      if test $gl_cv_func_pthread_mutexattr_getrobust = no; then
m4/pthread-once.m4:AC_DEFUN([gl_PTHREAD_ONCE],
m4/pthread-once.m4:  AC_REQUIRE([gl_PTHREAD_H])
m4/pthread-once.m4:     && test $gl_threads_api = windows; then
m4/pthread-once.m4:        [gl_cv_func_pthread_once_works],
m4/pthread-once.m4:           cygwin*) gl_cv_func_pthread_once_works="guessing no" ;;
m4/pthread-once.m4:           *)       gl_cv_func_pthread_once_works="yes" ;;
m4/pthread-once.m4:      case "$gl_cv_func_pthread_once_works" in
m4/pthread-rwlock.m4:AC_DEFUN([gl_PTHREAD_RWLOCK],
m4/pthread-rwlock.m4:  AC_REQUIRE([gl_PTHREAD_H])
m4/pthread-rwlock.m4:     && test $gl_threads_api = windows; then
m4/pthread-rwlock.m4:        [gl_cv_func_pthread_rwlock_init],
m4/pthread-rwlock.m4:               [gl_cv_func_pthread_rwlock_init=yes],
m4/pthread-rwlock.m4:               [gl_cv_func_pthread_rwlock_init=no])
m4/pthread-rwlock.m4:               [gl_cv_func_pthread_rwlock_init=yes],
m4/pthread-rwlock.m4:               [gl_cv_func_pthread_rwlock_init=no])
m4/pthread-rwlock.m4:      if test $gl_cv_func_pthread_rwlock_init = no; then
m4/pthread-rwlock.m4:          [gl_cv_func_pthread_rwlock_good_waitqueue],
m4/pthread-rwlock.m4:                 [gl_cv_func_pthread_rwlock_good_waitqueue=yes],
m4/pthread-rwlock.m4:                 [gl_cv_func_pthread_rwlock_good_waitqueue=no],
m4/pthread-rwlock.m4:                  gl_cv_func_pthread_rwlock_good_waitqueue="guessing no"
m4/pthread-rwlock.m4:                gl_cv_func_pthread_rwlock_good_waitqueue="guessing yes"
m4/pthread-rwlock.m4:        case "$gl_cv_func_pthread_rwlock_good_waitqueue" in
m4/pthread-spin.m4:AC_DEFUN_ONCE([gl_PTHREAD_SPIN],
m4/pthread-spin.m4:  AC_REQUIRE([gl_PTHREAD_H_PART1])
m4/pthread-spin.m4:     && test $gl_threads_api = windows; then
m4/pthread-spin.m4:      m4_ifdef([gl_][THREADLIB], [
m4/pthread-spin.m4:        AC_REQUIRE([gl_][THREADLIB])
m4/pthread-spin.m4:          [gl_cv_func_pthread_spin_init_in_LIBMULTITHREAD],
m4/pthread-spin.m4:          [gl_saved_LIBS="$LIBS"
m4/pthread-spin.m4:             [gl_cv_func_pthread_spin_init_in_LIBMULTITHREAD=yes],
m4/pthread-spin.m4:             [gl_cv_func_pthread_spin_init_in_LIBMULTITHREAD=no])
m4/pthread-spin.m4:           LIBS="$gl_saved_LIBS"
m4/pthread-spin.m4:        if test $gl_cv_func_pthread_spin_init_in_LIBMULTITHREAD != yes; then
m4/pthread-thread.m4:AC_DEFUN([gl_PTHREAD_THREAD],
m4/pthread-thread.m4:  AC_REQUIRE([gl_PTHREAD_H])
m4/pthread-thread.m4:     && test $gl_threads_api = windows; then
m4/pthread-thread.m4:        [gl_cv_func_pthread_create],
m4/pthread-thread.m4:           [gl_cv_func_pthread_create=yes],
m4/pthread-thread.m4:           [gl_cv_func_pthread_create=no])
m4/pthread-thread.m4:      if test $gl_cv_func_pthread_create = no; then
m4/pthread-tss.m4:AC_DEFUN([gl_PTHREAD_TSS],
m4/pthread-tss.m4:  AC_REQUIRE([gl_PTHREAD_H])
m4/pthread-tss.m4:     && test $gl_threads_api = windows; then
m4/pthread_h.m4:AC_DEFUN_ONCE([gl_PTHREAD_H_PART1],
m4/pthread_h.m4:  AC_REQUIRE([gl_PTHREAD_H_DEFAULTS])
m4/pthread_h.m4:  AC_REQUIRE([gl_PTHREADLIB])
m4/pthread_h.m4:  gl_CHECK_NEXT_HEADERS([pthread.h])
m4/pthread_h.m4:    dnl On mingw, if --enable-threads=windows or gl_AVOID_WINPTHREAD is used,
m4/pthread_h.m4:    m4_ifdef([gl_][THREADLIB], [
m4/pthread_h.m4:      AC_REQUIRE([gl_][THREADLIB])
m4/pthread_h.m4:         && test $gl_threads_api = windows; then
m4/pthread_h.m4:AC_DEFUN([gl_PTHREAD_H],
m4/pthread_h.m4:  AC_REQUIRE([gl_PTHREAD_H_PART1])
m4/pthread_h.m4:  gl_PTHREAD_SPIN
m4/pthread_h.m4:    [gl_cv_const_PTHREAD_CREATE_DETACHED],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_CREATE_DETACHED=yes],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_CREATE_DETACHED=no])
m4/pthread_h.m4:  if test $gl_cv_const_PTHREAD_CREATE_DETACHED != yes; then
m4/pthread_h.m4:    [gl_cv_const_PTHREAD_MUTEX_RECURSIVE],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_MUTEX_RECURSIVE=yes],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_MUTEX_RECURSIVE=no])
m4/pthread_h.m4:  if test $gl_cv_const_PTHREAD_MUTEX_RECURSIVE != yes; then
m4/pthread_h.m4:    [gl_cv_const_PTHREAD_MUTEX_ROBUST],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_MUTEX_ROBUST=yes],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_MUTEX_ROBUST=no])
m4/pthread_h.m4:  if test $gl_cv_const_PTHREAD_MUTEX_ROBUST != yes; then
m4/pthread_h.m4:    [gl_cv_const_PTHREAD_PROCESS_SHARED],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_PROCESS_SHARED=yes],
m4/pthread_h.m4:       [gl_cv_const_PTHREAD_PROCESS_SHARED=no])
m4/pthread_h.m4:  if test $gl_cv_const_PTHREAD_PROCESS_SHARED != yes; then
m4/pthread_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <pthread.h>
m4/pthread_h.m4:# gl_PTHREAD_MODULE_INDICATOR([modulename])
m4/pthread_h.m4:AC_DEFUN([gl_PTHREAD_MODULE_INDICATOR],
m4/pthread_h.m4:  gl_PTHREAD_H_REQUIRE_DEFAULTS
m4/pthread_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/pthread_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/pthread_h.m4:AC_DEFUN([gl_PTHREAD_H_REQUIRE_DEFAULTS],
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_THREAD])
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_ONCE])
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_MUTEX])
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_RWLOCK])
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_COND])
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_TSS])
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_SPIN])
m4/pthread_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_MUTEX_TIMEDLOCK])
m4/pthread_h.m4:  AC_REQUIRE([gl_PTHREAD_H_DEFAULTS])
m4/pthread_h.m4:AC_DEFUN([gl_PTHREAD_H_DEFAULTS],
m4/pthread_mutex_timedlock.m4:AC_DEFUN([gl_FUNC_PTHREAD_MUTEX_TIMEDLOCK],
m4/pthread_mutex_timedlock.m4:  AC_REQUIRE([gl_PTHREAD_H_DEFAULTS])
m4/pthread_mutex_timedlock.m4:     m4_ifdef([gl_][THREADLIB], [
m4/pthread_mutex_timedlock.m4:       AC_REQUIRE([gl_][THREADLIB])
m4/pthread_mutex_timedlock.m4:         [gl_cv_func_pthread_mutex_timedlock_in_LIBMULTITHREAD],
m4/pthread_mutex_timedlock.m4:         [gl_saved_LIBS="$LIBS"
m4/pthread_mutex_timedlock.m4:            [gl_cv_func_pthread_mutex_timedlock_in_LIBMULTITHREAD=yes],
m4/pthread_mutex_timedlock.m4:            [gl_cv_func_pthread_mutex_timedlock_in_LIBMULTITHREAD=no])
m4/pthread_mutex_timedlock.m4:          LIBS="$gl_saved_LIBS"
m4/pthread_mutex_timedlock.m4:       if test $gl_cv_func_pthread_mutex_timedlock_in_LIBMULTITHREAD != yes; then
m4/pthread_rwlock_rdlock.m4:AC_DEFUN([gl_PTHREAD_RWLOCK_RDLOCK_PREFER_WRITER],
m4/pthread_rwlock_rdlock.m4:  AC_REQUIRE([gl_THREADLIB])
m4/pthread_rwlock_rdlock.m4:    [gl_cv_pthread_rwlock_rdlock_prefer_writer],
m4/pthread_rwlock_rdlock.m4:       [gl_cv_pthread_rwlock_rdlock_prefer_writer=yes],
m4/pthread_rwlock_rdlock.m4:       [gl_cv_pthread_rwlock_rdlock_prefer_writer=no],
m4/pthread_rwlock_rdlock.m4:          *-gnu* | gnu*)      gl_cv_pthread_rwlock_rdlock_prefer_writer="guessing no" ;;
m4/pthread_rwlock_rdlock.m4:          *-musl* | midipix*) gl_cv_pthread_rwlock_rdlock_prefer_writer="guessing no" ;;
m4/pthread_rwlock_rdlock.m4:          *-android*)         gl_cv_pthread_rwlock_rdlock_prefer_writer="guessing no" ;;
m4/pthread_rwlock_rdlock.m4:          mingw* | windows*)  if test "$gl_use_threads" = yes || test "$gl_use_threads" = posix; then
m4/pthread_rwlock_rdlock.m4:                                gl_cv_pthread_rwlock_rdlock_prefer_writer="guessing yes"
m4/pthread_rwlock_rdlock.m4:                                gl_cv_pthread_rwlock_rdlock_prefer_writer="guessing no"
m4/pthread_rwlock_rdlock.m4:          *)                  gl_cv_pthread_rwlock_rdlock_prefer_writer="$gl_cross_guess_normal" ;;
m4/pthread_rwlock_rdlock.m4:  case "$gl_cv_pthread_rwlock_rdlock_prefer_writer" in
m4/pthread_sigmask.m4:AC_DEFUN([gl_FUNC_PTHREAD_SIGMASK],
m4/pthread_sigmask.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/pthread_sigmask.m4:    [gl_cv_func_pthread_sigmask_macro],
m4/pthread_sigmask.m4:       [gl_cv_func_pthread_sigmask_macro=yes],
m4/pthread_sigmask.m4:       [gl_cv_func_pthread_sigmask_macro=no])
m4/pthread_sigmask.m4:  if test $gl_cv_func_pthread_sigmask_macro = yes; then
m4/pthread_sigmask.m4:    m4_ifdef([gl_][THREADLIB], [
m4/pthread_sigmask.m4:      AC_REQUIRE([gl_][THREADLIB])
m4/pthread_sigmask.m4:      if test "$gl_threads_api" = posix; then
m4/pthread_sigmask.m4:              [gl_cv_func_pthread_sigmask_in_LIBMULTITHREAD],
m4/pthread_sigmask.m4:              [gl_saved_LIBS="$LIBS"
m4/pthread_sigmask.m4:                 [gl_cv_func_pthread_sigmask_in_LIBMULTITHREAD=yes],
m4/pthread_sigmask.m4:                 [gl_cv_func_pthread_sigmask_in_LIBMULTITHREAD=no])
m4/pthread_sigmask.m4:               LIBS="$gl_saved_LIBS"
m4/pthread_sigmask.m4:            if test $gl_cv_func_pthread_sigmask_in_LIBMULTITHREAD = yes; then
m4/pthread_sigmask.m4:  dnl "$gl_threads_api" = posix, $LTLIBMULTITHREAD and $LIBMULTITHREAD are the
m4/pthread_sigmask.m4:            [gl_cv_func_pthread_sigmask_in_libc_works],
m4/pthread_sigmask.m4:                [gl_cv_func_pthread_sigmask_in_libc_works=no],
m4/pthread_sigmask.m4:                [gl_cv_func_pthread_sigmask_in_libc_works=yes],
m4/pthread_sigmask.m4:                     gl_cv_func_pthread_sigmask_in_libc_works="guessing no";;
m4/pthread_sigmask.m4:                     gl_cv_func_pthread_sigmask_in_libc_works="guessing yes";;
m4/pthread_sigmask.m4:          case "$gl_cv_func_pthread_sigmask_in_libc_works" in
m4/pthread_sigmask.m4:      [gl_cv_func_pthread_sigmask_return_works],
m4/pthread_sigmask.m4:        gl_saved_LIBS="$LIBS"
m4/pthread_sigmask.m4:          [gl_cv_func_pthread_sigmask_return_works=yes],
m4/pthread_sigmask.m4:          [gl_cv_func_pthread_sigmask_return_works=no],
m4/pthread_sigmask.m4:               gl_cv_func_pthread_sigmask_return_works="guessing no";;
m4/pthread_sigmask.m4:               gl_cv_func_pthread_sigmask_return_works="guessing yes";;
m4/pthread_sigmask.m4:        LIBS="$gl_saved_LIBS"
m4/pthread_sigmask.m4:    case "$gl_cv_func_pthread_sigmask_return_works" in
m4/pthread_sigmask.m4:      [gl_cv_func_pthread_sigmask_unblock_works],
m4/pthread_sigmask.m4:            gl_cv_func_pthread_sigmask_unblock_works="guessing no";;
m4/pthread_sigmask.m4:            gl_cv_func_pthread_sigmask_unblock_works="guessing yes";;
m4/pthread_sigmask.m4:        m4_ifdef([gl_][THREADLIB],
m4/pthread_sigmask.m4:           dnl $gl_cv_func_pthread_sigmask_in_libc_works is "no".
m4/pthread_sigmask.m4:           gl_saved_LIBS=$LIBS
m4/pthread_sigmask.m4:          [gl_cv_func_pthread_sigmask_unblock_works=no],
m4/pthread_sigmask.m4:        m4_ifdef([gl_][THREADLIB], [LIBS=$gl_saved_LIBS])
m4/pthread_sigmask.m4:    case "$gl_cv_func_pthread_sigmask_unblock_works" in
m4/pthread_sigmask.m4:AC_DEFUN([gl_PREREQ_PTHREAD_SIGMASK],
m4/ptsname.m4:AC_DEFUN([gl_FUNC_PTSNAME],
m4/ptsname.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/ptsname.m4:      [gl_cv_func_ptsname_sets_errno],
m4/ptsname.m4:         [gl_cv_func_ptsname_sets_errno=yes],
m4/ptsname.m4:         [gl_cv_func_ptsname_sets_errno=no],
m4/ptsname.m4:            *-gnu* | gnu*) gl_cv_func_ptsname_sets_errno="guessing yes" ;;
m4/ptsname.m4:            *-musl*)       gl_cv_func_ptsname_sets_errno="guessing yes" ;;
m4/ptsname.m4:            midipix*)      gl_cv_func_ptsname_sets_errno="guessing yes" ;;
m4/ptsname.m4:            *)             gl_cv_func_ptsname_sets_errno="$gl_cross_guess_normal" ;;
m4/ptsname.m4:    case $gl_cv_func_ptsname_sets_errno in
m4/ptsname.m4:AC_DEFUN([gl_PREREQ_PTSNAME], [
m4/ptsname_r.m4:AC_DEFUN([gl_FUNC_PTSNAME_R],
m4/ptsname_r.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/ptsname_r.m4:      [gl_cv_func_ptsname_r_signature_ok],
m4/ptsname_r.m4:         [gl_cv_func_ptsname_r_signature_ok=yes],
m4/ptsname_r.m4:         [gl_cv_func_ptsname_r_signature_ok=no])
m4/ptsname_r.m4:    if test $gl_cv_func_ptsname_r_signature_ok = no; then
m4/ptsname_r.m4:        [gl_cv_func_ptsname_r_retval_ok],
m4/ptsname_r.m4:           [gl_cv_func_ptsname_r_retval_ok=yes],
m4/ptsname_r.m4:           [gl_cv_func_ptsname_r_retval_ok=no],
m4/ptsname_r.m4:                gl_cv_func_ptsname_r_retval_ok="guessing no" ;;
m4/ptsname_r.m4:                gl_cv_func_ptsname_r_retval_ok="guessing yes" ;;
m4/ptsname_r.m4:      case "$gl_cv_func_ptsname_r_retval_ok" in
m4/ptsname_r.m4:AC_DEFUN([gl_PREREQ_PTSNAME_R], [
m4/ptsname_r.m4:    [gl_cv_func_isatty_sets_errno],
m4/ptsname_r.m4:       [gl_cv_func_isatty_sets_errno=yes],
m4/ptsname_r.m4:       [gl_cv_func_isatty_sets_errno=no],
m4/ptsname_r.m4:            gl_cv_func_isatty_sets_errno="guessing no" ;;
m4/ptsname_r.m4:              [gl_cv_func_isatty_sets_errno="guessing yes"],
m4/ptsname_r.m4:              [gl_cv_func_isatty_sets_errno="guessing no"])
m4/ptsname_r.m4:            gl_cv_func_isatty_sets_errno="guessing yes" ;;
m4/ptsname_r.m4:  case "$gl_cv_func_isatty_sets_errno" in
m4/pty.m4:# gl_PTY_LIB
m4/pty.m4:AC_DEFUN([gl_PTY_LIB],
m4/pty.m4:AC_DEFUN([gl_FUNC_FORKPTY],
m4/pty.m4:  AC_REQUIRE([gl_PTY_LIB])
m4/pty.m4:  AC_REQUIRE([gl_PTY_H])
m4/pty.m4:      [gl_cv_func_forkpty_const],
m4/pty.m4:        [gl_cv_func_forkpty_const=yes], [gl_cv_func_forkpty_const=no])
m4/pty.m4:    if test $gl_cv_func_forkpty_const != yes; then
m4/pty.m4:AC_DEFUN([gl_FUNC_OPENPTY],
m4/pty.m4:  AC_REQUIRE([gl_PTY_LIB])
m4/pty.m4:  AC_REQUIRE([gl_PTY_H])
m4/pty.m4:      [gl_cv_func_openpty_const],
m4/pty.m4:        [gl_cv_func_openpty_const=yes], [gl_cv_func_openpty_const=no])
m4/pty.m4:    if test $gl_cv_func_openpty_const != yes; then
m4/pty.m4:    gl_CHECK_FUNCS_ANDROID([posix_openpt], [[#include <stdlib.h>]])
m4/pty_h.m4:# gl_PTY_H
m4/pty_h.m4:AC_DEFUN_ONCE([gl_PTY_H],
m4/pty_h.m4:  AC_REQUIRE([gl_PTY_H_DEFAULTS])
m4/pty_h.m4:    gl_PTY_CHECK_UTIL_H
m4/pty_h.m4:  gl_CHECK_NEXT_HEADERS([pty.h])
m4/pty_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/pty_h.m4:AC_DEFUN([gl_PTY_CHECK_UTIL_H],
m4/pty_h.m4:  AC_REQUIRE([gl_PTY_H_DEFAULTS])
m4/pty_h.m4:# gl_PTY_MODULE_INDICATOR([modulename])
m4/pty_h.m4:AC_DEFUN([gl_PTY_MODULE_INDICATOR],
m4/pty_h.m4:  gl_PTY_H_REQUIRE_DEFAULTS
m4/pty_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/pty_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/pty_h.m4:AC_DEFUN([gl_PTY_H_REQUIRE_DEFAULTS],
m4/pty_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FORKPTY])
m4/pty_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OPENPTY])
m4/pty_h.m4:  AC_REQUIRE([gl_PTY_H_DEFAULTS])
m4/pty_h.m4:AC_DEFUN([gl_PTY_H_DEFAULTS],
m4/putenv.m4:AC_DEFUN([gl_FUNC_PUTENV],
m4/putenv.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/putenv.m4:    [gl_cv_func_svid_putenv],
m4/putenv.m4:       [gl_cv_func_svid_putenv=yes],
m4/putenv.m4:       [gl_cv_func_svid_putenv=no],
m4/putenv.m4:          *-gnu* | gnu*)      gl_cv_func_svid_putenv="guessing yes" ;;
m4/putenv.m4:          *-musl* | midipix*) gl_cv_func_svid_putenv="guessing yes" ;;
m4/putenv.m4:          mingw* | windows*)  gl_cv_func_svid_putenv="guessing no" ;;
m4/putenv.m4:          *)                  gl_cv_func_svid_putenv="$gl_cross_guess_normal" ;;
m4/putenv.m4:  case "$gl_cv_func_svid_putenv" in
m4/putenv.m4:AC_DEFUN([gl_PREREQ_PUTENV],
m4/pwrite.m4:AC_DEFUN([gl_FUNC_PWRITE],
m4/pwrite.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/pwrite.m4:  gl_CHECK_FUNCS_ANDROID([pwrite], [[#include <unistd.h>]])
m4/pwrite.m4:      [gl_cv_func_pwrite_works],
m4/pwrite.m4:          hpux*) gl_cv_func_pwrite_works="guessing no" ;;
m4/pwrite.m4:          *)     gl_cv_func_pwrite_works="guessing yes" ;;
m4/pwrite.m4:        gl_saved_CPPFLAGS="$CPPFLAGS"
m4/pwrite.m4:          [gl_cv_func_pwrite_works=yes],
m4/pwrite.m4:          [gl_cv_func_pwrite_works=no],
m4/pwrite.m4:        CPPFLAGS="$gl_saved_CPPFLAGS"
m4/pwrite.m4:    case "$gl_cv_func_pwrite_works" in
m4/pwrite.m4:    case "$gl_cv_onwards_func_pwrite" in
m4/qsort_r.m4:AC_DEFUN([gl_FUNC_QSORT_R],
m4/qsort_r.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/qsort_r.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/qsort_r.m4:    AC_CACHE_CHECK([for qsort_r signature], [gl_cv_qsort_r_signature],
m4/qsort_r.m4:         [gl_cv_qsort_r_signature=GNU],
m4/qsort_r.m4:            [gl_cv_qsort_r_signature=BSD],
m4/qsort_r.m4:            [gl_cv_qsort_r_signature=unknown])])])
m4/qsort_r.m4:    case $gl_cv_qsort_r_signature in
m4/quote.m4:AC_DEFUN([gl_QUOTE],
m4/quotearg.m4:AC_DEFUN([gl_QUOTEARG],
m4/raise.m4:AC_DEFUN([gl_FUNC_RAISE],
m4/raise.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/raise.m4:    m4_ifdef([gl_MSVC_INVAL], [
m4/raise.m4:      AC_REQUIRE([gl_MSVC_INVAL])
m4/raise.m4:    m4_ifdef([gl_SIGNALBLOCKING], [
m4/raise.m4:      gl_SIGNALBLOCKING
m4/raise.m4:        m4_ifdef([gl_SIGNAL_SIGPIPE], [
m4/raise.m4:          gl_SIGNAL_SIGPIPE
m4/raise.m4:          if test $gl_cv_header_signal_h_SIGPIPE != yes; then
m4/raise.m4:AC_DEFUN([gl_PREREQ_RAISE], [:])
m4/rand.m4:AC_DEFUN([gl_FUNC_RAND],
m4/rand.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/random.m4:AC_DEFUN([gl_FUNC_RANDOM],
m4/random.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/random.m4:  AC_CACHE_CHECK([for random], [gl_cv_func_random],
m4/random.m4:       [gl_cv_func_random=yes],
m4/random.m4:       [gl_cv_func_random=no])
m4/random.m4:  gl_CHECK_FUNCS_ANDROID([initstate], [[#include <stdlib.h>]])
m4/random.m4:  gl_CHECK_FUNCS_ANDROID([setstate], [[#include <stdlib.h>]])
m4/random.m4:  if test $gl_cv_func_random = no; then
m4/random.m4:    case "$gl_cv_onwards_func_initstate" in
m4/random.m4:    case "$gl_cv_onwards_func_setstate" in
m4/random.m4:AC_DEFUN([gl_PREREQ_RANDOM], [
m4/random_r.m4:AC_DEFUN([gl_FUNC_RANDOM_R],
m4/random_r.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/random_r.m4:AC_DEFUN([gl_PREREQ_RANDOM_R], [
m4/rawmemchr.m4:AC_DEFUN([gl_FUNC_RAWMEMCHR],
m4/rawmemchr.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/rawmemchr.m4:AC_DEFUN([gl_PREREQ_RAWMEMCHR], [:])
m4/read-file.m4:AC_DEFUN([gl_PREREQ_READ_FILE], [:])
m4/read.m4:AC_DEFUN([gl_FUNC_READ],
m4/read.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/read.m4:  m4_ifdef([gl_MSVC_INVAL], [
m4/read.m4:    AC_REQUIRE([gl_MSVC_INVAL])
m4/read.m4:  m4_ifdef([gl_NONBLOCKING_IO], [
m4/read.m4:    gl_NONBLOCKING_IO
m4/read.m4:    if test $gl_cv_have_nonblocking != yes; then
m4/read.m4:AC_DEFUN([gl_PREREQ_READ], [:])
m4/readdir.m4:AC_DEFUN([gl_FUNC_READDIR],
m4/readdir.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/readdir.m4:    AC_REQUIRE([gl_DIRENT_DIR])
m4/readline.m4:AC_DEFUN([gl_FUNC_READLINE],
m4/readline.m4:  gl_saved_CPPFLAGS="$CPPFLAGS"
m4/readline.m4:  AC_CACHE_CHECK([for readline], [gl_cv_lib_readline], [
m4/readline.m4:    gl_cv_lib_readline=no
m4/readline.m4:    gl_saved_LIBS="$LIBS"
m4/readline.m4:      LIBS="$gl_saved_LIBS $LIBREADLINE"
m4/readline.m4:           gl_cv_lib_readline="yes, requires -l$extra_lib"
m4/readline.m4:           gl_cv_lib_readline="yes"
m4/readline.m4:      if test "$gl_cv_lib_readline" != no; then
m4/readline.m4:    LIBS="$gl_saved_LIBS"
m4/readline.m4:  if test "$gl_cv_lib_readline" != no; then
m4/readline.m4:    extra_lib=`echo "$gl_cv_lib_readline" | sed -n -e 's/yes, requires //p'`
m4/readline.m4:    CPPFLAGS="$gl_saved_CPPFLAGS"
m4/readline.m4:AC_DEFUN([gl_PREREQ_READLINE], [
m4/readlink.m4:AC_DEFUN([gl_FUNC_READLINK],
m4/readlink.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/readlink.m4:      [gl_cv_decl_readlink_works],
m4/readlink.m4:         [gl_cv_decl_readlink_works=yes], [gl_cv_decl_readlink_works=no])])
m4/readlink.m4:      [gl_cv_func_readlink_trailing_slash],
m4/readlink.m4:         [gl_cv_func_readlink_trailing_slash=yes],
m4/readlink.m4:         [gl_cv_func_readlink_trailing_slash=no],
m4/readlink.m4:              gl_cv_func_readlink_trailing_slash="guessing yes" ;;
m4/readlink.m4:              gl_cv_func_readlink_trailing_slash="guessing yes" ;;
m4/readlink.m4:              gl_cv_func_readlink_trailing_slash="guessing no" ;;
m4/readlink.m4:              gl_cv_func_readlink_trailing_slash="$gl_cross_guess_normal" ;;
m4/readlink.m4:    case "$gl_cv_func_readlink_trailing_slash" in
m4/readlink.m4:        if test "$gl_cv_decl_readlink_works" != yes; then
m4/readlink.m4:      [gl_cv_func_readlink_truncate],
m4/readlink.m4:         [gl_cv_func_readlink_truncate=yes],
m4/readlink.m4:         [gl_cv_func_readlink_truncate=no],
m4/readlink.m4:              gl_cv_func_readlink_truncate="guessing yes" ;;
m4/readlink.m4:              gl_cv_func_readlink_truncate="guessing yes" ;;
m4/readlink.m4:              gl_cv_func_readlink_truncate="guessing no" ;;
m4/readlink.m4:              gl_cv_func_readlink_truncate="$gl_cross_guess_normal" ;;
m4/readlink.m4:    case $gl_cv_func_readlink_truncate in
m4/readlink.m4:        if test "$gl_cv_decl_readlink_works" != yes; then
m4/readlink.m4:# Like gl_FUNC_READLINK, except prepare for separate compilation
m4/readlink.m4:AC_DEFUN([gl_FUNC_READLINK_SEPARATE],
m4/readlink.m4:  gl_PREREQ_READLINK
m4/readlink.m4:AC_DEFUN([gl_PREREQ_READLINK],
m4/readlinkat.m4:AC_DEFUN([gl_FUNC_READLINKAT],
m4/readlinkat.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/readlinkat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/readlinkat.m4:  gl_CHECK_FUNCS_ANDROID([readlinkat], [[#include <unistd.h>]])
m4/readlinkat.m4:  AC_REQUIRE([gl_FUNC_READLINK])
m4/readlinkat.m4:    case "$gl_cv_onwards_func_readlinkat" in
m4/readlinkat.m4:      [gl_cv_decl_readlinkat_works],
m4/readlinkat.m4:         [gl_cv_decl_readlinkat_works=yes],
m4/readlinkat.m4:         [gl_cv_decl_readlinkat_works=no])
m4/readlinkat.m4:    case $gl_cv_decl_readlinkat_works,$gl_cv_func_readlink_trailing_slash,$gl_cv_func_readlink_truncate in
m4/README:  AC_DEFUN([gl_FUNC_FOO],
m4/README:      gl_PREREQ_FOO
m4/README:  AC_DEFUN([gl_PREREQ_FOO], [
m4/README:  AC_DEFUN([gl_FOO],
m4/README:  AC_DEFUN([gl_FOO],
m4/README:    AC_REQUIRE([gl_BAR])
m4/readtokens.m4:AC_DEFUN([gl_READTOKENS],
m4/readutmp.m4:AC_DEFUN([gl_READUTMP],
m4/readutmp.m4:  AC_REQUIRE([gl_SYSTEMD_CHOICE])
m4/readutmp.m4:        [gl_cv_lib_readutmp_systemd],
m4/readutmp.m4:        [gl_saved_LIBS="$LIBS"
m4/readutmp.m4:           [gl_cv_lib_readutmp_systemd=yes],
m4/readutmp.m4:           [gl_cv_lib_readutmp_systemd=no])
m4/readutmp.m4:         LIBS="$gl_saved_LIBS"
m4/readutmp.m4:      if test $gl_cv_lib_readutmp_systemd = yes; then
m4/readutmp.m4:  gl_PREREQ_READUTMP_H
m4/readutmp.m4:AC_DEFUN_ONCE([gl_PREREQ_READUTMP_H],
m4/readutmp.m4:#  define utmp_data gl_aix_4_3_workaround_utmp_data
m4/realloc.m4:          *) ac_cv_func_realloc_0_nonnull="$gl_cross_guess_normal" ;;
m4/realloc.m4:# gl_FUNC_REALLOC_GNU
m4/realloc.m4:AC_DEFUN([gl_FUNC_REALLOC_GNU],
m4/realloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/realloc.m4:  AC_REQUIRE([gl_FUNC_REALLOC_POSIX])
m4/realloc.m4:])# gl_FUNC_REALLOC_GNU
m4/realloc.m4:# gl_FUNC_REALLOC_POSIX
m4/realloc.m4:AC_DEFUN([gl_FUNC_REALLOC_POSIX],
m4/realloc.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/realloc.m4:  AC_REQUIRE([gl_FUNC_MALLOC_POSIX])
m4/reallocarray.m4:AC_DEFUN([gl_FUNC_REALLOCARRAY],
m4/reallocarray.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/reallocarray.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/reallocarray.m4:  AC_REQUIRE([gl_CHECK_MALLOC_PTRDIFF])
m4/reallocarray.m4:  gl_CHECK_FUNCS_ANDROID([reallocarray], [[#include <stdlib.h>]])
m4/reallocarray.m4:    case "$gl_cv_onwards_func_reallocarray" in
m4/reallocarray.m4:  elif test "$gl_cv_malloc_ptrdiff" = no; then
m4/reallocarray.m4:AC_DEFUN([gl_PREREQ_REALLOCARRAY], [:])
m4/regex.m4:AC_DEFUN([gl_REGEX],
m4/regex.m4:                   [gl_cv_func_re_compile_pattern_working],
m4/regex.m4:        [gl_cv_func_re_compile_pattern_working=yes],
m4/regex.m4:        [gl_cv_func_re_compile_pattern_working=no],
m4/regex.m4:           mingw* | windows*) gl_cv_func_re_compile_pattern_working="guessing no" ;;
m4/regex.m4:           *)                 gl_cv_func_re_compile_pattern_working="$gl_cross_guess_normal" ;;
m4/regex.m4:    case "$gl_cv_func_re_compile_pattern_working" in #(
m4/regex.m4:AC_DEFUN([gl_PREREQ_REGEX],
m4/regex.m4:  AC_REQUIRE([gl_EEMALLOC])
m4/relocatable-lib.m4:AC_DEFUN([gl_RELOCATABLE_LIBRARY],
m4/relocatable-lib.m4:  AC_REQUIRE([gl_RELOCATABLE_LIBRARY_BODY])
m4/relocatable-lib.m4:AC_DEFUN([gl_RELOCATABLE_LIBRARY_BODY],
m4/relocatable-lib.m4:  AC_REQUIRE([gl_RELOCATABLE_NOP])
m4/relocatable-lib.m4:AC_DEFUN([gl_RELOCATABLE_NOP],
m4/relocatable.m4:dnl gl_RELOCATABLE([RELOCWRAPPER-DIR])
m4/relocatable.m4:AC_DEFUN([gl_RELOCATABLE],
m4/relocatable.m4:  AC_REQUIRE([gl_RELOCATABLE_BODY])
m4/relocatable.m4:  gl_RELOCATABLE_LIBRARY
m4/relocatable.m4:  RELOCATABLE_SRC_DIR="\$(top_srcdir)/$gl_source_base"
m4/relocatable.m4:  RELOCATABLE_BUILD_DIR="\$(top_builddir)/$gl_source_base"
m4/relocatable.m4:dnl The guts of gl_RELOCATABLE. Needs to be expanded only once.
m4/relocatable.m4:AC_DEFUN([gl_RELOCATABLE_BODY],
m4/relocatable.m4:  dnl when gl_RELOCATABLE_BODY is invoked more than once.
m4/relocatable.m4:  dnl AC_BEFORE([AC_PROG_INSTALL],[gl_RELOCATABLE_BODY])
m4/relocatable.m4:  dnl AC_BEFORE([LT_INIT],[gl_RELOCATABLE_BODY])
m4/relocatable.m4:  AC_REQUIRE([gl_RELOCATABLE_LIBRARY_BODY])
m4/relocatable.m4:  AC_REQUIRE([gl_HOST_CPU_C_ABI_32BIT])   dnl we use $HOST_CPU_C_ABI_32BIT
m4/remainder-ieee.m4:dnl module description), so that gl_FUNC_REMAINDER can test whether 'aclocal'
m4/remainder-ieee.m4:AC_DEFUN([gl_FUNC_REMAINDER_IEEE],
m4/remainder-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_remainder_required=ieee])
m4/remainder-ieee.m4:  AC_REQUIRE([gl_FUNC_REMAINDER])
m4/remainder.m4:AC_DEFUN([gl_FUNC_REMAINDER],
m4/remainder.m4:  m4_divert_text([DEFAULTS], [gl_remainder_required=plain])
m4/remainder.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/remainder.m4:    [gl_cv_func_remainder_no_libm],
m4/remainder.m4:        [gl_cv_func_remainder_no_libm=yes],
m4/remainder.m4:        [gl_cv_func_remainder_no_libm=no])
m4/remainder.m4:  if test $gl_cv_func_remainder_no_libm = no; then
m4/remainder.m4:      [gl_cv_func_remainder_in_libm],
m4/remainder.m4:          [gl_cv_func_remainder_in_libm=yes],
m4/remainder.m4:          [gl_cv_func_remainder_in_libm=no])
m4/remainder.m4:    if test $gl_cv_func_remainder_in_libm = yes; then
m4/remainder.m4:  if test $gl_cv_func_remainder_no_libm = yes \
m4/remainder.m4:     || test $gl_cv_func_remainder_in_libm = yes; then
m4/remainder.m4:    m4_ifdef([gl_FUNC_REMAINDER_IEEE], [
m4/remainder.m4:      if test $gl_remainder_required = ieee && test $REPLACE_REMAINDER = 0; then
m4/remainder.m4:          [gl_cv_func_remainder_ieee],
m4/remainder.m4:              [gl_cv_func_remainder_ieee=yes],
m4/remainder.m4:              [gl_cv_func_remainder_ieee=no],
m4/remainder.m4:                 *-gnu* | gnu*)      gl_cv_func_remainder_ieee="guessing yes" ;;
m4/remainder.m4:                 *-musl* | midipix*) gl_cv_func_remainder_ieee="guessing yes" ;;
m4/remainder.m4:                 mingw* | windows*)  gl_cv_func_remainder_ieee="guessing yes" ;;
m4/remainder.m4:                 *)                  gl_cv_func_remainder_ieee="$gl_cross_guess_normal" ;;
m4/remainder.m4:        case "$gl_cv_func_remainder_ieee" in
m4/remainder.m4:    AC_REQUIRE([gl_FUNC_FABS])
m4/remainder.m4:    AC_REQUIRE([gl_FUNC_FMOD])
m4/remainder.m4:    AC_REQUIRE([gl_FUNC_ISNAND])
m4/remainderf-ieee.m4:dnl module description), so that gl_FUNC_REMAINDERF can test whether 'aclocal'
m4/remainderf-ieee.m4:AC_DEFUN([gl_FUNC_REMAINDERF_IEEE],
m4/remainderf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_remainderf_required=ieee])
m4/remainderf-ieee.m4:  AC_REQUIRE([gl_FUNC_REMAINDERF])
m4/remainderf.m4:AC_DEFUN([gl_FUNC_REMAINDERF],
m4/remainderf.m4:  m4_divert_text([DEFAULTS], [gl_remainderf_required=plain])
m4/remainderf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/remainderf.m4:  AC_REQUIRE([gl_FUNC_REMAINDER])
m4/remainderf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/remainderf.m4:    [gl_cv_func_remainderf],
m4/remainderf.m4:        [gl_cv_func_remainderf=yes],
m4/remainderf.m4:        [gl_cv_func_remainderf=no])
m4/remainderf.m4:  if test $gl_cv_func_remainderf = yes; then
m4/remainderf.m4:    gl_FUNC_REMAINDERF_WORKS
m4/remainderf.m4:    case "$gl_cv_func_remainderf_works" in
m4/remainderf.m4:    m4_ifdef([gl_FUNC_REMAINDERF_IEEE], [
m4/remainderf.m4:      if test $gl_remainderf_required = ieee && test $REPLACE_REMAINDERF = 0; then
m4/remainderf.m4:          [gl_cv_func_remainderf_ieee],
m4/remainderf.m4:              [gl_cv_func_remainderf_ieee=yes],
m4/remainderf.m4:              [gl_cv_func_remainderf_ieee=no],
m4/remainderf.m4:                 *-gnu* | gnu*)      gl_cv_func_remainderf_ieee="guessing yes" ;;
m4/remainderf.m4:                 *-musl* | midipix*) gl_cv_func_remainderf_ieee="guessing yes" ;;
m4/remainderf.m4:                 mingw* | windows*)  gl_cv_func_remainderf_ieee="guessing yes" ;;
m4/remainderf.m4:                 *)                  gl_cv_func_remainderf_ieee="$gl_cross_guess_normal" ;;
m4/remainderf.m4:        case "$gl_cv_func_remainderf_ieee" in
m4/remainderf.m4:    if test $gl_cv_func_remainder_no_libm = yes \
m4/remainderf.m4:       || test $gl_cv_func_remainder_in_libm = yes; then
m4/remainderf.m4:      AC_REQUIRE([gl_FUNC_FABSF])
m4/remainderf.m4:      AC_REQUIRE([gl_FUNC_FMODF])
m4/remainderf.m4:      AC_REQUIRE([gl_FUNC_ISNANF])
m4/remainderf.m4:AC_DEFUN([gl_FUNC_REMAINDERF_WORKS],
m4/remainderf.m4:  AC_CACHE_CHECK([whether remainderf works], [gl_cv_func_remainderf_works],
m4/remainderf.m4:        [gl_cv_func_remainderf_works=yes],
m4/remainderf.m4:        [gl_cv_func_remainderf_works=no],
m4/remainderf.m4:           irix*)             gl_cv_func_remainderf_works="guessing no" ;;
m4/remainderf.m4:           mingw* | windows*) gl_cv_func_remainderf_works="guessing yes" ;;
m4/remainderf.m4:           *)                 gl_cv_func_remainderf_works="guessing yes" ;;
m4/remainderl-ieee.m4:dnl module description), so that gl_FUNC_REMAINDER can test whether 'aclocal'
m4/remainderl-ieee.m4:AC_DEFUN([gl_FUNC_REMAINDERL_IEEE],
m4/remainderl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_remainderl_required=ieee])
m4/remainderl-ieee.m4:  AC_REQUIRE([gl_FUNC_REMAINDERL])
m4/remainderl.m4:AC_DEFUN([gl_FUNC_REMAINDERL],
m4/remainderl.m4:  m4_divert_text([DEFAULTS], [gl_remainderl_required=plain])
m4/remainderl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/remainderl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/remainderl.m4:  AC_REQUIRE([gl_FUNC_REMAINDER])
m4/remainderl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/remainderl.m4:    [gl_cv_func_remainderl],
m4/remainderl.m4:        [gl_cv_func_remainderl=yes],
m4/remainderl.m4:        [gl_cv_func_remainderl=no])
m4/remainderl.m4:  if test $gl_cv_func_remainderl = yes; then
m4/remainderl.m4:    gl_FUNC_REMAINDERL_WORKS
m4/remainderl.m4:    case "$gl_cv_func_remainderl_works" in
m4/remainderl.m4:    m4_ifdef([gl_FUNC_REMAINDERL_IEEE], [
m4/remainderl.m4:      if test $gl_remainderl_required = ieee && test $REPLACE_REMAINDERL = 0; then
m4/remainderl.m4:          [gl_cv_func_remainderl_ieee],
m4/remainderl.m4:              [gl_cv_func_remainderl_ieee=yes],
m4/remainderl.m4:              [gl_cv_func_remainderl_ieee=no],
m4/remainderl.m4:                 *-gnu* | gnu*)      gl_cv_func_remainderl_ieee="guessing yes" ;;
m4/remainderl.m4:                 *-musl* | midipix*) gl_cv_func_remainderl_ieee="guessing yes" ;;
m4/remainderl.m4:                 mingw* | windows*)  gl_cv_func_remainderl_ieee="guessing yes" ;;
m4/remainderl.m4:                 *)                  gl_cv_func_remainderl_ieee="$gl_cross_guess_normal" ;;
m4/remainderl.m4:        case "$gl_cv_func_remainderl_ieee" in
m4/remainderl.m4:      AC_REQUIRE([gl_FUNC_FABSL])
m4/remainderl.m4:      AC_REQUIRE([gl_FUNC_FMODL])
m4/remainderl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/remainderl.m4:AC_DEFUN([gl_FUNC_REMAINDERL_WORKS],
m4/remainderl.m4:  AC_CACHE_CHECK([whether remainderl works], [gl_cv_func_remainderl_works],
m4/remainderl.m4:        [gl_cv_func_remainderl_works=yes],
m4/remainderl.m4:        [gl_cv_func_remainderl_works=no],
m4/remainderl.m4:           *-gnu* | gnu*)      gl_cv_func_remainderl_works="guessing yes" ;;
m4/remainderl.m4:           *-musl* | midipix*) gl_cv_func_remainderl_works="guessing no" ;;
m4/remainderl.m4:           netbsd* | openbsd*) gl_cv_func_remainderl_works="guessing no" ;;
m4/remainderl.m4:           mingw* | windows*)  gl_cv_func_remainderl_works="guessing yes" ;;
m4/remainderl.m4:           *)                  gl_cv_func_remainderl_works="$gl_cross_guess_normal" ;;
m4/remove.m4:AC_DEFUN([gl_FUNC_REMOVE],
m4/remove.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/remove.m4:  AC_REQUIRE([gl_FUNC_RMDIR])
m4/remove.m4:  AC_REQUIRE([gl_FUNC_UNLINK])
m4/remove.m4:  if { case "$gl_cv_func_rmdir_works:$gl_cv_func_unlink_honors_slashes" in
m4/remove.m4:      [gl_cv_func_remove_dir_works],
m4/remove.m4:         [gl_cv_func_remove_dir_works=yes], [gl_cv_func_remove_dir_works=no],
m4/remove.m4:            mingw* | windows*) gl_cv_func_remove_dir_works="guessing no" ;;
m4/remove.m4:            *)                 gl_cv_func_remove_dir_works="guessing yes" ;;
m4/remove.m4:    case $gl_cv_func_remove_dir_works in
m4/rename.m4:AC_DEFUN([gl_FUNC_RENAME],
m4/rename.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/rename.m4:    [gl_cv_func_rename_slash_dst_works],
m4/rename.m4:      [gl_cv_func_rename_slash_dst_works=yes],
m4/rename.m4:      [gl_cv_func_rename_slash_dst_works=no],
m4/rename.m4:         linux* | midipix*) gl_cv_func_rename_slash_dst_works="guessing yes" ;;
m4/rename.m4:         *-gnu*)            gl_cv_func_rename_slash_dst_works="guessing yes" ;;
m4/rename.m4:         mingw* | windows*) gl_cv_func_rename_slash_dst_works="guessing no" ;;
m4/rename.m4:         *)                 gl_cv_func_rename_slash_dst_works="$gl_cross_guess_normal" ;;
m4/rename.m4:  case "$gl_cv_func_rename_slash_dst_works" in
m4/rename.m4:    [gl_cv_func_rename_slash_src_works],
m4/rename.m4:      [gl_cv_func_rename_slash_src_works=yes],
m4/rename.m4:      [gl_cv_func_rename_slash_src_works=no],
m4/rename.m4:         linux* | midipix*) gl_cv_func_rename_slash_src_works="guessing yes" ;;
m4/rename.m4:         *-gnu*)            gl_cv_func_rename_slash_src_works="guessing yes" ;;
m4/rename.m4:         mingw* | windows*) gl_cv_func_rename_slash_src_works="guessing yes" ;;
m4/rename.m4:         *)                 gl_cv_func_rename_slash_src_works="$gl_cross_guess_normal" ;;
m4/rename.m4:  case "$gl_cv_func_rename_slash_src_works" in
m4/rename.m4:    [gl_cv_func_rename_link_works],
m4/rename.m4:             [gl_cv_func_rename_link_works=yes],
m4/rename.m4:             [gl_cv_func_rename_link_works=no],
m4/rename.m4:           gl_cv_func_rename_link_works="guessing no"
m4/rename.m4:           linux* | midipix*) gl_cv_func_rename_link_works="guessing yes" ;;
m4/rename.m4:           *-gnu*)            gl_cv_func_rename_link_works="guessing yes" ;;
m4/rename.m4:           mingw* | windows*) gl_cv_func_rename_link_works="guessing yes" ;;
m4/rename.m4:           *)                 gl_cv_func_rename_link_works="$gl_cross_guess_normal" ;;
m4/rename.m4:       gl_cv_func_rename_link_works=yes
m4/rename.m4:  case "$gl_cv_func_rename_link_works" in
m4/rename.m4:    [gl_cv_func_rename_dest_works],
m4/rename.m4:      [gl_cv_func_rename_dest_works=yes],
m4/rename.m4:      [gl_cv_func_rename_dest_works=no],
m4/rename.m4:         linux* | midipix*) gl_cv_func_rename_dest_works="guessing yes" ;;
m4/rename.m4:         *-gnu*)            gl_cv_func_rename_dest_works="guessing yes" ;;
m4/rename.m4:         mingw* | windows*) gl_cv_func_rename_dest_works="guessing no" ;;
m4/rename.m4:         *)                 gl_cv_func_rename_dest_works="$gl_cross_guess_normal" ;;
m4/rename.m4:  case "$gl_cv_func_rename_dest_works" in
m4/renameat.m4:AC_DEFUN([gl_FUNC_RENAMEAT],
m4/renameat.m4:  AC_REQUIRE([gl_FUNC_OPENAT])
m4/renameat.m4:  AC_REQUIRE([gl_FUNC_RENAME])
m4/renameat.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/renameat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/renameat.m4:  gl_CHECK_FUNCS_ANDROID([renameat2], [[#include <stdio.h>]])
m4/renameat.m4:      [gl_cv_func_renameat2_works],
m4/renameat.m4:         [gl_cv_func_renameat2_works=yes],
m4/renameat.m4:         [gl_cv_func_renameat2_works=no],
m4/renameat.m4:            linux*)  gl_cv_func_renameat2_works="guessing yes" ;;
m4/renameat.m4:            cygwin*) gl_cv_func_renameat2_works="guessing no" ;;
m4/renameat.m4:            *)       gl_cv_func_renameat2_works="$gl_cross_guess_normal" ;;
m4/renameat.m4:    case "$gl_cv_func_renameat2_works" in
m4/rewinddir.m4:AC_DEFUN([gl_FUNC_REWINDDIR],
m4/rewinddir.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/rewinddir.m4:    AC_REQUIRE([gl_DIRENT_DIR])
m4/rint.m4:AC_DEFUN([gl_FUNC_RINT],
m4/rint.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/rint.m4:  gl_MATHFUNC([rint], [double], [(double)], [], [y += rint (2.0);])
m4/rint.m4:  if test $gl_cv_func_rint_no_libm = no \
m4/rint.m4:     && test $gl_cv_func_rint_in_libm = no; then
m4/rintf.m4:AC_DEFUN([gl_FUNC_RINTF],
m4/rintf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/rintf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/rintf.m4:  gl_MATHFUNC([rintf], [float], [(float)],
m4/rintf.m4:  if test $gl_cv_func_rintf_no_libm = yes \
m4/rintf.m4:     || test $gl_cv_func_rintf_in_libm = yes; then
m4/rintl.m4:AC_DEFUN([gl_FUNC_RINTL],
m4/rintl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/rintl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/rintl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/rintl.m4:  gl_MATHFUNC([rintl], [long double], [(long double)])
m4/rintl.m4:  if test $gl_cv_func_rintl_no_libm = yes \
m4/rintl.m4:     || test $gl_cv_func_rintl_in_libm = yes; then
m4/rintl.m4:        [gl_cv_func_rintl_works],
m4/rintl.m4:            [gl_cv_func_rintl_works=yes],
m4/rintl.m4:            [gl_cv_func_rintl_works=no],
m4/rintl.m4:               *-gnu* | gnu*)      gl_cv_func_rintl_works="guessing yes" ;;
m4/rintl.m4:               *-musl* | midipix*) gl_cv_func_rintl_works="guessing yes" ;;
m4/rintl.m4:               mingw* | windows*)  gl_cv_func_rintl_works="guessing yes" ;;
m4/rintl.m4:               *)                  gl_cv_func_rintl_works="$gl_cross_guess_normal" ;;
m4/rintl.m4:      case "$gl_cv_func_rintl_works" in
m4/rintl.m4:      AC_REQUIRE([gl_FUNC_RINT])
m4/rmdir-errno.m4:AC_DEFUN([gl_FUNC_RMDIR_NOTEMPTY],
m4/rmdir-errno.m4:    [gl_cv_func_rmdir_errno_not_empty],
m4/rmdir-errno.m4:        [gl_cv_func_rmdir_errno_not_empty=`cat confdir2/errno`],
m4/rmdir-errno.m4:        [gl_cv_func_rmdir_errno_not_empty='configure error in rmdir-errno.m4'],
m4/rmdir-errno.m4:           mingw* | windows*) gl_cv_func_rmdir_errno_not_empty=ENOTEMPTY ;;
m4/rmdir-errno.m4:           *)                 gl_cv_func_rmdir_errno_not_empty=ENOTEMPTY ;;
m4/rmdir-errno.m4:    [$gl_cv_func_rmdir_errno_not_empty],
m4/rmdir.m4:AC_DEFUN([gl_FUNC_RMDIR],
m4/rmdir.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/rmdir.m4:  AC_CACHE_CHECK([whether rmdir works], [gl_cv_func_rmdir_works],
m4/rmdir.m4:       [gl_cv_func_rmdir_works=yes], [gl_cv_func_rmdir_works=no],
m4/rmdir.m4:          linux-* | linux)   gl_cv_func_rmdir_works="guessing yes" ;;
m4/rmdir.m4:          midipix*)          gl_cv_func_rmdir_works="guessing yes" ;;
m4/rmdir.m4:          *-gnu* | gnu*)     gl_cv_func_rmdir_works="guessing yes" ;;
m4/rmdir.m4:          mingw* | windows*) gl_cv_func_rmdir_works="guessing no" ;;
m4/rmdir.m4:          *)                 gl_cv_func_rmdir_works="$gl_cross_guess_normal" ;;
m4/rmdir.m4:  case "$gl_cv_func_rmdir_works" in
m4/round-ieee.m4:dnl module description), so that gl_FUNC_ROUND can test whether 'aclocal' has
m4/round-ieee.m4:AC_DEFUN([gl_FUNC_ROUND_IEEE],
m4/round-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_round_required=ieee])
m4/round-ieee.m4:  AC_REQUIRE([gl_FUNC_ROUND])
m4/round.m4:AC_DEFUN([gl_FUNC_ROUND],
m4/round.m4:  m4_divert_text([DEFAULTS], [gl_round_required=plain])
m4/round.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/round.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/round.m4:  gl_CHECK_MATH_LIB([ROUND_LIBM], [double], [x = round (x);],
m4/round.m4:    AC_CACHE_CHECK([whether round works], [gl_cv_func_round_works],
m4/round.m4:}]])], [gl_cv_func_round_works=yes], [gl_cv_func_round_works=no],
m4/round.m4:           netbsd* | aix*)    gl_cv_func_round_works="guessing no" ;;
m4/round.m4:           windows*-msvc*)    gl_cv_func_round_works="guessing yes" ;;
m4/round.m4:                                [gl_cv_func_round_works="guessing yes"],
m4/round.m4:                                [gl_cv_func_round_works="guessing no"])
m4/round.m4:           *)                 gl_cv_func_round_works="guessing yes" ;;
m4/round.m4:    case "$gl_cv_func_round_works" in
m4/round.m4:    m4_ifdef([gl_FUNC_ROUND_IEEE], [
m4/round.m4:      if test $gl_round_required = ieee && test $REPLACE_ROUND = 0; then
m4/round.m4:          [gl_cv_func_round_ieee],
m4/round.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/round.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/round.m4:              [gl_cv_func_round_ieee=yes],
m4/round.m4:              [gl_cv_func_round_ieee=no],
m4/round.m4:                 *-gnu* | gnu*)      gl_cv_func_round_ieee="guessing yes" ;;
m4/round.m4:                 *-musl* | midipix*) gl_cv_func_round_ieee="guessing yes" ;;
m4/round.m4:                 windows*-msvc*)     gl_cv_func_round_ieee="guessing yes" ;;
m4/round.m4:                                       [gl_cv_func_round_ieee="guessing yes"],
m4/round.m4:                                       [gl_cv_func_round_ieee="guessing no"])
m4/round.m4:                 *)                  gl_cv_func_round_ieee="$gl_cross_guess_normal" ;;
m4/round.m4:        case "$gl_cv_func_round_ieee" in
m4/round.m4:    gl_FUNC_FLOOR_LIBS
m4/round.m4:    gl_FUNC_CEIL_LIBS
m4/roundf-ieee.m4:dnl module description), so that gl_FUNC_ROUNDF can test whether 'aclocal' has
m4/roundf-ieee.m4:AC_DEFUN([gl_FUNC_ROUNDF_IEEE],
m4/roundf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_roundf_required=ieee])
m4/roundf-ieee.m4:  AC_REQUIRE([gl_FUNC_ROUNDF])
m4/roundf.m4:AC_DEFUN([gl_FUNC_ROUNDF],
m4/roundf.m4:  m4_divert_text([DEFAULTS], [gl_roundf_required=plain])
m4/roundf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/roundf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/roundf.m4:  gl_CHECK_MATH_LIB([ROUNDF_LIBM], [float], [x = roundf (x);],
m4/roundf.m4:    AC_CACHE_CHECK([whether roundf works], [gl_cv_func_roundf_works],
m4/roundf.m4:}]])], [gl_cv_func_roundf_works=yes], [gl_cv_func_roundf_works=no],
m4/roundf.m4:             gl_cv_func_roundf_works="guessing yes"
m4/roundf.m4:               [gl_cv_func_roundf_works="guessing yes"],
m4/roundf.m4:               [gl_cv_func_roundf_works="guessing no"])
m4/roundf.m4:             gl_cv_func_roundf_works="guessing yes"
m4/roundf.m4:    case "$gl_cv_func_roundf_works" in
m4/roundf.m4:    m4_ifdef([gl_FUNC_ROUNDF_IEEE], [
m4/roundf.m4:      if test $gl_roundf_required = ieee && test $REPLACE_ROUNDF = 0; then
m4/roundf.m4:          [gl_cv_func_roundf_ieee],
m4/roundf.m4:]gl_FLOAT_MINUS_ZERO_CODE[
m4/roundf.m4:]gl_FLOAT_SIGNBIT_CODE[
m4/roundf.m4:              [gl_cv_func_roundf_ieee=yes],
m4/roundf.m4:              [gl_cv_func_roundf_ieee=no],
m4/roundf.m4:                 *-gnu* | gnu*)      gl_cv_func_roundf_ieee="guessing yes" ;;
m4/roundf.m4:                 *-musl* | midipix*) gl_cv_func_roundf_ieee="guessing yes" ;;
m4/roundf.m4:                 windows*-msvc*)     gl_cv_func_roundf_ieee="guessing yes" ;;
m4/roundf.m4:                                       [gl_cv_func_roundf_ieee="guessing yes"],
m4/roundf.m4:                                       [gl_cv_func_roundf_ieee="guessing no"])
m4/roundf.m4:                 *)                  gl_cv_func_roundf_ieee="$gl_cross_guess_normal" ;;
m4/roundf.m4:        case "$gl_cv_func_roundf_ieee" in
m4/roundf.m4:      gl_FUNC_FLOORF_LIBS
m4/roundf.m4:      gl_FUNC_CEILF_LIBS
m4/roundl-ieee.m4:dnl module description), so that gl_FUNC_ROUNDL can test whether 'aclocal' has
m4/roundl-ieee.m4:AC_DEFUN([gl_FUNC_ROUNDL_IEEE],
m4/roundl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_roundl_required=ieee])
m4/roundl-ieee.m4:  AC_REQUIRE([gl_FUNC_ROUNDL])
m4/roundl.m4:AC_DEFUN([gl_FUNC_ROUNDL],
m4/roundl.m4:  m4_divert_text([DEFAULTS], [gl_roundl_required=plain])
m4/roundl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/roundl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/roundl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/roundl.m4:  gl_CHECK_MATH_LIB([ROUNDL_LIBM], [long double], [x = roundl (x);],
m4/roundl.m4:    m4_ifdef([gl_FUNC_ROUNDL_IEEE], [
m4/roundl.m4:      if test $gl_roundl_required = ieee && test $REPLACE_ROUNDL = 0; then
m4/roundl.m4:          [gl_cv_func_roundl_ieee],
m4/roundl.m4:]gl_LONG_DOUBLE_MINUS_ZERO_CODE[
m4/roundl.m4:]gl_LONG_DOUBLE_SIGNBIT_CODE[
m4/roundl.m4:              [gl_cv_func_roundl_ieee=yes],
m4/roundl.m4:              [gl_cv_func_roundl_ieee=no],
m4/roundl.m4:                 *-gnu* | gnu*)      gl_cv_func_roundl_ieee="guessing yes" ;;
m4/roundl.m4:                 *-musl* | midipix*) gl_cv_func_roundl_ieee="guessing yes" ;;
m4/roundl.m4:                 mingw* | windows*)  gl_cv_func_roundl_ieee="guessing yes" ;;
m4/roundl.m4:                 *)                  gl_cv_func_roundl_ieee="$gl_cross_guess_normal" ;;
m4/roundl.m4:        case "$gl_cv_func_roundl_ieee" in
m4/roundl.m4:      AC_REQUIRE([gl_FUNC_ROUND])
m4/roundl.m4:        gl_FUNC_FLOORL_LIBS
m4/roundl.m4:        gl_FUNC_CEILL_LIBS
m4/rpmatch.m4:AC_DEFUN([gl_FUNC_RPMATCH],
m4/rpmatch.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/rpmatch.m4:AC_DEFUN([gl_PREREQ_RPMATCH], [
m4/rpmatch.m4:  AC_CACHE_CHECK([for nl_langinfo and YESEXPR], [gl_cv_langinfo_yesexpr],
m4/rpmatch.m4:       [gl_cv_langinfo_yesexpr=yes],
m4/rpmatch.m4:       [gl_cv_langinfo_yesexpr=no])
m4/rpmatch.m4:  if test $gl_cv_langinfo_yesexpr = yes; then
m4/safe-alloc.m4:AC_DEFUN([gl_SAFE_ALLOC],
m4/safe-read.m4:AC_DEFUN([gl_PREREQ_SAFE_READ],
m4/safe-write.m4:AC_DEFUN([gl_PREREQ_SAFE_WRITE],
m4/safe-write.m4:  gl_PREREQ_SAFE_READ
m4/same.m4:AC_DEFUN([gl_SAME],
m4/save-cwd.m4:AC_DEFUN([gl_SAVE_CWD],
m4/savedir.m4:AC_DEFUN([gl_SAVEDIR],
m4/savewd.m4:AC_DEFUN([gl_SAVEWD], [:])
m4/scandir.m4:AC_DEFUN([gl_FUNC_SCANDIR],
m4/scandir.m4:  AC_REQUIRE([gl_DIRENT_H_DEFAULTS])
m4/scandir.m4:AC_DEFUN([gl_PREREQ_SCANDIR], [:])
m4/sched_h.m4:AC_DEFUN_ONCE([gl_SCHED_H],
m4/sched_h.m4:  AC_REQUIRE([gl_SCHED_H_DEFAULTS])
m4/sched_h.m4:  AC_REQUIRE([gl_CHECK_HEADER_SYS_CDEFS_H])
m4/sched_h.m4:  gl_NEXT_HEADERS([sched.h])
m4/sched_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <sched.h>
m4/sched_h.m4:# gl_SCHED_MODULE_INDICATOR([modulename])
m4/sched_h.m4:AC_DEFUN([gl_SCHED_MODULE_INDICATOR],
m4/sched_h.m4:  gl_SCHED_H_REQUIRE_DEFAULTS
m4/sched_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sched_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sched_h.m4:AC_DEFUN([gl_SCHED_H_REQUIRE_DEFAULTS],
m4/sched_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SCHED_YIELD])
m4/sched_h.m4:  AC_REQUIRE([gl_SCHED_H_DEFAULTS])
m4/sched_h.m4:AC_DEFUN([gl_SCHED_H_DEFAULTS],
m4/sched_yield.m4:AC_DEFUN([gl_FUNC_SCHED_YIELD],
m4/sched_yield.m4:  AC_REQUIRE([gl_SCHED_H_DEFAULTS])
m4/sched_yield.m4:  AC_REQUIRE([gl_PTHREADLIB])
m4/sched_yield.m4:     && test $gl_threads_api = windows; then
m4/search_h.m4:AC_DEFUN_ONCE([gl_SEARCH_H],
m4/search_h.m4:  AC_REQUIRE([gl_SEARCH_H_DEFAULTS])
m4/search_h.m4:  gl_CHECK_NEXT_HEADERS([search.h])
m4/search_h.m4:    AC_CACHE_CHECK([for type VISIT], [gl_cv_type_VISIT],
m4/search_h.m4:         [gl_cv_type_VISIT=yes],
m4/search_h.m4:         [gl_cv_type_VISIT=no])])
m4/search_h.m4:    gl_cv_type_VISIT=no
m4/search_h.m4:  if test $gl_cv_type_VISIT = yes; then
m4/search_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <search.h>
m4/search_h.m4:# gl_SEARCH_MODULE_INDICATOR([modulename])
m4/search_h.m4:AC_DEFUN([gl_SEARCH_MODULE_INDICATOR],
m4/search_h.m4:  gl_SEARCH_H_REQUIRE_DEFAULTS
m4/search_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/search_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/search_h.m4:AC_DEFUN([gl_SEARCH_H_REQUIRE_DEFAULTS],
m4/search_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TSEARCH])
m4/search_h.m4:  AC_REQUIRE([gl_SEARCH_H_DEFAULTS])
m4/search_h.m4:AC_DEFUN([gl_SEARCH_H_DEFAULTS],
m4/search_h.m4:  gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_LFIND], [1])
m4/search_h.m4:  gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_LSEARCH], [1])
m4/secure_getenv.m4:AC_DEFUN([gl_FUNC_SECURE_GETENV],
m4/secure_getenv.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/secure_getenv.m4:AC_DEFUN([gl_PREREQ_SECURE_GETENV], [
m4/secure_getenv.m4:    gl_CHECK_FUNCS_ANDROID([issetugid], [[#include <unistd.h>]])
m4/select.m4:AC_DEFUN([gl_FUNC_SELECT],
m4/select.m4:  AC_REQUIRE([gl_SYS_SELECT_H])
m4/select.m4:  AC_REQUIRE([gl_SOCKETS])
m4/select.m4:      [gl_cv_func_select_supports0],
m4/select.m4:}]])], [gl_cv_func_select_supports0=yes], [gl_cv_func_select_supports0=no],
m4/select.m4:             interix*) gl_cv_func_select_supports0="guessing no";;
m4/select.m4:             *)        gl_cv_func_select_supports0="guessing yes";;
m4/select.m4:    case "$gl_cv_func_select_supports0" in
m4/select.m4:      [gl_cv_func_select_detects_ebadf],
m4/select.m4:]])], [gl_cv_func_select_detects_ebadf=yes],
m4/select.m4:      [gl_cv_func_select_detects_ebadf=no],
m4/select.m4:            linux-* | linux) gl_cv_func_select_detects_ebadf="guessing yes" ;;
m4/select.m4:            midipix*)        gl_cv_func_select_detects_ebadf="guessing yes" ;;
m4/select.m4:            *-gnu* | gnu*)   gl_cv_func_select_detects_ebadf="guessing yes" ;;
m4/select.m4:            *)               gl_cv_func_select_detects_ebadf="$gl_cross_guess_normal" ;;
m4/select.m4:    case $gl_cv_func_select_detects_ebadf in
m4/selinux-context-h.m4:AC_DEFUN([gl_HEADERS_SELINUX_CONTEXT_H],
m4/selinux-context-h.m4:  AC_REQUIRE([gl_LIBSELINUX])
m4/selinux-label-h.m4:AC_DEFUN([gl_HEADERS_SELINUX_LABEL_H],
m4/selinux-label-h.m4:  AC_REQUIRE([gl_LIBSELINUX])
m4/selinux-selinux-h.m4:AC_DEFUN([gl_HEADERS_SELINUX_SELINUX_H],
m4/selinux-selinux-h.m4:  AC_REQUIRE([gl_LIBSELINUX])
m4/selinux-selinux-h.m4:      gl_CHECK_NEXT_HEADERS([selinux/selinux.h])
m4/selinux-selinux-h.m4:AC_DEFUN([gl_LIBSELINUX],
m4/selinux-selinux-h.m4:    gl_saved_LIBS=$LIBS
m4/selinux-selinux-h.m4:    LIBS=$gl_saved_LIBS
m4/semaphore.m4:AC_DEFUN([gl_SEMAPHORE],
m4/semaphore.m4:  AC_REQUIRE([gl_THREADLIB])
m4/semaphore.m4:    [gl_cv_semaphore_lib],
m4/semaphore.m4:       [gl_cv_semaphore_lib=none],
m4/semaphore.m4:          [gl_cv_semaphore_lib='-lrt'],
m4/semaphore.m4:          [gl_cv_semaphore_lib=none])
m4/semaphore.m4:  if test "x$gl_cv_semaphore_lib" = xnone; then
m4/semaphore.m4:    LIB_SEMAPHORE="$gl_cv_semaphore_lib"
m4/servent.m4:AC_DEFUN([gl_SERVENT],
m4/servent.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])dnl for HAVE_SYS_SOCKET_H, HAVE_WINSOCK2_H
m4/servent.m4:  gl_saved_libs="$LIBS"
m4/servent.m4:  LIBS="$gl_saved_libs"
m4/servent.m4:        [gl_cv_w32_getservbyname],
m4/servent.m4:        [gl_cv_w32_getservbyname=no
m4/servent.m4:         gl_saved_LIBS="$LIBS"
m4/servent.m4:           [gl_cv_w32_getservbyname=yes])
m4/servent.m4:         LIBS="$gl_saved_LIBS"
m4/servent.m4:      if test "$gl_cv_w32_getservbyname" = "yes"; then
m4/setenv.m4:AC_DEFUN([gl_FUNC_SETENV],
m4/setenv.m4:  AC_REQUIRE([gl_FUNC_SETENV_SEPARATE])
m4/setenv.m4:      [gl_cv_func_setenv_works],
m4/setenv.m4:      [gl_cv_func_setenv_works=yes], [gl_cv_func_setenv_works=no],
m4/setenv.m4:         *-gnu* | gnu*)      gl_cv_func_setenv_works="guessing yes" ;;
m4/setenv.m4:         *-musl* | midipix*) gl_cv_func_setenv_works="guessing yes" ;;
m4/setenv.m4:         *)                  gl_cv_func_setenv_works="$gl_cross_guess_normal" ;;
m4/setenv.m4:    case "$gl_cv_func_setenv_works" in
m4/setenv.m4:# Like gl_FUNC_SETENV, except prepare for separate compilation
m4/setenv.m4:AC_DEFUN([gl_FUNC_SETENV_SEPARATE],
m4/setenv.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/setenv.m4:  gl_PREREQ_SETENV
m4/setenv.m4:AC_DEFUN([gl_FUNC_UNSETENV],
m4/setenv.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/setenv.m4:      [gl_cv_func_unsetenv_works],
m4/setenv.m4:         [gl_cv_func_unsetenv_works=yes],
m4/setenv.m4:         [gl_cv_func_unsetenv_works=no],
m4/setenv.m4:            *-gnu*) gl_cv_func_unsetenv_works="guessing yes" ;;
m4/setenv.m4:            *)      gl_cv_func_unsetenv_works="$gl_cross_guess_normal" ;;
m4/setenv.m4:    case "$gl_cv_func_unsetenv_works" in
m4/setenv.m4:AC_DEFUN([gl_PREREQ_SETENV],
m4/setenv.m4:  AC_REQUIRE([gl_ENVIRON])
m4/setenv.m4:  gl_CHECK_FUNCS_ANDROID([tsearch], [[#include <search.h>]])
m4/setenv.m4:AC_DEFUN([gl_PREREQ_UNSETENV],
m4/setenv.m4:  AC_REQUIRE([gl_ENVIRON])
m4/sethostname.m4:AC_DEFUN([gl_FUNC_SETHOSTNAME],
m4/sethostname.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/sethostname.m4:  gl_PREREQ_HOST_NAME_MAX
m4/sethostname.m4:  gl_CHECK_FUNCS_ANDROID([sethostname], [[#include <unistd.h>]])
m4/sethostname.m4:    case "$gl_cv_onwards_func_sethostname" in
m4/setlocale.m4:AC_DEFUN([gl_FUNC_SETLOCALE],
m4/setlocale.m4:  AC_REQUIRE([gl_LOCALE_H_DEFAULTS])
m4/setlocale.m4:  AC_REQUIRE([gl_FUNC_SETLOCALE_NULL])
m4/setlocale.m4:        [gl_cv_func_setlocale_works],
m4/setlocale.m4:           [gl_cv_func_setlocale_works=yes],
m4/setlocale.m4:           [gl_cv_func_setlocale_works=no],
m4/setlocale.m4:              linux*-android*) gl_cv_func_setlocale_works="guessing no";;
m4/setlocale.m4:              *)               gl_cv_func_setlocale_works="guessing yes";;
m4/setlocale.m4:      case "$gl_cv_func_setlocale_works" in
m4/setlocale.m4:AC_DEFUN([gl_PREREQ_SETLOCALE],
m4/setlocale_null.m4:AC_DEFUN([gl_FUNC_SETLOCALE_NULL],
m4/setlocale_null.m4:  AC_REQUIRE([gl_PTHREADLIB])
m4/setlocale_null.m4:    [gl_cv_func_setlocale_null_all_mtsafe],
m4/setlocale_null.m4:         gl_cv_func_setlocale_null_all_mtsafe=no ;;
m4/setlocale_null.m4:          [gl_cv_func_setlocale_null_all_mtsafe=yes],
m4/setlocale_null.m4:          [gl_cv_func_setlocale_null_all_mtsafe=no])
m4/setlocale_null.m4:         gl_cv_func_setlocale_null_all_mtsafe=yes ;;
m4/setlocale_null.m4:         gl_cv_func_setlocale_null_all_mtsafe="$gl_cross_guess_normal" ;;
m4/setlocale_null.m4:      if test $gl_pthread_api = no && test $ac_cv_header_threads_h = no; then
m4/setlocale_null.m4:        gl_cv_func_setlocale_null_all_mtsafe="trivially yes"
m4/setlocale_null.m4:  case "$gl_cv_func_setlocale_null_all_mtsafe" in
m4/setlocale_null.m4:    [gl_cv_func_setlocale_null_one_mtsafe],
m4/setlocale_null.m4:         gl_cv_func_setlocale_null_one_mtsafe=no ;;
m4/setlocale_null.m4:         gl_cv_func_setlocale_null_one_mtsafe=yes ;;
m4/setlocale_null.m4:         gl_cv_func_setlocale_null_one_mtsafe="$gl_cross_guess_normal" ;;
m4/setlocale_null.m4:      if test $gl_pthread_api = no && test $ac_cv_header_threads_h = no; then
m4/setlocale_null.m4:        gl_cv_func_setlocale_null_one_mtsafe="trivially yes"
m4/setlocale_null.m4:  case "$gl_cv_func_setlocale_null_one_mtsafe" in
m4/setlocale_null.m4:        gl_WEAK_SYMBOLS
m4/setlocale_null.m4:        case "$gl_cv_have_weak" in
m4/setlocale_null.m4:AC_DEFUN([gl_PREREQ_SETLOCALE_LOCK],
m4/setlocale_null.m4:  gl_VISIBILITY
m4/setpayload.m4:AC_DEFUN([gl_FUNC_SETPAYLOADF],
m4/setpayload.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/setpayload.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/setpayload.m4:  gl_MATHFUNC([setpayloadf], [int], [(float *, float)])
m4/setpayload.m4:  if test $gl_cv_func_setpayloadf_no_libm != yes \
m4/setpayload.m4:     && test $gl_cv_func_setpayloadf_in_libm != yes; then
m4/setpayload.m4:    gl_NAN_MIPS
m4/setpayload.m4:AC_DEFUN_ONCE([gl_FUNC_SETPAYLOAD],
m4/setpayload.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/setpayload.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/setpayload.m4:  gl_MATHFUNC([setpayload], [int], [(double *, double)])
m4/setpayload.m4:  if test $gl_cv_func_setpayload_no_libm != yes \
m4/setpayload.m4:     && test $gl_cv_func_setpayload_in_libm != yes; then
m4/setpayload.m4:    gl_NAN_MIPS
m4/setpayload.m4:AC_DEFUN([gl_FUNC_SETPAYLOADL],
m4/setpayload.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/setpayload.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/setpayload.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/setpayload.m4:  gl_MATHFUNC([setpayloadl], [int], [(long double *, long double)])
m4/setpayload.m4:  if test $gl_cv_func_setpayloadl_no_libm != yes \
m4/setpayload.m4:     && test $gl_cv_func_setpayloadl_in_libm != yes; then
m4/setpayload.m4:      AC_REQUIRE([gl_FUNC_SETPAYLOAD])
m4/setpayload.m4:    gl_LONG_DOUBLE_EXPONENT_LOCATION
m4/setpayload.m4:    gl_NAN_MIPS
m4/setpayloadsig.m4:AC_DEFUN([gl_FUNC_SETPAYLOADSIGF],
m4/setpayloadsig.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/setpayloadsig.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/setpayloadsig.m4:  gl_MATHFUNC([setpayloadsigf], [int], [(float *, float)])
m4/setpayloadsig.m4:  if test $gl_cv_func_setpayloadsigf_no_libm != yes \
m4/setpayloadsig.m4:     && test $gl_cv_func_setpayloadsigf_in_libm != yes; then
m4/setpayloadsig.m4:AC_DEFUN_ONCE([gl_FUNC_SETPAYLOADSIG],
m4/setpayloadsig.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/setpayloadsig.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/setpayloadsig.m4:  gl_MATHFUNC([setpayloadsig], [int], [(double *, double)])
m4/setpayloadsig.m4:  if test $gl_cv_func_setpayloadsig_no_libm != yes \
m4/setpayloadsig.m4:     && test $gl_cv_func_setpayloadsig_in_libm != yes; then
m4/setpayloadsig.m4:AC_DEFUN([gl_FUNC_SETPAYLOADSIGL],
m4/setpayloadsig.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/setpayloadsig.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/setpayloadsig.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/setpayloadsig.m4:  gl_MATHFUNC([setpayloadsigl], [int], [(long double *, long double)])
m4/setpayloadsig.m4:  if test $gl_cv_func_setpayloadsigl_no_libm != yes \
m4/setpayloadsig.m4:     && test $gl_cv_func_setpayloadsigl_in_libm != yes; then
m4/setpayloadsig.m4:      AC_REQUIRE([gl_FUNC_SETPAYLOADSIG])
m4/setpayloadsig.m4:    gl_LONG_DOUBLE_EXPONENT_LOCATION
m4/settime.m4:AC_DEFUN([gl_SETTIME],
m4/settime.m4:  AC_REQUIRE([gl_CLOCK_TIME])
m4/settime.m4:  AC_REQUIRE([gl_TIMESPEC])
m4/sh-filename.m4:AC_DEFUN([gl_SH_FILENAME],
m4/sha1.m4:AC_DEFUN([gl_SHA1],
m4/sha1.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/sha1.m4:  gl_CRYPTO_CHECK([SHA1])
m4/sha256.m4:AC_DEFUN([gl_SHA256],
m4/sha256.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/sha256.m4:  gl_CRYPTO_CHECK([SHA256])
m4/sha512.m4:AC_DEFUN([gl_SHA512],
m4/sha512.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/sha512.m4:  gl_CRYPTO_CHECK([SHA512])
m4/sig2str.m4:AC_DEFUN([gl_FUNC_SIG2STR],
m4/sig2str.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/sig2str.m4:AC_DEFUN([gl_PREREQ_SIG2STR], [
m4/sigabbrev_np.m4:AC_DEFUN([gl_FUNC_SIGABBREV_NP],
m4/sigabbrev_np.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/sigaction.m4:AC_DEFUN([gl_SIGACTION],
m4/sigaction.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/sigaction.m4:AC_DEFUN([gl_PREREQ_SIGACTION],
m4/sigaction.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/sigaction.m4:  AC_REQUIRE([gl_PREREQ_SIG_HANDLER_H])
m4/sigaction.m4:AC_DEFUN([gl_PREREQ_SIG_HANDLER_H], [:])
m4/sigdescr_np.m4:AC_DEFUN([gl_FUNC_SIGDESCR_NP],
m4/sigdescr_np.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/signalblocking.m4:AC_DEFUN([gl_SIGNALBLOCKING],
m4/signalblocking.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/signalblocking.m4:  AC_REQUIRE([gl_CHECK_TYPE_SIGSET_T])
m4/signalblocking.m4:  if test "$gl_cv_type_sigset_t" = yes; then
m4/signalblocking.m4:AC_DEFUN([gl_PREREQ_SIGPROCMASK], [:])
m4/signal_h.m4:AC_DEFUN_ONCE([gl_SIGNAL_H],
m4/signal_h.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/signal_h.m4:  AC_REQUIRE([gl_CHECK_TYPE_SIGSET_T])
m4/signal_h.m4:  gl_NEXT_HEADERS([signal.h])
m4/signal_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <signal.h>
m4/signal_h.m4:AC_DEFUN([gl_CHECK_TYPE_SIGSET_T],
m4/signal_h.m4:    [gl_cv_type_sigset_t=yes], [gl_cv_type_sigset_t=no],
m4/signal_h.m4:  if test $gl_cv_type_sigset_t != yes; then
m4/signal_h.m4:# gl_SIGNAL_MODULE_INDICATOR([modulename])
m4/signal_h.m4:AC_DEFUN([gl_SIGNAL_MODULE_INDICATOR],
m4/signal_h.m4:  gl_SIGNAL_H_REQUIRE_DEFAULTS
m4/signal_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/signal_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/signal_h.m4:AC_DEFUN([gl_SIGNAL_H_REQUIRE_DEFAULTS],
m4/signal_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTHREAD_SIGMASK])
m4/signal_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RAISE])
m4/signal_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SIG2STR])
m4/signal_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SIGNAL_H_SIGPIPE])
m4/signal_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SIGPROCMASK])
m4/signal_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SIGACTION])
m4/signal_h.m4:  AC_REQUIRE([gl_SIGNAL_H_DEFAULTS])
m4/signal_h.m4:AC_DEFUN([gl_SIGNAL_H_DEFAULTS],
m4/signbit.m4:AC_DEFUN([gl_SIGNBIT],
m4/signbit.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/signbit.m4:  AC_CACHE_CHECK([for signbit macro], [gl_cv_func_signbit],
m4/signbit.m4:]gl_SIGNBIT_TEST_PROGRAM
m4/signbit.m4:        [gl_cv_func_signbit=yes],
m4/signbit.m4:        [gl_cv_func_signbit=no],
m4/signbit.m4:           *-gnu* | gnu*)      gl_cv_func_signbit="guessing yes" ;;
m4/signbit.m4:           *-musl* | midipix*) gl_cv_func_signbit="guessing yes" ;;
m4/signbit.m4:           mingw* | windows*)  gl_cv_func_signbit="guessing yes" ;;
m4/signbit.m4:           *)                  gl_cv_func_signbit="$gl_cross_guess_normal" ;;
m4/signbit.m4:    [gl_cv_func_signbit_builtins],
m4/signbit.m4:]gl_SIGNBIT_TEST_PROGRAM
m4/signbit.m4:        [gl_cv_func_signbit_builtins=yes],
m4/signbit.m4:        [gl_cv_func_signbit_builtins=no],
m4/signbit.m4:           *-gnu* | gnu*)      gl_cv_func_signbit_builtins="guessing yes" ;;
m4/signbit.m4:           *-musl* | midipix*) gl_cv_func_signbit_builtins="guessing yes" ;;
m4/signbit.m4:                                 gl_cv_func_signbit_builtins="guessing yes"
m4/signbit.m4:                                 gl_cv_func_signbit_builtins="guessing no"
m4/signbit.m4:           *)                  gl_cv_func_signbit_builtins="$gl_cross_guess_normal" ;;
m4/signbit.m4:  case "$gl_cv_func_signbit_builtins" in
m4/signbit.m4:      case "$gl_cv_func_signbit" in
m4/signbit.m4:    gl_FLOAT_SIGN_LOCATION
m4/signbit.m4:    gl_DOUBLE_SIGN_LOCATION
m4/signbit.m4:    gl_LONG_DOUBLE_SIGN_LOCATION
m4/signbit.m4:    if test "$gl_cv_cc_float_signbit" = unknown; then
m4/signbit.m4:          [gl_cv_func_copysignf_no_libm],
m4/signbit.m4:              [gl_cv_func_copysignf_no_libm=yes],
m4/signbit.m4:              [gl_cv_func_copysignf_no_libm=no])
m4/signbit.m4:        if test $gl_cv_func_copysignf_no_libm = yes; then
m4/signbit.m4:    if test "$gl_cv_cc_double_signbit" = unknown; then
m4/signbit.m4:          [gl_cv_func_copysign_no_libm],
m4/signbit.m4:              [gl_cv_func_copysign_no_libm=yes],
m4/signbit.m4:              [gl_cv_func_copysign_no_libm=no])
m4/signbit.m4:        if test $gl_cv_func_copysign_no_libm = yes; then
m4/signbit.m4:    if test "$gl_cv_cc_long_double_signbit" = unknown; then
m4/signbit.m4:          [gl_cv_func_copysignl_no_libm],
m4/signbit.m4:              [gl_cv_func_copysignl_no_libm=yes],
m4/signbit.m4:              [gl_cv_func_copysignl_no_libm=no])
m4/signbit.m4:        if test $gl_cv_func_copysignl_no_libm = yes; then
m4/signbit.m4:AC_DEFUN([gl_SIGNBIT_TEST_PROGRAM], [[
m4/signbit.m4:AC_DEFUN([gl_FLOAT_SIGN_LOCATION],
m4/signbit.m4:  gl_FLOATTYPE_SIGN_LOCATION([float], [gl_cv_cc_float_signbit], [f], [FLT])
m4/signbit.m4:AC_DEFUN([gl_DOUBLE_SIGN_LOCATION],
m4/signbit.m4:  gl_FLOATTYPE_SIGN_LOCATION([double], [gl_cv_cc_double_signbit], [], [DBL])
m4/signbit.m4:AC_DEFUN([gl_LONG_DOUBLE_SIGN_LOCATION],
m4/signbit.m4:  gl_FLOATTYPE_SIGN_LOCATION([long double], [gl_cv_cc_long_double_signbit], [L], [LDBL])
m4/signbit.m4:AC_DEFUN([gl_FLOATTYPE_SIGN_LOCATION],
m4/signbit.m4:AC_DEFUN([gl_FLOAT_SIGNBIT_CODE],
m4/signbit.m4:  gl_FLOATTYPE_SIGNBIT_CODE([float], [f], [f])
m4/signbit.m4:AC_DEFUN([gl_DOUBLE_SIGNBIT_CODE],
m4/signbit.m4:  gl_FLOATTYPE_SIGNBIT_CODE([double], [d], [])
m4/signbit.m4:AC_DEFUN([gl_LONG_DOUBLE_SIGNBIT_CODE],
m4/signbit.m4:  gl_FLOATTYPE_SIGNBIT_CODE([long double], [l], [L])
m4/signbit.m4:AC_DEFUN([gl_FLOATTYPE_SIGNBIT_CODE],
m4/sigpipe.m4:dnl Sets gl_cv_header_signal_h_SIGPIPE.
m4/sigpipe.m4:AC_DEFUN([gl_SIGNAL_SIGPIPE],
m4/sigpipe.m4:  AC_REQUIRE([gl_SIGNAL_SIGPIPE_BODY])
m4/sigpipe.m4:AC_DEFUN([gl_SIGNAL_SIGPIPE_BODY],
m4/sigpipe.m4:  AC_CACHE_CHECK([for SIGPIPE], [gl_cv_header_signal_h_SIGPIPE], [
m4/sigpipe.m4:      [gl_cv_header_signal_h_SIGPIPE=no],
m4/sigpipe.m4:      [gl_cv_header_signal_h_SIGPIPE=yes])
m4/sigsegv.m4:AC_DEFUN_ONCE([gl_SIGSEGV],
m4/sigsegv.m4:    gl_LIBSIGSEGV
m4/sigsegv.m4:    gl_sigsegv_uses_libsigsegv="$gl_cv_lib_sigsegv"
m4/sigsegv.m4:    gl_sigsegv_uses_libsigsegv=no
m4/sin.m4:AC_DEFUN([gl_FUNC_SIN],
m4/sin.m4:  gl_COMMON_DOUBLE_MATHFUNC([sin])
m4/sinf.m4:AC_DEFUN([gl_FUNC_SINF],
m4/sinf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/sinf.m4:  AC_REQUIRE([gl_FUNC_SIN])
m4/sinf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/sinh.m4:AC_DEFUN([gl_FUNC_SINH],
m4/sinh.m4:  gl_COMMON_DOUBLE_MATHFUNC([sinh])
m4/sinhf.m4:AC_DEFUN([gl_FUNC_SINHF],
m4/sinhf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/sinhf.m4:  AC_REQUIRE([gl_FUNC_SINH])
m4/sinhf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/sinl.m4:AC_DEFUN([gl_FUNC_SINL],
m4/sinl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/sinl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/sinl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/sinl.m4:    [gl_cv_func_sinl_no_libm],
m4/sinl.m4:        [gl_cv_func_sinl_no_libm=yes],
m4/sinl.m4:        [gl_cv_func_sinl_no_libm=no])
m4/sinl.m4:  if test $gl_cv_func_sinl_no_libm = no; then
m4/sinl.m4:      [gl_cv_func_sinl_in_libm],
m4/sinl.m4:          [gl_cv_func_sinl_in_libm=yes],
m4/sinl.m4:          [gl_cv_func_sinl_in_libm=no])
m4/sinl.m4:    if test $gl_cv_func_sinl_in_libm = yes; then
m4/sinl.m4:  if test $gl_cv_func_sinl_no_libm = yes \
m4/sinl.m4:     || test $gl_cv_func_sinl_in_libm = yes; then
m4/sinl.m4:      AC_REQUIRE([gl_FUNC_SIN])
m4/sinl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/sinl.m4:      AC_REQUIRE([gl_FUNC_FLOOR])
m4/sinl.m4:      AC_REQUIRE([gl_FUNC_FLOORL])
m4/size_max.m4:AC_DEFUN([gl_SIZE_MAX],
m4/size_max.m4:  AC_CACHE_CHECK([for SIZE_MAX], [gl_cv_size_max], [
m4/size_max.m4:    gl_cv_size_max=no
m4/size_max.m4:], [gl_cv_size_max=yes])
m4/size_max.m4:    if test $gl_cv_size_max != yes; then
m4/size_max.m4:          gl_cv_size_max="(((1U << $size_t_bits_minus_1) - 1) * 2 + 1)"
m4/size_max.m4:          gl_cv_size_max="(((1UL << $size_t_bits_minus_1) - 1) * 2 + 1)"
m4/size_max.m4:        gl_cv_size_max='((size_t)~(size_t)0)'
m4/size_max.m4:  if test "$gl_cv_size_max" != yes; then
m4/size_max.m4:    AC_DEFINE_UNQUOTED([SIZE_MAX], [$gl_cv_size_max],
m4/sleep.m4:AC_DEFUN([gl_FUNC_SLEEP],
m4/sleep.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/sleep.m4:    AC_CACHE_CHECK([for working sleep], [gl_cv_func_sleep_works],
m4/sleep.m4:      [gl_cv_func_sleep_works=yes], [gl_cv_func_sleep_works=no],
m4/sleep.m4:         *-gnu* | gnu*)     gl_cv_func_sleep_works="guessing yes" ;;
m4/sleep.m4:         *-musl*)           gl_cv_func_sleep_works="guessing yes" ;;
m4/sleep.m4:         midipix*)          gl_cv_func_sleep_works="guessing yes" ;;
m4/sleep.m4:         mingw* | windows*) gl_cv_func_sleep_works="guessing no" ;;
m4/sleep.m4:         *)                 gl_cv_func_sleep_works="$gl_cross_guess_normal" ;;
m4/sleep.m4:    case "$gl_cv_func_sleep_works" in
m4/sm3.m4:AC_DEFUN([gl_SM3],
m4/sm3.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/snan.m4:AC_DEFUN_ONCE([gl_SNAN],
m4/snan.m4:  gl_FLOAT_EXPONENT_LOCATION
m4/snan.m4:  gl_DOUBLE_EXPONENT_LOCATION
m4/snan.m4:  gl_LONG_DOUBLE_EXPONENT_LOCATION
m4/snan.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/snprintf-gnu.m4:AC_DEFUN([gl_FUNC_SNPRINTF_GNU],
m4/snprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_SNPRINTF_IS_POSIX])
m4/snprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/snprintf-gnu.m4:  gl_cv_func_snprintf_gnu=no
m4/snprintf-gnu.m4:  if test $gl_cv_func_snprintf_posix = yes; then
m4/snprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/snprintf-gnu.m4:        gl_cv_func_snprintf_gnu=yes
m4/snprintf-gnu.m4:  if test $gl_cv_func_snprintf_gnu = no; then
m4/snprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/snprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/snprintf-gnu.m4:    gl_REPLACE_SNPRINTF
m4/snprintf-posix.m4:AC_DEFUN([gl_FUNC_SNPRINTF_POSIX],
m4/snprintf-posix.m4:  AC_REQUIRE([gl_FUNC_SNPRINTF_IS_POSIX])
m4/snprintf-posix.m4:  if test $gl_cv_func_snprintf_posix = no; then
m4/snprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/snprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/snprintf-posix.m4:    gl_REPLACE_SNPRINTF
m4/snprintf-posix.m4:dnl Result is gl_cv_func_snprintf_posix.
m4/snprintf-posix.m4:AC_DEFUN([gl_FUNC_SNPRINTF_IS_POSIX],
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/snprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/snprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/snprintf-posix.m4:  gl_cv_func_snprintf_posix=no
m4/snprintf-posix.m4:    gl_SNPRINTF_TRUNCATION_C99
m4/snprintf-posix.m4:    gl_SNPRINTF_RETVAL_C99
m4/snprintf-posix.m4:    gl_SNPRINTF_DIRECTIVE_N
m4/snprintf-posix.m4:    gl_SNPRINTF_SIZE1
m4/snprintf-posix.m4:    gl_VSNPRINTF_ZEROSIZE_C99
m4/snprintf-posix.m4:    case "$gl_cv_func_printf_sizes_c99" in
m4/snprintf-posix.m4:        case "$gl_cv_func_printf_sizes_c23" in
m4/snprintf-posix.m4:            case "$gl_cv_func_printf_long_double" in
m4/snprintf-posix.m4:                case "$gl_cv_func_printf_infinite" in
m4/snprintf-posix.m4:                    case "$gl_cv_func_printf_infinite_long_double" in
m4/snprintf-posix.m4:                        case "$gl_cv_func_printf_directive_a" in
m4/snprintf-posix.m4:                            case "$gl_cv_func_printf_directive_b" in
m4/snprintf-posix.m4:                                case "$gl_cv_func_printf_directive_f" in
m4/snprintf-posix.m4:                                    case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/snprintf-posix.m4:                                        case "$gl_cv_func_printf_directive_ls" in
m4/snprintf-posix.m4:                                            case "$gl_cv_func_printf_directive_lc" in
m4/snprintf-posix.m4:                                                case "$gl_cv_func_printf_positions" in
m4/snprintf-posix.m4:                                                    case "$gl_cv_func_printf_flag_grouping" in
m4/snprintf-posix.m4:                                                        case "$gl_cv_func_printf_flag_leftadjust" in
m4/snprintf-posix.m4:                                                            case "$gl_cv_func_printf_flag_zero" in
m4/snprintf-posix.m4:                                                                case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/snprintf-posix.m4:                                                                    case "$gl_cv_func_printf_precision" in
m4/snprintf-posix.m4:                                                                        case "$gl_cv_func_printf_enomem" in
m4/snprintf-posix.m4:                                                                            case "$gl_cv_func_snprintf_truncation_c99" in
m4/snprintf-posix.m4:                                                                                case "$gl_cv_func_snprintf_retval_c99" in
m4/snprintf-posix.m4:                                                                                    case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_snprintf_directive_n"],["yes"]) in
m4/snprintf-posix.m4:                                                                                        case "$gl_cv_func_snprintf_size1" in
m4/snprintf-posix.m4:                                                                                            case "$gl_cv_func_vsnprintf_zerosize_c99" in
m4/snprintf-posix.m4:                                                                                                gl_cv_func_snprintf_posix=yes
m4/snprintf.m4:AC_DEFUN([gl_FUNC_SNPRINTF],
m4/snprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/snprintf.m4:  gl_cv_func_snprintf_usable=no
m4/snprintf.m4:    gl_SNPRINTF_SIZE1
m4/snprintf.m4:    case "$gl_cv_func_snprintf_size1" in
m4/snprintf.m4:        gl_SNPRINTF_RETVAL_C99
m4/snprintf.m4:        case "$gl_cv_func_snprintf_retval_c99" in
m4/snprintf.m4:            gl_PRINTF_POSITIONS
m4/snprintf.m4:            case "$gl_cv_func_printf_positions" in
m4/snprintf.m4:                gl_cv_func_snprintf_usable=yes
m4/snprintf.m4:  if test $gl_cv_func_snprintf_usable = no; then
m4/snprintf.m4:    gl_REPLACE_SNPRINTF
m4/snprintf.m4:AC_DEFUN([gl_REPLACE_SNPRINTF],
m4/snprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/snprintf.m4:  gl_PREREQ_SNPRINTF
m4/snprintf.m4:AC_DEFUN([gl_PREREQ_SNPRINTF], [:])
m4/socketlib.m4:dnl gl_SOCKETLIB
m4/socketlib.m4:AC_DEFUN([gl_SOCKETLIB],
m4/socketlib.m4:  gl_PREREQ_SYS_H_WINSOCK2 dnl for HAVE_WINSOCK2_H
m4/socketlib.m4:      [gl_cv_func_wsastartup], [
m4/socketlib.m4:       gl_saved_LIBS="$LIBS"
m4/socketlib.m4:         [gl_cv_func_wsastartup=yes],
m4/socketlib.m4:         [gl_cv_func_wsastartup=no])
m4/socketlib.m4:       LIBS="$gl_saved_LIBS"
m4/socketlib.m4:    if test "$gl_cv_func_wsastartup" = "yes"; then
m4/socketlib.m4:    AC_CACHE_CHECK([for library containing setsockopt], [gl_cv_lib_socket], [
m4/socketlib.m4:      gl_cv_lib_socket=
m4/socketlib.m4:        [gl_saved_LIBS="$LIBS"
m4/socketlib.m4:         LIBS="$gl_saved_LIBS -lsocket"
m4/socketlib.m4:           [gl_cv_lib_socket="-lsocket"])
m4/socketlib.m4:         if test -z "$gl_cv_lib_socket"; then
m4/socketlib.m4:           LIBS="$gl_saved_LIBS -lnetwork"
m4/socketlib.m4:             [gl_cv_lib_socket="-lnetwork"])
m4/socketlib.m4:           if test -z "$gl_cv_lib_socket"; then
m4/socketlib.m4:             LIBS="$gl_saved_LIBS -lnet"
m4/socketlib.m4:               [gl_cv_lib_socket="-lnet"])
m4/socketlib.m4:         LIBS="$gl_saved_LIBS"
m4/socketlib.m4:      if test -z "$gl_cv_lib_socket"; then
m4/socketlib.m4:        gl_cv_lib_socket="none needed"
m4/socketlib.m4:    if test "$gl_cv_lib_socket" != "none needed"; then
m4/socketlib.m4:      LIBSOCKET="$gl_cv_lib_socket"
m4/sockets.m4:AC_DEFUN([gl_SOCKETS],
m4/sockets.m4:  AC_REQUIRE([gl_SOCKETLIB])
m4/sockets.m4:  gl_PREREQ_SOCKETS
m4/sockets.m4:AC_DEFUN([gl_PREREQ_SOCKETS], [
m4/socklen.m4:AC_DEFUN([gl_TYPE_SOCKLEN_T],
m4/socklen.m4:  [AC_REQUIRE([gl_CHECK_SOCKET_HEADERS])dnl
m4/socklen.m4:        [gl_cv_socklen_t_equiv],
m4/socklen.m4:         gl_cv_socklen_t_equiv=
m4/socklen.m4:               [gl_cv_socklen_t_equiv="$t"])
m4/socklen.m4:             test "$gl_cv_socklen_t_equiv" != "" && break
m4/socklen.m4:           test "$gl_cv_socklen_t_equiv" != "" && break
m4/socklen.m4:         if test "$gl_cv_socklen_t_equiv" = ""; then
m4/socklen.m4:      AC_DEFINE_UNQUOTED([socklen_t], [$gl_cv_socklen_t_equiv],
m4/socklen.m4:     [gl_SOCKET_HEADERS])])
m4/socklen.m4:dnl of this module should use the same include pattern as gl_SOCKET_HEADERS.
m4/socklen.m4:dnl   - gl_CHECK_SOCKET_HEADERS,
m4/socklen.m4:AC_DEFUN([gl_SOCKET_HEADERS],
m4/socklen.m4:dnl This macro must match gl_SOCKET_HEADERS.
m4/socklen.m4:AC_DEFUN([gl_CHECK_SOCKET_HEADERS],
m4/sockpfaf.m4:AC_DEFUN([gl_SOCKET_FAMILIES],
m4/sockpfaf.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])
m4/sockpfaf.m4:    [gl_cv_socket_ipv4],
m4/sockpfaf.m4:       gl_cv_socket_ipv4=yes, gl_cv_socket_ipv4=no)])
m4/sockpfaf.m4:  if test $gl_cv_socket_ipv4 = yes; then
m4/sockpfaf.m4:    [gl_cv_socket_ipv6],
m4/sockpfaf.m4:       gl_cv_socket_ipv6=yes, gl_cv_socket_ipv6=no)])
m4/sockpfaf.m4:  if test $gl_cv_socket_ipv6 = yes; then
m4/sockpfaf.m4:AC_DEFUN([gl_SOCKET_FAMILY_UNIX],
m4/sockpfaf.m4:  AC_REQUIRE([gl_SYS_SOCKET_H])
m4/sockpfaf.m4:    [gl_cv_socket_unix],
m4/sockpfaf.m4:       gl_cv_socket_unix=yes, gl_cv_socket_unix=no)])
m4/sockpfaf.m4:  if test $gl_cv_socket_unix = yes; then
m4/sparcv8+.m4:AC_DEFUN([gl_SPARC_V8PLUS],
m4/sparcv8+.m4:          [gl_cv_sparc_v8plus],
m4/sparcv8+.m4:             [gl_cv_sparc_v8plus=yes],
m4/sparcv8+.m4:             [gl_cv_sparc_v8plus=no])
m4/sparcv8+.m4:        if test $gl_cv_sparc_v8plus = no; then
m4/spawn-pipe.m4:AC_DEFUN([gl_SPAWN_PIPE],
m4/spawn_h.m4:AC_DEFUN_ONCE([gl_SPAWN_H],
m4/spawn_h.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/spawn_h.m4:  gl_CHECK_NEXT_HEADERS([spawn.h])
m4/spawn_h.m4:  AC_REQUIRE([gl_HAVE_POSIX_SPAWN])
m4/spawn_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <spawn.h>
m4/spawn_h.m4:AC_DEFUN([gl_HAVE_POSIX_SPAWN],
m4/spawn_h.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/spawn_h.m4:  gl_saved_libs=$LIBS
m4/spawn_h.m4:    gl_CHECK_FUNCS_ANDROID([posix_spawn], [[#include <spawn.h>]])
m4/spawn_h.m4:  LIBS=$gl_saved_libs
m4/spawn_h.m4:    case "$gl_cv_onwards_func_posix_spawn" in
m4/spawn_h.m4:# gl_SPAWN_MODULE_INDICATOR([modulename])
m4/spawn_h.m4:AC_DEFUN([gl_SPAWN_MODULE_INDICATOR],
m4/spawn_h.m4:  gl_SPAWN_H_REQUIRE_DEFAULTS
m4/spawn_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/spawn_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/spawn_h.m4:AC_DEFUN([gl_SPAWN_H_REQUIRE_DEFAULTS],
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNP])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN_FILE_ACTIONS_INIT])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDDUP2])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDFCHDIR])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN_FILE_ACTIONS_ADDOPEN])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWN_FILE_ACTIONS_DESTROY])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_INIT])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_GETFLAGS])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_SETFLAGS])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_GETPGROUP])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_SETPGROUP])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_GETSCHEDPARAM])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_SETSCHEDPARAM])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_GETSCHEDPOLICY])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_SETSCHEDPOLICY])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_GETSIGDEFAULT])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_SETSIGDEFAULT])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_GETSIGMASK])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_SETSIGMASK])
m4/spawn_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_SPAWNATTR_DESTROY])
m4/spawn_h.m4:  AC_REQUIRE([gl_SPAWN_H_DEFAULTS])
m4/spawn_h.m4:AC_DEFUN([gl_SPAWN_H_DEFAULTS],
m4/sprintf-gnu.m4:AC_DEFUN([gl_FUNC_SPRINTF_GNU],
m4/sprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_SPRINTF_IS_POSIX])
m4/sprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/sprintf-gnu.m4:  gl_cv_func_sprintf_gnu=no
m4/sprintf-gnu.m4:  if test $gl_cv_func_sprintf_posix = yes; then
m4/sprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/sprintf-gnu.m4:        gl_cv_func_sprintf_gnu=yes
m4/sprintf-gnu.m4:  if test $gl_cv_func_sprintf_gnu = no; then
m4/sprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/sprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/sprintf-gnu.m4:    gl_REPLACE_SPRINTF
m4/sprintf-posix.m4:AC_DEFUN([gl_FUNC_SPRINTF_POSIX],
m4/sprintf-posix.m4:  AC_REQUIRE([gl_FUNC_SPRINTF_IS_POSIX])
m4/sprintf-posix.m4:  if test $gl_cv_func_sprintf_posix = no; then
m4/sprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/sprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/sprintf-posix.m4:    gl_REPLACE_SPRINTF
m4/sprintf-posix.m4:dnl Result is gl_cv_func_sprintf_posix.
m4/sprintf-posix.m4:AC_DEFUN([gl_FUNC_SPRINTF_IS_POSIX],
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/sprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/sprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/sprintf-posix.m4:  gl_cv_func_sprintf_posix=no
m4/sprintf-posix.m4:  case "$gl_cv_func_printf_sizes_c99" in
m4/sprintf-posix.m4:      case "$gl_cv_func_printf_sizes_c23" in
m4/sprintf-posix.m4:          case "$gl_cv_func_printf_long_double" in
m4/sprintf-posix.m4:              case "$gl_cv_func_printf_infinite" in
m4/sprintf-posix.m4:                  case "$gl_cv_func_printf_infinite_long_double" in
m4/sprintf-posix.m4:                      case "$gl_cv_func_printf_directive_a" in
m4/sprintf-posix.m4:                          case "$gl_cv_func_printf_directive_b" in
m4/sprintf-posix.m4:                              case "$gl_cv_func_printf_directive_f" in
m4/sprintf-posix.m4:                                  case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/sprintf-posix.m4:                                      case "$gl_cv_func_printf_directive_ls" in
m4/sprintf-posix.m4:                                          case "$gl_cv_func_printf_directive_lc" in
m4/sprintf-posix.m4:                                              case "$gl_cv_func_printf_positions" in
m4/sprintf-posix.m4:                                                  case "$gl_cv_func_printf_flag_grouping" in
m4/sprintf-posix.m4:                                                      case "$gl_cv_func_printf_flag_leftadjust" in
m4/sprintf-posix.m4:                                                          case "$gl_cv_func_printf_flag_zero" in
m4/sprintf-posix.m4:                                                              case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/sprintf-posix.m4:                                                                  case "$gl_cv_func_printf_precision" in
m4/sprintf-posix.m4:                                                                      case "$gl_cv_func_printf_enomem" in
m4/sprintf-posix.m4:                                                                          gl_cv_func_sprintf_posix=yes
m4/sprintf-posix.m4:AC_DEFUN([gl_REPLACE_SPRINTF],
m4/sprintf-posix.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/sprintf-posix.m4:  gl_PREREQ_SPRINTF
m4/sprintf-posix.m4:AC_DEFUN([gl_PREREQ_SPRINTF], [:])
m4/sqrt.m4:AC_DEFUN([gl_FUNC_SQRT],
m4/sqrt.m4:  gl_COMMON_DOUBLE_MATHFUNC([sqrt])
m4/sqrtf.m4:AC_DEFUN([gl_FUNC_SQRTF],
m4/sqrtf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/sqrtf.m4:  AC_REQUIRE([gl_FUNC_SQRT])
m4/sqrtf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/sqrtl.m4:AC_DEFUN([gl_FUNC_SQRTL],
m4/sqrtl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/sqrtl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/sqrtl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/sqrtl.m4:    [gl_cv_func_sqrtl_no_libm],
m4/sqrtl.m4:        [gl_cv_func_sqrtl_no_libm=yes],
m4/sqrtl.m4:        [gl_cv_func_sqrtl_no_libm=no])
m4/sqrtl.m4:  if test $gl_cv_func_sqrtl_no_libm = no; then
m4/sqrtl.m4:      [gl_cv_func_sqrtl_in_libm],
m4/sqrtl.m4:          [gl_cv_func_sqrtl_in_libm=yes],
m4/sqrtl.m4:          [gl_cv_func_sqrtl_in_libm=no])
m4/sqrtl.m4:    if test $gl_cv_func_sqrtl_in_libm = yes; then
m4/sqrtl.m4:  if test $gl_cv_func_sqrtl_no_libm = yes \
m4/sqrtl.m4:     || test $gl_cv_func_sqrtl_in_libm = yes; then
m4/sqrtl.m4:    gl_FUNC_SQRTL_WORKS
m4/sqrtl.m4:    case "$gl_cv_func_sqrtl_works" in
m4/sqrtl.m4:      AC_REQUIRE([gl_FUNC_SQRT])
m4/sqrtl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/sqrtl.m4:      AC_REQUIRE([gl_FUNC_FREXPL])
m4/sqrtl.m4:      AC_REQUIRE([gl_FUNC_LDEXPL])
m4/sqrtl.m4:      AC_REQUIRE([gl_FUNC_SQRT])
m4/sqrtl.m4:AC_DEFUN([gl_FUNC_SQRTL_WORKS],
m4/sqrtl.m4:  AC_CACHE_CHECK([whether sqrtl works], [gl_cv_func_sqrtl_works],
m4/sqrtl.m4:        [gl_cv_func_sqrtl_works=yes],
m4/sqrtl.m4:        [gl_cv_func_sqrtl_works=no],
m4/sqrtl.m4:           openbsd*)          gl_cv_func_sqrtl_works="guessing no" ;;
m4/sqrtl.m4:           mingw* | windows*) gl_cv_func_sqrtl_works="guessing yes" ;;
m4/sqrtl.m4:           *)                 gl_cv_func_sqrtl_works="guessing yes" ;;
m4/ssize_t.m4:  AC_CACHE_CHECK([for ssize_t], [gl_cv_ssize_t],
m4/ssize_t.m4:       [gl_cv_ssize_t=yes], [gl_cv_ssize_t=no])])
m4/ssize_t.m4:  if test $gl_cv_ssize_t = no; then
m4/ssize_t.m4:    AC_CACHE_CHECK([whether size_t is wider than 'long'], [gl_cv_size_t_large],
m4/ssize_t.m4:         [gl_cv_size_t_large=yes], [gl_cv_size_t_large=no])])
m4/ssize_t.m4:    if test $gl_cv_size_t_large = yes; then
m4/ssize_t.m4:      gl_def_ssize_t='long long'
m4/ssize_t.m4:      gl_def_ssize_t='long'
m4/ssize_t.m4:    AC_DEFINE_UNQUOTED([ssize_t], [$gl_def_ssize_t],
m4/stack-trace.m4:AC_DEFUN([gl_STACK_TRACE_EARLY],
m4/stack-trace.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/stack-trace.m4:    AC_CACHE_CHECK([for libbacktrace], [gl_cv_lib_backtrace], [
m4/stack-trace.m4:      gl_saved_LIBS="$LIBS"
m4/stack-trace.m4:      LIBS="$gl_saved_LIBS -lbacktrace"
m4/stack-trace.m4:        [gl_cv_lib_backtrace=yes],
m4/stack-trace.m4:        [gl_cv_lib_backtrace=no])
m4/stack-trace.m4:      LIBS="$gl_saved_LIBS"
m4/stack-trace.m4:    if test $gl_cv_lib_backtrace = yes; then
m4/stack-trace.m4:AC_DEFUN([gl_STACK_TRACE],
m4/stat-size.m4:AC_DEFUN([gl_STAT_SIZE],
m4/stat-time.m4:AC_DEFUN([gl_STAT_TIME],
m4/stat-time.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/stat-time.m4:AC_DEFUN([gl_STAT_BIRTHTIME],
m4/stat-time.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/stat.m4:AC_DEFUN([gl_FUNC_STAT],
m4/stat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/stat.m4:        [gl_cv_func_stat_file_slash],
m4/stat.m4:           [gl_cv_func_stat_file_slash=yes], [gl_cv_func_stat_file_slash=no],
m4/stat.m4:              linux-* | linux) gl_cv_func_stat_file_slash="guessing yes" ;;
m4/stat.m4:              midipix*)        gl_cv_func_stat_file_slash="guessing yes" ;;
m4/stat.m4:              *-gnu* | gnu*)   gl_cv_func_stat_file_slash="guessing yes" ;;
m4/stat.m4:              *)               gl_cv_func_stat_file_slash="$gl_cross_guess_normal" ;;
m4/stat.m4:      case $gl_cv_func_stat_file_slash in
m4/stat.m4:AC_DEFUN([gl_PREREQ_STAT], [
m4/stat.m4:  AC_REQUIRE([gl_SYS_STAT_H])
m4/stat.m4:  AC_REQUIRE([gl_PREREQ_STAT_W32])
m4/stat.m4:AC_DEFUN([gl_PREREQ_STAT_W32], [
m4/stdalign.m4:AC_DEFUN([gl_ALIGNASOF],
m4/stdalign.m4:    [gl_cv_header_working_stdalign_h],
m4/stdalign.m4:    [gl_saved_CFLAGS=$CFLAGS
m4/stdalign.m4:     for gl_working in "yes, keywords" "yes, <stdalign.h> macros"; do
m4/stdalign.m4:      AS_CASE([$gl_working],
m4/stdalign.m4:        [*stdalign.h*], [CFLAGS="$gl_saved_CFLAGS -DINCLUDE_STDALIGN_H"])
m4/stdalign.m4:       [gl_cv_header_working_stdalign_h=$gl_working],
m4/stdalign.m4:       [gl_cv_header_working_stdalign_h=no])
m4/stdalign.m4:      CFLAGS=$gl_saved_CFLAGS
m4/stdalign.m4:      test "$gl_cv_header_working_stdalign_h" != no && break
m4/stdalign.m4:  AS_CASE([$gl_cv_header_working_stdalign_h],
m4/stdalign.m4:AC_DEFUN([gl_STDALIGN_H],
m4/stdalign.m4:  AC_REQUIRE([gl_ALIGNASOF])
m4/stdalign.m4:  if test "$gl_cv_header_working_stdalign_h" = no; then
m4/stdalign.m4:  gl_CHECK_NEXT_HEADERS([stdalign.h])
m4/stdarg.m4:AC_DEFUN([gl_STDARG_H],
m4/stdarg.m4:    [gl_cv_func_va_copy],
m4/stdarg.m4:       [gl_cv_func_va_copy=yes],
m4/stdarg.m4:       [gl_cv_func_va_copy=no])
m4/stdarg.m4:  if test $gl_cv_func_va_copy = no; then
m4/stdarg.m4:    dnl preprocessor macros and gl_ABSOLUTE_HEADER, gl_CHECK_NEXT_HEADERS do
m4/stdarg.m4:      ], [gl_aixcc=yes], [gl_aixcc=no])
m4/stdarg.m4:    if test $gl_aixcc = yes; then
m4/stdarg.m4:      gl_NEXT_HEADERS([stdarg.h])
m4/stdarg.m4:      if test "$gl_cv_next_stdarg_h" = '""'; then
m4/stdarg.m4:        gl_cv_next_stdarg_h='"///usr/include/stdarg.h"'
m4/stdarg.m4:        NEXT_STDARG_H="$gl_cv_next_stdarg_h"
m4/stdarg.m4:      gl_CACHE_VAL_SILENT([gl_cv_func___va_copy], [
m4/stdarg.m4:          [gl_cv_func___va_copy=yes],
m4/stdarg.m4:          [gl_cv_func___va_copy=no])])
m4/stdarg.m4:      if test $gl_cv_func___va_copy = yes; then
m4/stdarg.m4:        AH_VERBATIM([gl_VA_COPY], [/* A replacement for va_copy, if needed.  */
m4/stdarg.m4:#define gl_va_copy(a,b) ((a) = (b))])
m4/stdarg.m4:        AC_DEFINE([va_copy], [gl_va_copy],
m4/stdbit_h.m4:AC_DEFUN_ONCE([gl_STDBIT_H],
m4/stdbit_h.m4:  AC_REQUIRE([gl_BIGENDIAN])
m4/stdbit_h.m4:  dnl We don't use gl_MODULE_INDICATOR_INIT_VARIABLE here, because stdbit.in.h
m4/stdbool.m4:AC_DEFUN([gl_STDBOOL_H],
m4/stddef_h.m4:AC_DEFUN_ONCE([gl_STDDEF_H],
m4/stddef_h.m4:  AC_REQUIRE([gl_STDDEF_H_DEFAULTS])
m4/stddef_h.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/stddef_h.m4:    [gl_cv_type_max_align_t],
m4/stddef_h.m4:       [gl_cv_type_max_align_t=yes],
m4/stddef_h.m4:       [gl_cv_type_max_align_t=no])
m4/stddef_h.m4:  if test $gl_cv_type_max_align_t = no; then
m4/stddef_h.m4:    [gl_cv_decl_null_works],
m4/stddef_h.m4:      [gl_cv_decl_null_works=yes],
m4/stddef_h.m4:      [gl_cv_decl_null_works=no])])
m4/stddef_h.m4:  if test $gl_cv_decl_null_works = no; then
m4/stddef_h.m4:    [gl_cv_func_unreachable],
m4/stddef_h.m4:       [gl_cv_func_unreachable=yes],
m4/stddef_h.m4:       [gl_cv_func_unreachable=no])
m4/stddef_h.m4:  if test $gl_cv_func_unreachable = no; then
m4/stddef_h.m4:    [gl_cv_nullptr_t_needs_stddef],
m4/stddef_h.m4:       [gl_cv_nullptr_t_needs_stddef=no],
m4/stddef_h.m4:       [gl_cv_nullptr_t_needs_stddef=yes])])
m4/stddef_h.m4:  if test "$gl_cv_nullptr_t_needs_stddef" = no; then
m4/stddef_h.m4:    [gl_cv_clean_version_stddef],
m4/stddef_h.m4:        [gl_cv_clean_version_stddef=yes],
m4/stddef_h.m4:        [gl_cv_clean_version_stddef=no])])
m4/stddef_h.m4:  if test "$gl_cv_clean_version_stddef" = no; then
m4/stddef_h.m4:    gl_NEXT_HEADERS([stddef.h])
m4/stddef_h.m4:# gl_STDDEF_MODULE_INDICATOR([modulename])
m4/stddef_h.m4:AC_DEFUN([gl_STDDEF_MODULE_INDICATOR],
m4/stddef_h.m4:  gl_STDDEF_H_REQUIRE_DEFAULTS
m4/stddef_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/stddef_h.m4:AC_DEFUN([gl_STDDEF_H_REQUIRE_DEFAULTS],
m4/stddef_h.m4:  AC_REQUIRE([gl_STDDEF_H_DEFAULTS])
m4/stddef_h.m4:AC_DEFUN([gl_STDDEF_H_DEFAULTS],
m4/stdint.m4:AC_DEFUN_ONCE([gl_STDINT_H],
m4/stdint.m4:  AC_REQUIRE([gl_LIMITS_H])
m4/stdint.m4:  dnl Check for <wchar.h>, in the same way as gl_WCHAR_H does.
m4/stdint.m4:  gl_CHECK_NEXT_HEADERS([stdint.h])
m4/stdint.m4:      [gl_cv_header_working_stdint_h],
m4/stdint.m4:      [gl_cv_header_working_stdint_h=no
m4/stdint.m4:gl_STDINT_INCLUDES
m4/stdint.m4:gl_STDINT_INCLUDES
m4/stdint.m4:              [gl_cv_header_working_stdint_h=yes],
m4/stdint.m4:                 mingw* | windows*) gl_cv_header_working_stdint_h="guessing yes" ;;
m4/stdint.m4:                 *)                 gl_cv_header_working_stdint_h="guessing yes" ;;
m4/stdint.m4:  case "$gl_cv_header_working_stdint_h" in
m4/stdint.m4:        [gl_cv_header_stdint_without_STDC_macros],
m4/stdint.m4:        [gl_cv_header_stdint_without_STDC_macros=no
m4/stdint.m4:gl_STDINT_INCLUDES
m4/stdint.m4:           [gl_cv_header_stdint_without_STDC_macros=yes])
m4/stdint.m4:      if test $gl_cv_header_stdint_without_STDC_macros = no; then
m4/stdint.m4:        [gl_cv_header_stdint_width],
m4/stdint.m4:        [gl_cv_header_stdint_width=no
m4/stdint.m4:              ]gl_STDINT_INCLUDES[
m4/stdint.m4:           [gl_cv_header_stdint_width=yes])])
m4/stdint.m4:      if test "$gl_cv_header_stdint_width" = yes; then
m4/stdint.m4:      gl_STDINT_TYPE_PROPERTIES
m4/stdint.m4:  gl_REPLACE_LIMITS_H
m4/stdint.m4:dnl gl_STDINT_BITSIZEOF(TYPES, INCLUDES)
m4/stdint.m4:AC_DEFUN([gl_STDINT_BITSIZEOF],
m4/stdint.m4:    AC_CACHE_CHECK([for bit size of $gltype], [gl_cv_bitsizeof_${gltype}],
m4/stdint.m4:       eval gl_cv_bitsizeof_${gltype}=\$result
m4/stdint.m4:    eval result=\$gl_cv_bitsizeof_${gltype}
m4/stdint.m4:dnl gl_CHECK_TYPES_SIGNED(TYPES, INCLUDES)
m4/stdint.m4:AC_DEFUN([gl_CHECK_TYPES_SIGNED],
m4/stdint.m4:    AC_CACHE_CHECK([whether $gltype is signed], [gl_cv_type_${gltype}_signed],
m4/stdint.m4:       eval gl_cv_type_${gltype}_signed=\$result
m4/stdint.m4:    eval result=\$gl_cv_type_${gltype}_signed
m4/stdint.m4:dnl gl_INTEGER_TYPE_SUFFIX(TYPES, INCLUDES)
m4/stdint.m4:AC_DEFUN([gl_INTEGER_TYPE_SUFFIX],
m4/stdint.m4:      [gl_cv_type_${gltype}_suffix],
m4/stdint.m4:      [eval gl_cv_type_${gltype}_suffix=no
m4/stdint.m4:       eval result=\$gl_cv_type_${gltype}_signed
m4/stdint.m4:           [eval gl_cv_type_${gltype}_suffix=\$glsuf])
m4/stdint.m4:         eval result=\$gl_cv_type_${gltype}_suffix
m4/stdint.m4:    eval result=\$gl_cv_type_${gltype}_suffix
m4/stdint.m4:dnl gl_STDINT_INCLUDES
m4/stdint.m4:AC_DEFUN([gl_STDINT_INCLUDES],
m4/stdint.m4:dnl gl_STDINT_TYPE_PROPERTIES
m4/stdint.m4:AC_DEFUN([gl_STDINT_TYPE_PROPERTIES],
m4/stdint.m4:  AC_REQUIRE([gl_MULTIARCH])
m4/stdint.m4:    gl_STDINT_BITSIZEOF([ptrdiff_t size_t],
m4/stdint.m4:      [gl_STDINT_INCLUDES])
m4/stdint.m4:  gl_STDINT_BITSIZEOF([sig_atomic_t wchar_t wint_t],
m4/stdint.m4:    [gl_STDINT_INCLUDES])
m4/stdint.m4:  gl_CHECK_TYPES_SIGNED([sig_atomic_t wchar_t wint_t],
m4/stdint.m4:    [gl_STDINT_INCLUDES])
m4/stdint.m4:  gl_cv_type_ptrdiff_t_signed=yes
m4/stdint.m4:  gl_cv_type_size_t_signed=no
m4/stdint.m4:    gl_INTEGER_TYPE_SUFFIX([ptrdiff_t size_t],
m4/stdint.m4:      [gl_STDINT_INCLUDES])
m4/stdint.m4:  gl_INTEGER_TYPE_SUFFIX([sig_atomic_t wchar_t wint_t],
m4/stdint.m4:    [gl_STDINT_INCLUDES])
m4/stdint_h.m4:AC_DEFUN([gl_AC_HEADER_STDINT_H],
m4/stdint_h.m4:  AC_CACHE_CHECK([for stdint.h], [gl_cv_header_stdint_h],
m4/stdint_h.m4:       [gl_cv_header_stdint_h=yes],
m4/stdint_h.m4:       [gl_cv_header_stdint_h=no])])
m4/stdint_h.m4:  if test $gl_cv_header_stdint_h = yes; then
m4/stdio_h.m4:AC_DEFUN([gl_STDIO_H_EARLY],
m4/stdio_h.m4:AC_DEFUN_ONCE([gl_STDIO_H],
m4/stdio_h.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/stdio_h.m4:  gl_NEXT_HEADERS([stdio.h])
m4/stdio_h.m4:    [gl_cv_func_printf_attribute_flavor],
m4/stdio_h.m4:      ]])], [gl_cv_func_printf_attribute_flavor=system],
m4/stdio_h.m4:      [gl_cv_func_printf_attribute_flavor=gnu])])
m4/stdio_h.m4:  if test "$gl_cv_func_printf_attribute_flavor" = gnu; then
m4/stdio_h.m4:  gl_MUSL_LIBC
m4/stdio_h.m4:  m4_ifdef([gl_NONBLOCKING_IO], [
m4/stdio_h.m4:    gl_NONBLOCKING_IO
m4/stdio_h.m4:    if test $gl_cv_have_nonblocking != yes; then
m4/stdio_h.m4:  m4_ifdef([gl_SIGNAL_SIGPIPE], [
m4/stdio_h.m4:    gl_SIGNAL_SIGPIPE
m4/stdio_h.m4:    if test $gl_cv_header_signal_h_SIGPIPE != yes; then
m4/stdio_h.m4:  m4_ifdef([gl_NONBLOCKING_IO], [
m4/stdio_h.m4:    gl_NONBLOCKING_IO
m4/stdio_h.m4:    if test $gl_cv_have_nonblocking != yes; then
m4/stdio_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <stdio.h>
m4/stdio_h.m4:# gl_STDIO_MODULE_INDICATOR([modulename])
m4/stdio_h.m4:AC_DEFUN([gl_STDIO_MODULE_INDICATOR],
m4/stdio_h.m4:  gl_STDIO_H_REQUIRE_DEFAULTS
m4/stdio_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/stdio_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/stdio_h.m4:AC_DEFUN([gl_STDIO_H_REQUIRE_DEFAULTS],
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_DPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_DZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FCLOSE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FDOPEN])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FFLUSH])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FGETC])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FGETS])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FOPEN])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FOPEN_GNU])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FPRINTF_POSIX])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FPURGE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FPUTC])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FPUTS])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FREAD])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FREOPEN])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FSCANF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FSEEK])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FSEEKO])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FTELL])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FTELLO])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FWRITE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETC])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETCHAR])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETDELIM])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETLINE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OBSTACK_PRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OBSTACK_PRINTF_POSIX])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OBSTACK_ZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PCLOSE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PERROR])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POPEN])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PRINTF_POSIX])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PUTC])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PUTCHAR])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PUTS])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REMOVE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RENAME])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RENAMEAT])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SCANF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SNPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SNZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SPRINTF_POSIX])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STDIO_H_NONBLOCKING])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STDIO_H_SIGPIPE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TMPFILE])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VASPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VASZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VFSCANF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VSCANF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VDPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VDZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VFPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VFPRINTF_POSIX])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VFZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VPRINTF_POSIX])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VSNPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VSNZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VSPRINTF_POSIX])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VSZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_VZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ZPRINTF])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_FCLOSEALL], [1])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_FDOPEN], [1])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_FILENO], [1])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_GETW], [1])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_PUTW], [1])
m4/stdio_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_TEMPNAM], [1])
m4/stdio_h.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/stdio_h.m4:AC_DEFUN([gl_STDIO_H_DEFAULTS],
m4/stdlib_h.m4:AC_DEFUN_ONCE([gl_STDLIB_H],
m4/stdlib_h.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/stdlib_h.m4:  gl_NEXT_HEADERS([stdlib.h])
m4/stdlib_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <stdlib.h>
m4/stdlib_h.m4:    [gl_cv_macro_MB_CUR_MAX_good],
m4/stdlib_h.m4:        solaris*) gl_cv_macro_MB_CUR_MAX_good="guessing no" ;;
m4/stdlib_h.m4:        *)        gl_cv_macro_MB_CUR_MAX_good="guessing yes" ;;
m4/stdlib_h.m4:          [gl_cv_macro_MB_CUR_MAX_good=yes],
m4/stdlib_h.m4:          [gl_cv_macro_MB_CUR_MAX_good=no],
m4/stdlib_h.m4:  case "$gl_cv_macro_MB_CUR_MAX_good" in
m4/stdlib_h.m4:# gl_STDLIB_MODULE_INDICATOR([modulename])
m4/stdlib_h.m4:AC_DEFUN([gl_STDLIB_MODULE_INDICATOR],
m4/stdlib_h.m4:  gl_STDLIB_H_REQUIRE_DEFAULTS
m4/stdlib_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/stdlib_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/stdlib_h.m4:AC_DEFUN([gl_STDLIB_H_REQUIRE_DEFAULTS],
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB__EXIT])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ABORT_DEBUG])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ALIGNED_ALLOC])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ATOLL])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CALLOC_GNU])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CALLOC_POSIX])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CANONICALIZE_FILE_NAME])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FREE_POSIX])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETLOADAVG])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPROGNAME])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETSUBOPT])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GRANTPT])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MALLOC_GNU])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MALLOC_POSIX])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSTOWCS])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBTOWC])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKDTEMP])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKOSTEMP])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKOSTEMPS])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKSTEMP])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKSTEMPS])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_MEMALIGN])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_POSIX_OPENPT])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTSNAME])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PTSNAME_R])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PUTENV])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_QSORT_R])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RAND])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RANDOM])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RANDOM_R])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REALLOCARRAY])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REALLOC_GNU])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REALLOC_POSIX])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_REALPATH])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RPMATCH])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SECURE_GETENV])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETENV])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STACK_TRACE])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOD])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOF])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOL])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOLD])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOLL])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOUL])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOULL])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SYSTEM_POSIX])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNLOCKPT])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNSETENV])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCTOMB])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_ECVT], [1])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_FCVT], [1])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_GCVT], [1])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_MKTEMP], [1])
m4/stdlib_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_PUTENV], [1])
m4/stdlib_h.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/stdlib_h.m4:AC_DEFUN([gl_STDLIB_H_DEFAULTS],
m4/stdnoreturn.m4:AC_DEFUN([gl_STDNORETURN_H],
m4/stdnoreturn.m4:        [gl_cv_header_working_stdnoreturn_h],
m4/stdnoreturn.m4:           [gl_cv_header_working_stdnoreturn_h=yes],
m4/stdnoreturn.m4:           [gl_cv_header_working_stdnoreturn_h=no])])
m4/stdnoreturn.m4:      if test $gl_cv_header_working_stdnoreturn_h = yes; then
m4/stpcpy.m4:AC_DEFUN([gl_FUNC_STPCPY],
m4/stpcpy.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/stpcpy.m4:  gl_CHECK_FUNCS_ANDROID([stpcpy], [[#include <string.h>]])
m4/stpcpy.m4:    case "$gl_cv_onwards_func_stpcpy" in
m4/stpcpy.m4:AC_DEFUN([gl_PREREQ_STPCPY], [
m4/stpncpy.m4:AC_DEFUN([gl_FUNC_STPNCPY],
m4/stpncpy.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/stpncpy.m4:  gl_CHECK_FUNCS_ANDROID([stpncpy], [[#include <string.h>]])
m4/stpncpy.m4:    AC_CACHE_CHECK([for working stpncpy], [gl_cv_func_stpncpy], [
m4/stpncpy.m4:        [gl_cv_func_stpncpy=yes],
m4/stpncpy.m4:        [gl_cv_func_stpncpy=no],
m4/stpncpy.m4:],         [gl_cv_func_stpncpy="guessing yes"],
m4/stpncpy.m4:              *-musl* | midipix*) gl_cv_func_stpncpy="guessing yes" ;;
m4/stpncpy.m4:              *)                  gl_cv_func_stpncpy="$gl_cross_guess_normal" ;;
m4/stpncpy.m4:    case "$gl_cv_func_stpncpy" in
m4/stpncpy.m4:    case "$gl_cv_onwards_func_stpncpy" in
m4/stpncpy.m4:AC_DEFUN([gl_PREREQ_STPNCPY], [
m4/strcase.m4:AC_DEFUN([gl_STRCASE],
m4/strcase.m4:  gl_FUNC_STRCASECMP
m4/strcase.m4:  gl_FUNC_STRNCASECMP
m4/strcase.m4:AC_DEFUN([gl_FUNC_STRCASECMP],
m4/strcase.m4:  AC_REQUIRE([gl_STRINGS_H_DEFAULTS])
m4/strcase.m4:AC_DEFUN([gl_FUNC_STRNCASECMP],
m4/strcase.m4:  AC_REQUIRE([gl_STRINGS_H_DEFAULTS])
m4/strcase.m4:AC_DEFUN([gl_PREREQ_STRCASECMP], [
m4/strcase.m4:AC_DEFUN([gl_PREREQ_STRNCASECMP], [
m4/strcasestr.m4:AC_DEFUN([gl_FUNC_STRCASESTR_SIMPLE],
m4/strcasestr.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strcasestr.m4:  AC_REQUIRE([gl_FUNC_MEMCHR])
m4/strcasestr.m4:        [gl_cv_func_strcasestr_works_always],
m4/strcasestr.m4:           [gl_cv_func_strcasestr_works_always=yes],
m4/strcasestr.m4:           [gl_cv_func_strcasestr_works_always=no],
m4/strcasestr.m4:              [gl_cv_func_strcasestr_works_always="guessing yes"],
m4/strcasestr.m4:              [gl_cv_func_strcasestr_works_always="$gl_cross_guess_normal"])
m4/strcasestr.m4:      case "$gl_cv_func_strcasestr_works_always" in
m4/strcasestr.m4:]) # gl_FUNC_STRCASESTR_SIMPLE
m4/strcasestr.m4:AC_DEFUN([gl_FUNC_STRCASESTR],
m4/strcasestr.m4:  AC_REQUIRE([gl_FUNC_STRCASESTR_SIMPLE])
m4/strcasestr.m4:      [gl_cv_func_strcasestr_linear],
m4/strcasestr.m4:        [gl_cv_func_strcasestr_linear=yes], [gl_cv_func_strcasestr_linear=no],
m4/strcasestr.m4:           [gl_cv_func_strcasestr_linear="guessing yes"],
m4/strcasestr.m4:           [gl_cv_func_strcasestr_linear="$gl_cross_guess_normal"])
m4/strcasestr.m4:    case "$gl_cv_func_strcasestr_linear" in
m4/strcasestr.m4:]) # gl_FUNC_STRCASESTR
m4/strcasestr.m4:AC_DEFUN([gl_PREREQ_STRCASESTR], [
m4/strchrnul.m4:AC_DEFUN([gl_FUNC_STRCHRNUL],
m4/strchrnul.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strchrnul.m4:  gl_CHECK_FUNCS_ANDROID([strchrnul], [[#include <string.h>]])
m4/strchrnul.m4:    case "$gl_cv_onwards_func_strchrnul" in
m4/strchrnul.m4:      [gl_cv_func_strchrnul_works],
m4/strchrnul.m4:        [gl_cv_func_strchrnul_works=yes],
m4/strchrnul.m4:        [gl_cv_func_strchrnul_works=no],
m4/strchrnul.m4:           [gl_cv_func_strchrnul_works="guessing yes"],
m4/strchrnul.m4:           [gl_cv_func_strchrnul_works="guessing no"])
m4/strchrnul.m4:    case "$gl_cv_func_strchrnul_works" in
m4/strchrnul.m4:AC_DEFUN([gl_PREREQ_STRCHRNUL], [:])
m4/strcspn.m4:AC_DEFUN([gl_FUNC_STRCSPN],
m4/strcspn.m4:AC_DEFUN([gl_PREREQ_STRCSPN], [:])
m4/strdup.m4:AC_DEFUN([gl_FUNC_STRDUP],
m4/strdup.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strdup.m4:AC_DEFUN([gl_FUNC_STRDUP_POSIX],
m4/strdup.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strdup.m4:  AC_REQUIRE([gl_CHECK_MALLOC_POSIX])
m4/strdup.m4:  if test $gl_cv_func_malloc_posix != yes; then
m4/strdup.m4:AC_DEFUN([gl_PREREQ_STRDUP], [:])
m4/strerror.m4:AC_DEFUN([gl_FUNC_STRERROR],
m4/strerror.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strerror.m4:  AC_REQUIRE([gl_HEADER_ERRNO_H])
m4/strerror.m4:  AC_REQUIRE([gl_FUNC_STRERROR_0])
m4/strerror.m4:  m4_ifdef([gl_FUNC_STRERROR_R_WORKS], [
m4/strerror.m4:    AC_REQUIRE([gl_FUNC_STRERROR_R_WORKS])
m4/strerror.m4:     [gl_cv_func_working_strerror],
m4/strerror.m4:        [gl_cv_func_working_strerror=yes],
m4/strerror.m4:        [gl_cv_func_working_strerror=no],
m4/strerror.m4:           *-gnu* | gnu*)      gl_cv_func_working_strerror="guessing yes" ;;
m4/strerror.m4:           *-musl* | midipix*) gl_cv_func_working_strerror="guessing yes" ;;
m4/strerror.m4:           *)                  gl_cv_func_working_strerror="$gl_cross_guess_normal" ;;
m4/strerror.m4:    case "$gl_cv_func_working_strerror" in
m4/strerror.m4:    m4_ifdef([gl_FUNC_STRERROR_R_WORKS], [
m4/strerror.m4:      case "$gl_cv_func_strerror_r_works" in
m4/strerror.m4:AC_DEFUN([gl_FUNC_STRERROR_0],
m4/strerror.m4:   [gl_cv_func_strerror_0_works],
m4/strerror.m4:      [gl_cv_func_strerror_0_works=yes],
m4/strerror.m4:      [gl_cv_func_strerror_0_works=no],
m4/strerror.m4:         *-gnu* | gnu*)      gl_cv_func_strerror_0_works="guessing yes" ;;
m4/strerror.m4:         *-musl* | midipix*) gl_cv_func_strerror_0_works="guessing yes" ;;
m4/strerror.m4:         mingw* | windows*)  gl_cv_func_strerror_0_works="guessing yes" ;;
m4/strerror.m4:         *)                  gl_cv_func_strerror_0_works="$gl_cross_guess_normal" ;;
m4/strerror.m4:  case "$gl_cv_func_strerror_0_works" in
m4/strerrorname_np.m4:AC_DEFUN([gl_FUNC_STRERRORNAME_NP],
m4/strerrorname_np.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strerrorname_np.m4:  AC_REQUIRE([gl_CHECK_STRERRORNAME_NP])
m4/strerrorname_np.m4:    case "$gl_cv_func_strerrorname_np_works" in
m4/strerrorname_np.m4:# Sets ac_cv_func_strerrorname_np, gl_cv_func_strerrorname_np_works.
m4/strerrorname_np.m4:AC_DEFUN([gl_CHECK_STRERRORNAME_NP],
m4/strerrorname_np.m4:      [gl_cv_func_strerrorname_np_works],
m4/strerrorname_np.m4:         [gl_cv_func_strerrorname_np_works=yes],
m4/strerrorname_np.m4:         [gl_cv_func_strerrorname_np_works=no],
m4/strerrorname_np.m4:              gl_cv_func_strerrorname_np_works="guessing no" ;;
m4/strerrorname_np.m4:              gl_cv_func_strerrorname_np_works="$gl_cross_guess_normal" ;;
m4/strerrorname_np.m4:AC_DEFUN_ONCE([gl_OPTIONAL_STRERRORNAME_NP],
m4/strerrorname_np.m4:  AC_REQUIRE([gl_CHECK_STRERRORNAME_NP])
m4/strerrorname_np.m4:    case "$gl_cv_func_strerrorname_np_works" in
m4/strerror_r.m4:AC_DEFUN([gl_FUNC_STRERROR_R],
m4/strerror_r.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strerror_r.m4:  AC_REQUIRE([gl_FUNC_STRERROR_R_WORKS])
m4/strerror_r.m4:      if test $gl_cv_func_strerror_r_posix_signature = yes; then
m4/strerror_r.m4:        case "$gl_cv_func_strerror_r_works" in
m4/strerror_r.m4:AC_DEFUN([gl_PREREQ_STRERROR_R], [
m4/strerror_r.m4:  gl_CHECK_FUNCS_ANDROID([catgets], [[#include <nl_types.h>]])
m4/strerror_r.m4:AC_DEFUN([gl_FUNC_STRERROR_R_WORKS],
m4/strerror_r.m4:  AC_REQUIRE([gl_HEADER_ERRNO_H])
m4/strerror_r.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/strerror_r.m4:  AC_REQUIRE([gl_FUNC_STRERROR_0])
m4/strerror_r.m4:  gl_CHECK_FUNCS_ANDROID([strerror_r], [[#include <string.h>]])
m4/strerror_r.m4:        [gl_cv_func_strerror_r_posix_signature],
m4/strerror_r.m4:           [gl_cv_func_strerror_r_posix_signature=yes],
m4/strerror_r.m4:           [gl_cv_func_strerror_r_posix_signature=no])
m4/strerror_r.m4:      if test $gl_cv_func_strerror_r_posix_signature = yes; then
m4/strerror_r.m4:          [gl_cv_func_strerror_r_works],
m4/strerror_r.m4:             [gl_cv_func_strerror_r_works=yes],
m4/strerror_r.m4:             [gl_cv_func_strerror_r_works=no],
m4/strerror_r.m4:                aix*)  gl_cv_func_strerror_r_works="guessing no";;
m4/strerror_r.m4:                hpux*) gl_cv_func_strerror_r_works="guessing no";;
m4/strerror_r.m4:                *bsd*)  gl_cv_func_strerror_r_works="guessing no";;
m4/strerror_r.m4:                *)     gl_cv_func_strerror_r_works="guessing yes";;
m4/strerror_r.m4:            [gl_cv_func_strerror_r_works],
m4/strerror_r.m4:               [gl_cv_func_strerror_r_works=yes],
m4/strerror_r.m4:               [gl_cv_func_strerror_r_works=no],
m4/strerror_r.m4:                gl_cv_func_strerror_r_works="$gl_cross_guess_normal"
m4/strerror_r.m4:    case "$gl_cv_onwards_func_strerror_r" in
m4/strfmon_l.m4:AC_DEFUN([gl_FUNC_STRFMON_L],
m4/strfmon_l.m4:  AC_REQUIRE([gl_MONETARY_H_DEFAULTS])
m4/strfmon_l.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/strfmon_l.m4:      [gl_cv_strfmon_l_works],
m4/strfmon_l.m4:             [gl_cv_strfmon_l_works="guessing no"],
m4/strfmon_l.m4:             [gl_cv_strfmon_l_works="guessing yes"])
m4/strfmon_l.m4:         freebsd* | midnightbsd* | cygwin*) gl_cv_strfmon_l_works="guessing no" ;;
m4/strfmon_l.m4:         *) gl_cv_strfmon_l_works="guessing yes" ;;
m4/strfmon_l.m4:           [gl_cv_strfmon_l_works=yes],
m4/strfmon_l.m4:           [gl_cv_strfmon_l_works=no],
m4/strfmon_l.m4:    if test "$gl_cv_strfmon_l_works" = no; then
m4/strfmon_l.m4:AC_DEFUN([gl_PREREQ_STRFMON_L], [
m4/strftime-fixes.m4:AC_DEFUN([gl_FUNC_STRFTIME],
m4/strftime-fixes.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/strings_h.m4:AC_DEFUN_ONCE([gl_STRINGS_H],
m4/strings_h.m4:  AC_REQUIRE([gl_STRINGS_H_DEFAULTS])
m4/strings_h.m4:  gl_CHECK_NEXT_HEADERS([strings.h])
m4/strings_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/strings_h.m4:# gl_STRINGS_MODULE_INDICATOR([modulename])
m4/strings_h.m4:AC_DEFUN([gl_STRINGS_MODULE_INDICATOR],
m4/strings_h.m4:  gl_STRINGS_H_REQUIRE_DEFAULTS
m4/strings_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/strings_h.m4:AC_DEFUN([gl_STRINGS_H_REQUIRE_DEFAULTS],
m4/strings_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FFS])
m4/strings_h.m4:  AC_REQUIRE([gl_STRINGS_H_DEFAULTS])
m4/strings_h.m4:AC_DEFUN([gl_STRINGS_H_DEFAULTS],
m4/string_h.m4:AC_DEFUN_ONCE([gl_STRING_H],
m4/string_h.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/string_h.m4:  gl_NEXT_HEADERS([string.h])
m4/string_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <string.h>
m4/string_h.m4:# gl_STRING_MODULE_INDICATOR([modulename])
m4/string_h.m4:AC_DEFUN([gl_STRING_MODULE_INDICATOR],
m4/string_h.m4:  gl_STRING_H_REQUIRE_DEFAULTS
m4/string_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/string_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/string_h.m4:AC_DEFUN([gl_STRING_H_REQUIRE_DEFAULTS],
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXPLICIT_BZERO])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FFSL])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FFSLL])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MEMCHR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MEMMEM])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MEMPCPY])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MEMRCHR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MEMSET_EXPLICIT])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RAWMEMCHR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STPCPY])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STPNCPY])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRCHRNUL])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRDUP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRNCAT])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRNDUP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRNLEN])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRPBRK])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRSEP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRSTR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRCASESTR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRTOK_R])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSLEN])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSNLEN])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSCHR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSRCHR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSSTR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSCASECMP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSNCASECMP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSPCASECMP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSCASESTR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSCSPN])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSPBRK])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSSPN])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSSEP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSTOK_R])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRERROR])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRERROR_R])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRERRORNAME_NP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SIGABBREV_NP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SIGDESCR_NP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRSIGNAL])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRVERSCMP])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_MEMCCPY], [1])
m4/string_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_STRDUP], [1])
m4/string_h.m4:  gl_STDLIB_H_REQUIRE_DEFAULTS
m4/string_h.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/string_h.m4:AC_DEFUN([gl_STRING_H_DEFAULTS],
m4/strncat.m4:AC_DEFUN_ONCE([gl_FUNC_STRNCAT],
m4/strncat.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strncat.m4:  gl_FUNC_MMAP_ANON
m4/strncat.m4:  AC_CACHE_CHECK([whether strncat works], [gl_cv_func_strncat_works],
m4/strncat.m4:]])], [gl_cv_func_strncat_works=yes], [gl_cv_func_strncat_works=no],
m4/strncat.m4:          solaris*)          gl_cv_func_strncat_works="guessing no" ;;
m4/strncat.m4:          mingw* | windows*) gl_cv_func_strncat_works="guessing yes" ;;
m4/strncat.m4:          *)                 gl_cv_func_strncat_works="guessing yes" ;;
m4/strncat.m4:  case "$gl_cv_func_strncat_works" in
m4/strncat.m4:AC_DEFUN([gl_PREREQ_STRNCAT], [
m4/strndup.m4:AC_DEFUN([gl_FUNC_STRNDUP],
m4/strndup.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strndup.m4:    AC_CACHE_CHECK([for working strndup], [gl_cv_func_strndup_works],
m4/strndup.m4:         [gl_cv_func_strndup_works=yes],
m4/strndup.m4:         [gl_cv_func_strndup_works=no],
m4/strndup.m4:            aix | aix[3-6]*) gl_cv_func_strndup_works="guessing no";;
m4/strndup.m4:            *)               gl_cv_func_strndup_works="guessing yes";;
m4/strndup.m4:    case $gl_cv_func_strndup_works in
m4/strnlen.m4:AC_DEFUN([gl_FUNC_STRNLEN],
m4/strnlen.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strnlen.m4:AC_DEFUN([gl_PREREQ_STRNLEN], [:])
m4/strpbrk.m4:AC_DEFUN([gl_FUNC_STRPBRK],
m4/strpbrk.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strpbrk.m4:AC_DEFUN([gl_PREREQ_STRPBRK], [:])
m4/strptime.m4:AC_DEFUN([gl_FUNC_STRPTIME],
m4/strptime.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/strptime.m4:AC_DEFUN([gl_PREREQ_STRPTIME],
m4/strptime.m4:  AC_REQUIRE([gl_TM_GMTOFF])
m4/strsep.m4:AC_DEFUN([gl_FUNC_STRSEP],
m4/strsep.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strsep.m4:AC_DEFUN([gl_PREREQ_STRSEP], [:])
m4/strsignal.m4:AC_DEFUN([gl_FUNC_STRSIGNAL],
m4/strsignal.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strsignal.m4:      [gl_cv_func_working_strsignal],
m4/strsignal.m4:         [gl_cv_func_working_strsignal=yes],
m4/strsignal.m4:         [gl_cv_func_working_strsignal=no],
m4/strsignal.m4:            solaris* | aix*) gl_cv_func_working_strsignal=no;;
m4/strsignal.m4:            *)               gl_cv_func_working_strsignal="guessing yes";;
m4/strsignal.m4:    if test "$gl_cv_func_working_strsignal" = no; then
m4/strsignal.m4:AC_DEFUN([gl_PREREQ_STRSIGNAL], [
m4/strstr.m4:AC_DEFUN([gl_FUNC_STRSTR_SIMPLE],
m4/strstr.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strstr.m4:  AC_REQUIRE([gl_FUNC_MEMCHR])
m4/strstr.m4:      [gl_cv_func_strstr_works_always],
m4/strstr.m4:         [gl_cv_func_strstr_works_always=yes],
m4/strstr.m4:         [gl_cv_func_strstr_works_always=no],
m4/strstr.m4:            [gl_cv_func_strstr_works_always="guessing yes"],
m4/strstr.m4:            [gl_cv_func_strstr_works_always="$gl_cross_guess_normal"])
m4/strstr.m4:    case "$gl_cv_func_strstr_works_always" in
m4/strstr.m4:]) # gl_FUNC_STRSTR_SIMPLE
m4/strstr.m4:AC_DEFUN([gl_FUNC_STRSTR],
m4/strstr.m4:  AC_REQUIRE([gl_FUNC_STRSTR_SIMPLE])
m4/strstr.m4:      [gl_cv_func_strstr_linear],
m4/strstr.m4:        [gl_cv_func_strstr_linear=yes], [gl_cv_func_strstr_linear=no],
m4/strstr.m4:           [gl_cv_func_strstr_linear="guessing yes"],
m4/strstr.m4:           [gl_cv_func_strstr_linear="$gl_cross_guess_normal"])
m4/strstr.m4:    case "$gl_cv_func_strstr_linear" in
m4/strstr.m4:]) # gl_FUNC_STRSTR
m4/strtod-obsolete.m4:AC_DEFUN([gl_FUNC_STRTOD_OBSOLETE],
m4/strtod.m4:AC_DEFUN([gl_FUNC_STRTOD],
m4/strtod.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/strtod.m4:  m4_ifdef([gl_FUNC_STRTOD_OBSOLETE], [
m4/strtod.m4:    AC_CACHE_CHECK([whether strtod obeys C99], [gl_cv_func_strtod_works],
m4/strtod.m4:        [gl_cv_func_strtod_works=yes],
m4/strtod.m4:           gl_cv_func_strtod_works="no (underflow problem)"
m4/strtod.m4:             gl_cv_func_strtod_works="no (gradual underflow problem)"
m4/strtod.m4:             gl_cv_func_strtod_works=no
m4/strtod.m4:           [gl_cv_func_strtod_works="guessing yes"],
m4/strtod.m4:              *-musl* | midipix*) gl_cv_func_strtod_works="guessing yes" ;;
m4/strtod.m4:              cygwin*)            gl_cv_func_strtod_works="guessing no (gradual underflow problem)" ;;
m4/strtod.m4:              mingw* | windows*)  gl_cv_func_strtod_works="guessing yes" ;;
m4/strtod.m4:              *)                  gl_cv_func_strtod_works="$gl_cross_guess_normal" ;;
m4/strtod.m4:    case "$gl_cv_func_strtod_works" in
m4/strtod.m4:        case "$gl_cv_func_strtod_works" in
m4/strtod.m4:AC_DEFUN([gl_PREREQ_STRTOD], [
m4/strtod.m4:  AC_REQUIRE([gl_CHECK_LDEXP_NO_LIBM])
m4/strtod.m4:  if test $gl_cv_func_ldexp_no_libm = yes; then
m4/strtod.m4:  gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/strtof.m4:AC_DEFUN([gl_FUNC_STRTOF],
m4/strtof.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/strtof.m4:    AC_CACHE_CHECK([whether strtof obeys C99], [gl_cv_func_strtof_works],
m4/strtof.m4:        [gl_cv_func_strtof_works=yes],
m4/strtof.m4:           gl_cv_func_strtof_works="no (underflow problem)"
m4/strtof.m4:             gl_cv_func_strtof_works="no (gradual underflow problem)"
m4/strtof.m4:             gl_cv_func_strtof_works=no
m4/strtof.m4:           [gl_cv_func_strtof_works="guessing yes"],
m4/strtof.m4:              *-musl* | midipix*) gl_cv_func_strtof_works="guessing yes" ;;
m4/strtof.m4:              cygwin*)            gl_cv_func_strtof_works="guessing no (underflow problem)" ;;
m4/strtof.m4:              mingw* | windows*)  gl_cv_func_strtof_works="guessing no (underflow problem)" ;;
m4/strtof.m4:              *)                  gl_cv_func_strtof_works="$gl_cross_guess_normal" ;;
m4/strtof.m4:    case "$gl_cv_func_strtof_works" in
m4/strtof.m4:        case "$gl_cv_func_strtof_works" in
m4/strtof.m4:AC_DEFUN([gl_PREREQ_STRTOF], [
m4/strtof.m4:  AC_REQUIRE([gl_CHECK_LDEXPF_NO_LIBM])
m4/strtof.m4:  if test $gl_cv_func_ldexpf_no_libm = yes; then
m4/strtof.m4:  gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/strtoimax.m4:AC_DEFUN([gl_FUNC_STRTOIMAX],
m4/strtoimax.m4:  AC_REQUIRE([gl_INTTYPES_H_DEFAULTS])
m4/strtoimax.m4:    AC_CACHE_CHECK([whether strtoimax works], [gl_cv_func_strtoimax],
m4/strtoimax.m4:         [gl_cv_func_strtoimax=yes],
m4/strtoimax.m4:         [gl_cv_func_strtoimax=no],
m4/strtoimax.m4:            aix5*)             gl_cv_func_strtoimax="guessing no" ;;
m4/strtoimax.m4:            mingw* | windows*) gl_cv_func_strtoimax="guessing yes" ;;
m4/strtoimax.m4:            *)                 gl_cv_func_strtoimax="guessing yes" ;;
m4/strtoimax.m4:    case "$gl_cv_func_strtoimax" in
m4/strtoimax.m4:AC_DEFUN([gl_PREREQ_STRTOIMAX], [
m4/strtok_r.m4:AC_DEFUN([gl_FUNC_STRTOK_R],
m4/strtok_r.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strtok_r.m4:    AC_CACHE_CHECK([whether strtok_r works], [gl_cv_func_strtok_r_works],
m4/strtok_r.m4:         [gl_cv_func_strtok_r_works=yes],
m4/strtok_r.m4:         [gl_cv_func_strtok_r_works=no],
m4/strtok_r.m4:            *-gnu* | gnu*)     gl_cv_func_strtok_r_works="guessing no" ;;
m4/strtok_r.m4:            mingw* | windows*) gl_cv_func_strtok_r_works="guessing yes" ;;
m4/strtok_r.m4:            *)                 gl_cv_func_strtok_r_works="guessing yes" ;;
m4/strtok_r.m4:    case "$gl_cv_func_strtok_r_works" in
m4/strtok_r.m4:AC_DEFUN([gl_PREREQ_STRTOK_R], [
m4/strtol.m4:AC_DEFUN([gl_FUNC_STRTOL],
m4/strtol.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/strtol.m4:      [gl_cv_func_strtol_works],
m4/strtol.m4:         [gl_cv_func_strtol_works=yes],
m4/strtol.m4:         [gl_cv_func_strtol_works=no],
m4/strtol.m4:            mingw* | windows*)  gl_cv_func_strtol_works="guessing no" ;;
m4/strtol.m4:            *-gnu* | gnu*)      gl_cv_func_strtol_works="guessing no" ;;
m4/strtol.m4:            *-musl* | midipix*) gl_cv_func_strtol_works="guessing no" ;;
m4/strtol.m4:            *)                  gl_cv_func_strtol_works="$gl_cross_guess_normal" ;;
m4/strtol.m4:    case "$gl_cv_func_strtol_works" in
m4/strtold.m4:AC_DEFUN([gl_FUNC_STRTOLD],
m4/strtold.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/strtold.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/strtold.m4:    AC_CACHE_CHECK([whether strtold obeys POSIX], [gl_cv_func_strtold_works],
m4/strtold.m4:        [gl_cv_func_strtold_works=yes],
m4/strtold.m4:           gl_cv_func_strtold_works="no (underflow problem)"
m4/strtold.m4:             gl_cv_func_strtold_works="no (gradual underflow problem)"
m4/strtold.m4:             gl_cv_func_strtold_works=no
m4/strtold.m4:           [gl_cv_func_strtold_works="guessing yes"],
m4/strtold.m4:              *-musl* | midipix*) gl_cv_func_strtold_works="guessing yes" ;;
m4/strtold.m4:              cygwin*)            gl_cv_func_strtold_works="guessing no (underflow problem)" ;;
m4/strtold.m4:              mingw* | windows*)  gl_cv_func_strtold_works="guessing no (gradual underflow problem)" ;;
m4/strtold.m4:              *)                  gl_cv_func_strtold_works="$gl_cross_guess_normal" ;;
m4/strtold.m4:    case "$gl_cv_func_strtold_works" in
m4/strtold.m4:        case "$gl_cv_func_strtold_works" in
m4/strtold.m4:AC_DEFUN([gl_PREREQ_STRTOLD], [
m4/strtold.m4:  AC_REQUIRE([gl_CHECK_LDEXPL_NO_LIBM])
m4/strtold.m4:  if test $gl_cv_func_ldexpl_no_libm = yes; then
m4/strtold.m4:  gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/strtoll.m4:AC_DEFUN([gl_FUNC_STRTOLL],
m4/strtoll.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/strtoll.m4:      [gl_cv_func_strtoll_works],
m4/strtoll.m4:         [gl_cv_func_strtoll_works=yes],
m4/strtoll.m4:         [gl_cv_func_strtoll_works=no],
m4/strtoll.m4:            mingw* | windows*)  gl_cv_func_strtoll_works="guessing no" ;;
m4/strtoll.m4:            *-gnu* | gnu*)      gl_cv_func_strtoll_works="guessing no" ;;
m4/strtoll.m4:            *-musl* | midipix*) gl_cv_func_strtoll_works="guessing no" ;;
m4/strtoll.m4:            *)                  gl_cv_func_strtoll_works="$gl_cross_guess_normal" ;;
m4/strtoll.m4:    case "$gl_cv_func_strtoll_works" in
m4/strtoll.m4:AC_DEFUN([gl_PREREQ_STRTOLL], [
m4/strtoul.m4:AC_DEFUN([gl_FUNC_STRTOUL],
m4/strtoul.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/strtoul.m4:      [gl_cv_func_strtoul_works],
m4/strtoul.m4:         [gl_cv_func_strtoul_works=yes],
m4/strtoul.m4:         [gl_cv_func_strtoul_works=no],
m4/strtoul.m4:            mingw* | windows*)  gl_cv_func_strtoul_works="guessing no" ;;
m4/strtoul.m4:            *-gnu* | gnu*)      gl_cv_func_strtoul_works="guessing no" ;;
m4/strtoul.m4:            *-musl* | midipix*) gl_cv_func_strtoul_works="guessing no" ;;
m4/strtoul.m4:            *)                  gl_cv_func_strtoul_works="$gl_cross_guess_normal" ;;
m4/strtoul.m4:    case "$gl_cv_func_strtoul_works" in
m4/strtoull.m4:AC_DEFUN([gl_FUNC_STRTOULL],
m4/strtoull.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/strtoull.m4:      [gl_cv_func_strtoull_works],
m4/strtoull.m4:         [gl_cv_func_strtoull_works=yes],
m4/strtoull.m4:         [gl_cv_func_strtoull_works=no],
m4/strtoull.m4:            mingw* | windows*)  gl_cv_func_strtoull_works="guessing no" ;;
m4/strtoull.m4:            *-gnu* | gnu*)      gl_cv_func_strtoull_works="guessing no" ;;
m4/strtoull.m4:            *-musl* | midipix*) gl_cv_func_strtoull_works="guessing no" ;;
m4/strtoull.m4:            *)                  gl_cv_func_strtoull_works="$gl_cross_guess_normal" ;;
m4/strtoull.m4:    case "$gl_cv_func_strtoull_works" in
m4/strtoull.m4:AC_DEFUN([gl_PREREQ_STRTOULL], [
m4/strtoumax.m4:AC_DEFUN([gl_FUNC_STRTOUMAX],
m4/strtoumax.m4:  AC_REQUIRE([gl_INTTYPES_H_DEFAULTS])
m4/strtoumax.m4:AC_DEFUN([gl_PREREQ_STRTOUMAX], [
m4/strverscmp.m4:AC_DEFUN([gl_FUNC_STRVERSCMP],
m4/strverscmp.m4:  AC_REQUIRE([gl_STRING_H_DEFAULTS])
m4/strverscmp.m4:      [gl_cv_func_strverscmp_works],
m4/strverscmp.m4:         [gl_cv_func_strverscmp_works=yes],
m4/strverscmp.m4:         [gl_cv_func_strverscmp_works=no],
m4/strverscmp.m4:            *-gnu* | gnu*)      gl_cv_func_strverscmp_works="guessing yes" ;;
m4/strverscmp.m4:            *-musl* | midipix*) gl_cv_func_strverscmp_works="guessing no" ;;
m4/strverscmp.m4:            cygwin*)            gl_cv_func_strverscmp_works="guessing no" ;;
m4/strverscmp.m4:            *)                  gl_cv_func_strverscmp_works="$gl_cross_guess_normal" ;;
m4/strverscmp.m4:    case "$gl_cv_func_strverscmp_works" in
m4/strverscmp.m4:AC_DEFUN([gl_PREREQ_STRVERSCMP], [
m4/supersede.m4:AC_DEFUN([gl_SUPERSEDE],
m4/symlink.m4:AC_DEFUN([gl_FUNC_SYMLINK],
m4/symlink.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/symlink.m4:      [gl_cv_func_symlink_works],
m4/symlink.m4:         [gl_cv_func_symlink_works=yes], [gl_cv_func_symlink_works=no],
m4/symlink.m4:            linux-* | linux) gl_cv_func_symlink_works="guessing yes" ;;
m4/symlink.m4:            midipix*)        gl_cv_func_symlink_works="guessing yes" ;;
m4/symlink.m4:            *-gnu* | gnu*)   gl_cv_func_symlink_works="guessing yes" ;;
m4/symlink.m4:            *)               gl_cv_func_symlink_works="$gl_cross_guess_normal" ;;
m4/symlink.m4:    case "$gl_cv_func_symlink_works" in
m4/symlinkat.m4:AC_DEFUN([gl_FUNC_SYMLINKAT],
m4/symlinkat.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/symlinkat.m4:  AC_REQUIRE([gl_FUNC_OPENAT])
m4/symlinkat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/symlinkat.m4:  gl_CHECK_FUNCS_ANDROID([symlinkat], [[#include <unistd.h>]])
m4/symlinkat.m4:    case "$gl_cv_onwards_func_symlinkat" in
m4/symlinkat.m4:      [gl_cv_func_symlinkat_works],
m4/symlinkat.m4:         [gl_cv_func_symlinkat_works=yes],
m4/symlinkat.m4:         [gl_cv_func_symlinkat_works=no],
m4/symlinkat.m4:            linux-* | linux) gl_cv_func_symlinkat_works="guessing yes" ;;
m4/symlinkat.m4:            midipix*)        gl_cv_func_symlinkat_works="guessing yes" ;;
m4/symlinkat.m4:            *-gnu* | gnu*)   gl_cv_func_symlinkat_works="guessing yes" ;;
m4/symlinkat.m4:            *)               gl_cv_func_symlinkat_works="$gl_cross_guess_normal" ;;
m4/symlinkat.m4:    case "$gl_cv_func_symlinkat_works" in
m4/sysexits.m4:AC_DEFUN([gl_SYSEXITS],
m4/sysexits.m4:    gl_CHECK_NEXT_HEADERS([sysexits.h])
m4/systemd.m4:AC_DEFUN([gl_SYSTEMD_CHOICE],
m4/sys_cdefs_h.m4:AC_DEFUN_ONCE([gl_CHECK_HEADER_SYS_CDEFS_H],
m4/sys_cdefs_h.m4:     [gl_cv_header_sys_cdefs_h],
m4/sys_cdefs_h.m4:        [gl_cv_header_sys_cdefs_h=yes],
m4/sys_cdefs_h.m4:        [gl_cv_header_sys_cdefs_h=no])])
m4/sys_cdefs_h.m4:   if test "$gl_cv_header_sys_cdefs_h" = yes; then
m4/sys_file_h.m4:AC_DEFUN_ONCE([gl_SYS_FILE_H],
m4/sys_file_h.m4:  AC_REQUIRE([gl_SYS_FILE_H_DEFAULTS])
m4/sys_file_h.m4:  gl_CHECK_NEXT_HEADERS([sys/file.h])
m4/sys_file_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <sys/file.h>
m4/sys_file_h.m4:# gl_SYS_FILE_MODULE_INDICATOR([modulename])
m4/sys_file_h.m4:AC_DEFUN([gl_SYS_FILE_MODULE_INDICATOR],
m4/sys_file_h.m4:  gl_SYS_FILE_H_REQUIRE_DEFAULTS
m4/sys_file_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_file_h.m4:AC_DEFUN([gl_SYS_FILE_H_REQUIRE_DEFAULTS],
m4/sys_file_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FLOCK])
m4/sys_file_h.m4:  AC_REQUIRE([gl_SYS_FILE_H_DEFAULTS])
m4/sys_file_h.m4:AC_DEFUN([gl_SYS_FILE_H_DEFAULTS],
m4/sys_ioctl_h.m4:AC_DEFUN_ONCE([gl_SYS_IOCTL_H],
m4/sys_ioctl_h.m4:  AC_REQUIRE([gl_SYS_IOCTL_H_DEFAULTS])
m4/sys_ioctl_h.m4:      [gl_cv_decl_ioctl_in_sys_ioctl_h],
m4/sys_ioctl_h.m4:         [gl_cv_decl_ioctl_in_sys_ioctl_h=yes],
m4/sys_ioctl_h.m4:         [gl_cv_decl_ioctl_in_sys_ioctl_h=no])
m4/sys_ioctl_h.m4:  gl_CHECK_NEXT_HEADERS([sys/ioctl.h])
m4/sys_ioctl_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <sys/ioctl.h>
m4/sys_ioctl_h.m4:# gl_SYS_IOCTL_MODULE_INDICATOR([modulename])
m4/sys_ioctl_h.m4:AC_DEFUN([gl_SYS_IOCTL_MODULE_INDICATOR],
m4/sys_ioctl_h.m4:  gl_SYS_IOCTL_H_REQUIRE_DEFAULTS
m4/sys_ioctl_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_ioctl_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_ioctl_h.m4:AC_DEFUN([gl_SYS_IOCTL_H_REQUIRE_DEFAULTS],
m4/sys_ioctl_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_IOCTL])
m4/sys_ioctl_h.m4:  AC_REQUIRE([gl_SYS_IOCTL_H_DEFAULTS])
m4/sys_ioctl_h.m4:AC_DEFUN([gl_SYS_IOCTL_H_DEFAULTS],
m4/sys_msg_h.m4:AC_DEFUN_ONCE([gl_SYS_MSG_H],
m4/sys_msg_h.m4:    gl_CHECK_NEXT_HEADERS([sys/msg.h])
m4/sys_random_h.m4:AC_DEFUN_ONCE([gl_SYS_RANDOM_H],
m4/sys_random_h.m4:  AC_REQUIRE([gl_SYS_RANDOM_H_DEFAULTS])
m4/sys_random_h.m4:  gl_CHECK_NEXT_HEADERS([sys/random.h])
m4/sys_random_h.m4:  m4_ifdef([gl_UNISTD_H_DEFAULTS], [AC_REQUIRE([gl_UNISTD_H_DEFAULTS])])
m4/sys_random_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/sys_random_h.m4:# gl_SYS_RANDOM_MODULE_INDICATOR([modulename])
m4/sys_random_h.m4:AC_DEFUN([gl_SYS_RANDOM_MODULE_INDICATOR],
m4/sys_random_h.m4:  gl_SYS_RANDOM_H_REQUIRE_DEFAULTS
m4/sys_random_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_random_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_random_h.m4:AC_DEFUN([gl_SYS_RANDOM_H_REQUIRE_DEFAULTS],
m4/sys_random_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETRANDOM])
m4/sys_random_h.m4:  AC_REQUIRE([gl_SYS_RANDOM_H_DEFAULTS])
m4/sys_random_h.m4:AC_DEFUN([gl_SYS_RANDOM_H_DEFAULTS],
m4/sys_resource_h.m4:AC_DEFUN_ONCE([gl_SYS_RESOURCE_H],
m4/sys_resource_h.m4:  AC_REQUIRE([gl_SYS_RESOURCE_H_DEFAULTS])
m4/sys_resource_h.m4:  gl_CHECK_NEXT_HEADERS([sys/resource.h])
m4/sys_resource_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/sys_resource_h.m4:# gl_SYS_RESOURCE_MODULE_INDICATOR([modulename])
m4/sys_resource_h.m4:AC_DEFUN([gl_SYS_RESOURCE_MODULE_INDICATOR],
m4/sys_resource_h.m4:  gl_SYS_RESOURCE_H_REQUIRE_DEFAULTS
m4/sys_resource_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_resource_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_resource_h.m4:AC_DEFUN([gl_SYS_RESOURCE_H_REQUIRE_DEFAULTS],
m4/sys_resource_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETRUSAGE])
m4/sys_resource_h.m4:  AC_REQUIRE([gl_SYS_RESOURCE_H_DEFAULTS])
m4/sys_resource_h.m4:AC_DEFUN([gl_SYS_RESOURCE_H_DEFAULTS],
m4/sys_select_h.m4:AC_DEFUN_ONCE([gl_SYS_SELECT_H],
m4/sys_select_h.m4:  AC_REQUIRE([gl_SYS_SELECT_H_DEFAULTS])
m4/sys_select_h.m4:    [gl_cv_header_sys_select_h_selfcontained],
m4/sys_select_h.m4:        [gl_cv_header_sys_select_h_selfcontained=yes],
m4/sys_select_h.m4:        [gl_cv_header_sys_select_h_selfcontained=no])
m4/sys_select_h.m4:      if test $gl_cv_header_sys_select_h_selfcontained = yes; then
m4/sys_select_h.m4:             [gl_cv_header_sys_select_h_selfcontained=no])
m4/sys_select_h.m4:  gl_CHECK_NEXT_HEADERS([sys/select.h])
m4/sys_select_h.m4:  gl_PREREQ_SYS_H_WINSOCK2
m4/sys_select_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/sys_select_h.m4:# gl_SYS_SELECT_MODULE_INDICATOR([modulename])
m4/sys_select_h.m4:AC_DEFUN([gl_SYS_SELECT_MODULE_INDICATOR],
m4/sys_select_h.m4:  gl_SYS_SELECT_H_REQUIRE_DEFAULTS
m4/sys_select_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_select_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_select_h.m4:AC_DEFUN([gl_SYS_SELECT_H_REQUIRE_DEFAULTS],
m4/sys_select_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PSELECT])
m4/sys_select_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SELECT])
m4/sys_select_h.m4:  AC_REQUIRE([gl_SYS_SELECT_H_DEFAULTS])
m4/sys_select_h.m4:AC_DEFUN([gl_SYS_SELECT_H_DEFAULTS],
m4/sys_sem_h.m4:AC_DEFUN_ONCE([gl_SYS_SEM_H],
m4/sys_sem_h.m4:    gl_CHECK_NEXT_HEADERS([sys/sem.h])
m4/sys_shm_h.m4:AC_DEFUN_ONCE([gl_SYS_SHM_H],
m4/sys_shm_h.m4:    gl_CHECK_NEXT_HEADERS([sys/shm.h])
m4/sys_socket_h.m4:AC_DEFUN_ONCE([gl_SYS_SOCKET_H],
m4/sys_socket_h.m4:  AC_REQUIRE([gl_SYS_SOCKET_H_DEFAULTS])
m4/sys_socket_h.m4:    [gl_cv_header_sys_socket_h_selfcontained],
m4/sys_socket_h.m4:        [gl_cv_header_sys_socket_h_selfcontained=yes],
m4/sys_socket_h.m4:        [gl_cv_header_sys_socket_h_selfcontained=no])
m4/sys_socket_h.m4:  if test $gl_cv_header_sys_socket_h_selfcontained = yes; then
m4/sys_socket_h.m4:        [gl_cv_header_sys_socket_h_shut],
m4/sys_socket_h.m4:            [gl_cv_header_sys_socket_h_shut=yes],
m4/sys_socket_h.m4:            [gl_cv_header_sys_socket_h_shut=no])
m4/sys_socket_h.m4:      if test $gl_cv_header_sys_socket_h_shut = no; then
m4/sys_socket_h.m4:  gl_PREREQ_SYS_H_SOCKET
m4/sys_socket_h.m4:  gl_PREREQ_SYS_H_WINSOCK2
m4/sys_socket_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/sys_socket_h.m4:AC_DEFUN([gl_PREREQ_SYS_H_SOCKET],
m4/sys_socket_h.m4:  AC_REQUIRE([gl_CHECK_SOCKET_HEADERS])
m4/sys_socket_h.m4:  gl_CHECK_NEXT_HEADERS([sys/socket.h])
m4/sys_socket_h.m4:  gl_PREREQ_SYS_H_WS2TCPIP
m4/sys_socket_h.m4:AC_DEFUN([gl_PREREQ_SYS_H_WINSOCK2],
m4/sys_socket_h.m4:  m4_ifdef([gl_UNISTD_H_DEFAULTS], [AC_REQUIRE([gl_UNISTD_H_DEFAULTS])])
m4/sys_socket_h.m4:  m4_ifdef([gl_SYS_IOCTL_H_DEFAULTS], [AC_REQUIRE([gl_SYS_IOCTL_H_DEFAULTS])])
m4/sys_socket_h.m4:AC_DEFUN([gl_PREREQ_SYS_H_WS2TCPIP],
m4/sys_socket_h.m4:  AC_REQUIRE([gl_CHECK_SOCKET_HEADERS])
m4/sys_socket_h.m4:# gl_SYS_SOCKET_MODULE_INDICATOR([modulename])
m4/sys_socket_h.m4:AC_DEFUN([gl_SYS_SOCKET_MODULE_INDICATOR],
m4/sys_socket_h.m4:  gl_SYS_SOCKET_H_REQUIRE_DEFAULTS
m4/sys_socket_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_socket_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_socket_h.m4:AC_DEFUN([gl_SYS_SOCKET_H_REQUIRE_DEFAULTS],
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SOCKET])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CONNECT])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ACCEPT])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_BIND])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPEERNAME])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETSOCKNAME])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETSOCKOPT])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LISTEN])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RECV])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SEND])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RECVFROM])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SENDTO])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETSOCKOPT])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SHUTDOWN])
m4/sys_socket_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ACCEPT4])
m4/sys_socket_h.m4:  AC_REQUIRE([gl_SYS_SOCKET_H_DEFAULTS])
m4/sys_socket_h.m4:AC_DEFUN([gl_SYS_SOCKET_H_DEFAULTS],
m4/sys_stat_h.m4:AC_DEFUN_ONCE([gl_SYS_STAT_H],
m4/sys_stat_h.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/sys_stat_h.m4:  gl_CHECK_NEXT_HEADERS([sys/stat.h])
m4/sys_stat_h.m4:  m4_ifdef([gl_WINDOWS_STAT_TIMESPEC], [
m4/sys_stat_h.m4:    AC_REQUIRE([gl_WINDOWS_STAT_TIMESPEC])
m4/sys_stat_h.m4:  m4_ifdef([gl_LARGEFILE], [
m4/sys_stat_h.m4:    AC_REQUIRE([gl_LARGEFILE])
m4/sys_stat_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <sys/stat.h>
m4/sys_stat_h.m4:# gl_SYS_STAT_MODULE_INDICATOR([modulename])
m4/sys_stat_h.m4:AC_DEFUN([gl_SYS_STAT_MODULE_INDICATOR],
m4/sys_stat_h.m4:  gl_SYS_STAT_H_REQUIRE_DEFAULTS
m4/sys_stat_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_stat_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_stat_h.m4:AC_DEFUN([gl_SYS_STAT_H_REQUIRE_DEFAULTS],
m4/sys_stat_h.m4:    gl_UNISTD_H_REQUIRE_DEFAULTS dnl for REPLACE_FCHDIR
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CHMOD])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FCHMODAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FSTAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FSTATAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FUTIMENS])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETUMASK])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LCHMOD])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LSTAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKDIR])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKDIRAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKFIFO])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKFIFOAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKNOD])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKNODAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UTIMENSAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_OVERRIDES_STRUCT_STAT])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_CHMOD], [1])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_MKDIR], [1])
m4/sys_stat_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_UMASK], [1])
m4/sys_stat_h.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/sys_stat_h.m4:AC_DEFUN([gl_SYS_STAT_H_DEFAULTS],
m4/sys_times_h.m4:AC_DEFUN_ONCE([gl_SYS_TIMES_H],
m4/sys_times_h.m4:  AC_REQUIRE([gl_SYS_TIMES_H_DEFAULTS])
m4/sys_times_h.m4:  gl_CHECK_NEXT_HEADERS([sys/times.h])
m4/sys_times_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/sys_times_h.m4:# gl_SYS_TIMES_MODULE_INDICATOR([modulename])
m4/sys_times_h.m4:AC_DEFUN([gl_SYS_TIMES_MODULE_INDICATOR],
m4/sys_times_h.m4:  gl_SYS_TIMES_H_REQUIRE_DEFAULTS
m4/sys_times_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_times_h.m4:AC_DEFUN([gl_SYS_TIMES_H_REQUIRE_DEFAULTS],
m4/sys_times_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TIMES])
m4/sys_times_h.m4:  AC_REQUIRE([gl_SYS_TIMES_H_DEFAULTS])
m4/sys_times_h.m4:AC_DEFUN([gl_SYS_TIMES_H_DEFAULTS],
m4/sys_time_h.m4:AC_DEFUN_ONCE([gl_SYS_TIME_H],
m4/sys_time_h.m4:  AC_REQUIRE([gl_SYS_TIME_H_DEFAULTS])
m4/sys_time_h.m4:  gl_CHECK_NEXT_HEADERS([sys/time.h])
m4/sys_time_h.m4:  gl_PREREQ_SYS_H_WINSOCK2
m4/sys_time_h.m4:  AC_CACHE_CHECK([for struct timeval], [gl_cv_sys_struct_timeval],
m4/sys_time_h.m4:       [gl_cv_sys_struct_timeval=yes],
m4/sys_time_h.m4:       [gl_cv_sys_struct_timeval=no])
m4/sys_time_h.m4:  if test $gl_cv_sys_struct_timeval != yes; then
m4/sys_time_h.m4:      [gl_cv_sys_struct_timeval_tv_sec],
m4/sys_time_h.m4:         [gl_cv_sys_struct_timeval_tv_sec=yes],
m4/sys_time_h.m4:         [gl_cv_sys_struct_timeval_tv_sec=no])
m4/sys_time_h.m4:    if test $gl_cv_sys_struct_timeval_tv_sec != yes; then
m4/sys_time_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/sys_time_h.m4:# gl_SYS_TIME_MODULE_INDICATOR([modulename])
m4/sys_time_h.m4:AC_DEFUN([gl_SYS_TIME_MODULE_INDICATOR],
m4/sys_time_h.m4:  gl_SYS_TIME_H_REQUIRE_DEFAULTS
m4/sys_time_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_time_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_time_h.m4:AC_DEFUN([gl_SYS_TIME_H_REQUIRE_DEFAULTS],
m4/sys_time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETTIMEOFDAY])
m4/sys_time_h.m4:  AC_REQUIRE([gl_SYS_TIME_H_DEFAULTS])
m4/sys_time_h.m4:AC_DEFUN([gl_SYS_TIME_H_DEFAULTS],
m4/sys_types_h.m4:AC_DEFUN_ONCE([gl_SYS_TYPES_H],
m4/sys_types_h.m4:  AC_REQUIRE([gl_SYS_TYPES_H_DEFAULTS])
m4/sys_types_h.m4:  gl_NEXT_HEADERS([sys/types.h])
m4/sys_types_h.m4:  AC_REQUIRE([gl_TYPE_OFF_T])
m4/sys_types_h.m4:  AC_REQUIRE([gl_TYPE_OFF64_T])
m4/sys_types_h.m4:  m4_ifdef([gl_WINDOWS_STAT_INODES], [
m4/sys_types_h.m4:    AC_REQUIRE([gl_WINDOWS_STAT_INODES])
m4/sys_types_h.m4:AC_DEFUN([gl_SYS_TYPES_H_REQUIRE_DEFAULTS],
m4/sys_types_h.m4:  AC_REQUIRE([gl_SYS_TYPES_H_DEFAULTS])
m4/sys_types_h.m4:AC_DEFUN([gl_SYS_TYPES_H_DEFAULTS],
m4/sys_uio_h.m4:AC_DEFUN_ONCE([gl_SYS_UIO_H],
m4/sys_uio_h.m4:  AC_REQUIRE([gl_SYS_UIO_H_DEFAULTS])
m4/sys_uio_h.m4:  gl_CHECK_NEXT_HEADERS([sys/uio.h])
m4/sys_uio_h.m4:# gl_SYS_UIO_MODULE_INDICATOR([modulename])
m4/sys_uio_h.m4:AC_DEFUN([gl_SYS_UIO_MODULE_INDICATOR],
m4/sys_uio_h.m4:  gl_SYS_UIO_H_REQUIRE_DEFAULTS
m4/sys_uio_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_uio_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_uio_h.m4:AC_DEFUN([gl_SYS_UIO_H_REQUIRE_DEFAULTS],
m4/sys_uio_h.m4:  AC_REQUIRE([gl_SYS_UIO_H_DEFAULTS])
m4/sys_uio_h.m4:AC_DEFUN([gl_SYS_UIO_H_DEFAULTS],
m4/sys_un_h.m4:AC_DEFUN_ONCE([gl_SYS_UN_H],
m4/sys_un_h.m4:  AC_REQUIRE([gl_SOCKET_FAMILY_UNIX])
m4/sys_un_h.m4:  if test $gl_cv_socket_unix = yes; then
m4/sys_un_h.m4:    gl_CHECK_NEXT_HEADERS([sys/un.h])
m4/sys_un_h.m4:    dnl Checked in gl_SOCKET_FAMILY_UNIX.
m4/sys_utsname_h.m4:AC_DEFUN_ONCE([gl_SYS_UTSNAME_H],
m4/sys_utsname_h.m4:  AC_REQUIRE([gl_SYS_UTSNAME_H_DEFAULTS])
m4/sys_utsname_h.m4:  gl_CHECK_NEXT_HEADERS([sys/utsname.h])
m4/sys_utsname_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/sys_utsname_h.m4:# gl_SYS_UTSNAME_MODULE_INDICATOR([modulename])
m4/sys_utsname_h.m4:AC_DEFUN([gl_SYS_UTSNAME_MODULE_INDICATOR],
m4/sys_utsname_h.m4:  gl_SYS_UTSNAME_H_REQUIRE_DEFAULTS
m4/sys_utsname_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_utsname_h.m4:AC_DEFUN([gl_SYS_UTSNAME_H_REQUIRE_DEFAULTS],
m4/sys_utsname_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNAME])
m4/sys_utsname_h.m4:  AC_REQUIRE([gl_SYS_UTSNAME_H_DEFAULTS])
m4/sys_utsname_h.m4:AC_DEFUN([gl_SYS_UTSNAME_H_DEFAULTS],
m4/sys_wait_h.m4:AC_DEFUN_ONCE([gl_SYS_WAIT_H],
m4/sys_wait_h.m4:  AC_REQUIRE([gl_SYS_WAIT_H_DEFAULTS])
m4/sys_wait_h.m4:  gl_CHECK_NEXT_HEADERS([sys/wait.h])
m4/sys_wait_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <sys/wait.h>]],
m4/sys_wait_h.m4:# gl_SYS_WAIT_MODULE_INDICATOR([modulename])
m4/sys_wait_h.m4:AC_DEFUN([gl_SYS_WAIT_MODULE_INDICATOR],
m4/sys_wait_h.m4:  gl_SYS_WAIT_H_REQUIRE_DEFAULTS
m4/sys_wait_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/sys_wait_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/sys_wait_h.m4:AC_DEFUN([gl_SYS_WAIT_H_REQUIRE_DEFAULTS],
m4/sys_wait_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WAITPID])
m4/sys_wait_h.m4:  AC_REQUIRE([gl_SYS_WAIT_H_DEFAULTS])
m4/sys_wait_h.m4:AC_DEFUN([gl_SYS_WAIT_H_DEFAULTS],
m4/tan.m4:AC_DEFUN([gl_FUNC_TAN],
m4/tan.m4:  gl_COMMON_DOUBLE_MATHFUNC([tan])
m4/tanf.m4:AC_DEFUN([gl_FUNC_TANF],
m4/tanf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/tanf.m4:  AC_REQUIRE([gl_FUNC_TAN])
m4/tanf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/tanh.m4:AC_DEFUN([gl_FUNC_TANH],
m4/tanh.m4:  gl_COMMON_DOUBLE_MATHFUNC([tanh])
m4/tanhf.m4:AC_DEFUN([gl_FUNC_TANHF],
m4/tanhf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/tanhf.m4:  AC_REQUIRE([gl_FUNC_TANH])
m4/tanhf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/tanl.m4:AC_DEFUN([gl_FUNC_TANL],
m4/tanl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/tanl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/tanl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/tanl.m4:    [gl_cv_func_tanl_no_libm],
m4/tanl.m4:        [gl_cv_func_tanl_no_libm=yes],
m4/tanl.m4:        [gl_cv_func_tanl_no_libm=no])
m4/tanl.m4:  if test $gl_cv_func_tanl_no_libm = no; then
m4/tanl.m4:      [gl_cv_func_tanl_in_libm],
m4/tanl.m4:          [gl_cv_func_tanl_in_libm=yes],
m4/tanl.m4:          [gl_cv_func_tanl_in_libm=no])
m4/tanl.m4:    if test $gl_cv_func_tanl_in_libm = yes; then
m4/tanl.m4:  if test $gl_cv_func_tanl_no_libm = yes \
m4/tanl.m4:     || test $gl_cv_func_tanl_in_libm = yes; then
m4/tanl.m4:      AC_REQUIRE([gl_FUNC_TAN])
m4/tanl.m4:      AC_REQUIRE([gl_FUNC_ISNANL])
m4/tanl.m4:      AC_REQUIRE([gl_FUNC_FLOOR])
m4/tanl.m4:      AC_REQUIRE([gl_FUNC_FLOORL])
m4/tcgetattr.m4:AC_DEFUN([gl_HAVE_TCGETATTR],
m4/tcgetattr.m4:  AC_CACHE_CHECK([for tcgetattr], [gl_cv_func_tcgetattr],
m4/tcgetattr.m4:       [gl_cv_func_tcgetattr=yes],
m4/tcgetattr.m4:       [gl_cv_func_tcgetattr=no])
m4/tcgetattr.m4:  if test $gl_cv_func_tcgetattr = yes; then
m4/tcgetsid.m4:AC_DEFUN([gl_FUNC_TCGETSID],
m4/tcgetsid.m4:  AC_REQUIRE([gl_TERMIOS_H_DEFAULTS])
m4/tcgetsid.m4:  AC_CACHE_CHECK([for tcgetsid], [gl_cv_func_tcgetsid],
m4/tcgetsid.m4:       [gl_cv_func_tcgetsid=yes],
m4/tcgetsid.m4:       [gl_cv_func_tcgetsid=no])
m4/tcgetsid.m4:  if test $gl_cv_func_tcgetsid = yes; then
m4/tcgetsid.m4:AC_DEFUN([gl_PREREQ_TCGETSID], [
m4/tempname.m4:AC_DEFUN([gl_FUNC_GEN_TEMPNAME],
m4/tempname.m4:  gl_PREREQ_TEMPNAME
m4/tempname.m4:AC_DEFUN([gl_PREREQ_TEMPNAME],
m4/termcap.m4:AC_DEFUN([gl_TERMCAP],
m4/termcap.m4:  AC_REQUIRE([gl_TERMCAP_BODY])
m4/termcap.m4:  if test $gl_cv_termcap_tparam = no && test $gl_cv_termcap_tparm = no; then
m4/termcap.m4:  case "$gl_cv_termcap" in
m4/termcap.m4:AC_DEFUN([gl_TERMCAP_BODY],
m4/termcap.m4:  AC_REQUIRE([gl_CURSES])
m4/termcap.m4:  if test "$gl_curses_allowed" != no; then
m4/termcap.m4:  AC_CACHE_CHECK([where termcap library functions come from], [gl_cv_termcap], [
m4/termcap.m4:    gl_cv_termcap="not found, consider installing GNU ncurses"
m4/termcap.m4:      [gl_cv_termcap=libc])
m4/termcap.m4:    if test "$gl_cv_termcap" != libc; then
m4/termcap.m4:      gl_saved_LIBS="$LIBS"
m4/termcap.m4:        [gl_cv_termcap=libncurses])
m4/termcap.m4:      LIBS="$gl_saved_LIBS"
m4/termcap.m4:      if test "$gl_cv_termcap" != libncurses; then
m4/termcap.m4:        gl_saved_LIBS="$LIBS"
m4/termcap.m4:          [gl_cv_termcap=libtermcap])
m4/termcap.m4:        LIBS="$gl_saved_LIBS"
m4/termcap.m4:        if test "$gl_cv_termcap" != libtermcap; then
m4/termcap.m4:          gl_saved_LIBS="$LIBS"
m4/termcap.m4:            [gl_cv_termcap=libxcurses])
m4/termcap.m4:          LIBS="$gl_saved_LIBS"
m4/termcap.m4:          if test "$gl_cv_termcap" != libxcurses; then
m4/termcap.m4:            gl_saved_LIBS="$LIBS"
m4/termcap.m4:              [gl_cv_termcap=libcurses])
m4/termcap.m4:            LIBS="$gl_saved_LIBS"
m4/termcap.m4:  case "$gl_cv_termcap" in
m4/termcap.m4:  case "$gl_cv_termcap" in
m4/termcap.m4:  AC_CACHE_CHECK([for terminfo functions], [gl_cv_func_terminfo], [
m4/termcap.m4:    gl_saved_LIBS="$LIBS"
m4/termcap.m4:    gl_saved_CPPFLAGS="$CPPFLAGS"
m4/termcap.m4:      [gl_cv_func_terminfo=yes], [gl_cv_func_terminfo=no])
m4/termcap.m4:    CPPFLAGS="$gl_saved_CPPFLAGS"
m4/termcap.m4:    LIBS="$gl_saved_LIBS"
m4/termcap.m4:  if test $gl_cv_func_terminfo = yes; then
m4/termcap.m4:  AC_CACHE_CHECK([for tparam], [gl_cv_termcap_tparam], [
m4/termcap.m4:    gl_saved_LIBS="$LIBS"
m4/termcap.m4:    gl_saved_CPPFLAGS="$CPPFLAGS"
m4/termcap.m4:      [gl_cv_termcap_tparam=yes], [gl_cv_termcap_tparam=no])
m4/termcap.m4:    CPPFLAGS="$gl_saved_CPPFLAGS"
m4/termcap.m4:    LIBS="$gl_saved_LIBS"
m4/termcap.m4:  if test $gl_cv_termcap_tparam = yes; then
m4/termcap.m4:    AC_CACHE_CHECK([for tparm], [gl_cv_termcap_tparm], [
m4/termcap.m4:      gl_saved_LIBS="$LIBS"
m4/termcap.m4:      gl_saved_CPPFLAGS="$CPPFLAGS"
m4/termcap.m4:        [gl_cv_termcap_tparm=yes], [gl_cv_termcap_tparm=no])
m4/termcap.m4:      CPPFLAGS="$gl_saved_CPPFLAGS"
m4/termcap.m4:      LIBS="$gl_saved_LIBS"
m4/terminfo.m4:AC_DEFUN([gl_TERMINFO],
m4/terminfo.m4:  AC_REQUIRE([gl_TERMINFO_BODY])
m4/terminfo.m4:  if test $gl_cv_terminfo_tparam = no && test $gl_cv_terminfo_tparm = no; then
m4/terminfo.m4:  case "$gl_cv_terminfo" in
m4/terminfo.m4:      case "$gl_cv_termcap" in
m4/terminfo.m4:AC_DEFUN([gl_TERMINFO_BODY],
m4/terminfo.m4:  AC_REQUIRE([gl_CURSES])
m4/terminfo.m4:  dnl Avoid disturbing the gl_TERMCAP_BODY macro.
m4/terminfo.m4:  gl_saved_LIBTERMCAP="$LIBTERMCAP"
m4/terminfo.m4:  gl_saved_LTLIBTERMCAP="$LTLIBTERMCAP"
m4/terminfo.m4:  gl_saved_INCTERMCAP="$INCTERMCAP"
m4/terminfo.m4:  if test "$gl_curses_allowed" != no; then
m4/terminfo.m4:  AC_CACHE_CHECK([where terminfo library functions come from], [gl_cv_terminfo], [
m4/terminfo.m4:    gl_cv_terminfo="not found, consider installing GNU ncurses"
m4/terminfo.m4:      [gl_cv_terminfo=libc])
m4/terminfo.m4:    if test "$gl_cv_terminfo" != libc; then
m4/terminfo.m4:      gl_saved_LIBS="$LIBS"
m4/terminfo.m4:        [gl_cv_terminfo=libncurses])
m4/terminfo.m4:      LIBS="$gl_saved_LIBS"
m4/terminfo.m4:      if test "$gl_cv_terminfo" != libncurses; then
m4/terminfo.m4:        gl_saved_LIBS="$LIBS"
m4/terminfo.m4:          [gl_cv_terminfo=libtermcap])
m4/terminfo.m4:        LIBS="$gl_saved_LIBS"
m4/terminfo.m4:        if test "$gl_cv_terminfo" != libtermcap; then
m4/terminfo.m4:          gl_saved_LIBS="$LIBS"
m4/terminfo.m4:            [gl_cv_terminfo=libxcurses])
m4/terminfo.m4:          LIBS="$gl_saved_LIBS"
m4/terminfo.m4:          if test "$gl_cv_terminfo" != libxcurses; then
m4/terminfo.m4:            gl_saved_LIBS="$LIBS"
m4/terminfo.m4:              [gl_cv_terminfo=libcurses])
m4/terminfo.m4:            LIBS="$gl_saved_LIBS"
m4/terminfo.m4:  case "$gl_cv_terminfo" in
m4/terminfo.m4:  case "$gl_cv_terminfo" in
m4/terminfo.m4:      AC_CACHE_CHECK([where termcap library functions come from], [gl_cv_termcap], [
m4/terminfo.m4:        gl_cv_termcap="not found, consider installing GNU ncurses"
m4/terminfo.m4:          [gl_cv_termcap=libc])
m4/terminfo.m4:        if test "$gl_cv_termcap" != libc; then
m4/terminfo.m4:          gl_saved_LIBS="$LIBS"
m4/terminfo.m4:            [gl_cv_termcap=libncurses])
m4/terminfo.m4:          LIBS="$gl_saved_LIBS"
m4/terminfo.m4:          if test "$gl_cv_termcap" != libncurses; then
m4/terminfo.m4:            gl_saved_LIBS="$LIBS"
m4/terminfo.m4:              [gl_cv_termcap=libtermcap])
m4/terminfo.m4:            LIBS="$gl_saved_LIBS"
m4/terminfo.m4:      case "$gl_cv_termcap" in
m4/terminfo.m4:      case "$gl_cv_termcap" in
m4/terminfo.m4:  AC_CACHE_CHECK([for tparam], [gl_cv_terminfo_tparam], [
m4/terminfo.m4:    gl_saved_LIBS="$LIBS"
m4/terminfo.m4:    gl_saved_CPPFLAGS="$CPPFLAGS"
m4/terminfo.m4:      [gl_cv_terminfo_tparam=yes],
m4/terminfo.m4:      [gl_cv_terminfo_tparam=no])
m4/terminfo.m4:    CPPFLAGS="$gl_saved_CPPFLAGS"
m4/terminfo.m4:    LIBS="$gl_saved_LIBS"
m4/terminfo.m4:  if test $gl_cv_terminfo_tparam = yes; then
m4/terminfo.m4:    AC_CACHE_CHECK([for tparm], [gl_cv_terminfo_tparm], [
m4/terminfo.m4:      gl_saved_LIBS="$LIBS"
m4/terminfo.m4:      gl_saved_CPPFLAGS="$CPPFLAGS"
m4/terminfo.m4:        [gl_cv_terminfo_tparm=yes], [gl_cv_terminfo_tparm=no])
m4/terminfo.m4:      CPPFLAGS="$gl_saved_CPPFLAGS"
m4/terminfo.m4:      LIBS="$gl_saved_LIBS"
m4/terminfo.m4:  dnl Avoid disturbing the gl_TERMCAP_BODY macro.
m4/terminfo.m4:  LIBTERMCAP="$gl_saved_LIBTERMCAP"
m4/terminfo.m4:  LTLIBTERMCAP="$gl_saved_LTLIBTERMCAP"
m4/terminfo.m4:  INCTERMCAP="$gl_saved_INCTERMCAP"
m4/termios_h.m4:AC_DEFUN_ONCE([gl_TERMIOS_H],
m4/termios_h.m4:  AC_REQUIRE([gl_TERMIOS_H_DEFAULTS])
m4/termios_h.m4:  gl_CHECK_NEXT_HEADERS([termios.h])
m4/termios_h.m4:      [gl_cv_struct_winsize_in_termios_h],
m4/termios_h.m4:         [gl_cv_struct_winsize_in_termios_h=yes],
m4/termios_h.m4:         [gl_cv_struct_winsize_in_termios_h=no])
m4/termios_h.m4:    if test $gl_cv_struct_winsize_in_termios_h = no; then
m4/termios_h.m4:          [gl_cv_struct_winsize_in_sys_ioctl_h],
m4/termios_h.m4:             [gl_cv_struct_winsize_in_sys_ioctl_h=yes],
m4/termios_h.m4:             [gl_cv_struct_winsize_in_sys_ioctl_h=no])
m4/termios_h.m4:  if test "$gl_cv_struct_winsize_in_termios_h" != yes \
m4/termios_h.m4:     || test "$gl_cv_struct_winsize_in_sys_ioctl_h" != yes; then
m4/termios_h.m4:    if test "$gl_cv_struct_winsize_in_termios_h" = yes; then
m4/termios_h.m4:    elif test "$gl_cv_struct_winsize_in_sys_ioctl_h" = yes; then
m4/termios_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <termios.h>]],
m4/termios_h.m4:# gl_TERMIOS_MODULE_INDICATOR([modulename])
m4/termios_h.m4:AC_DEFUN([gl_TERMIOS_MODULE_INDICATOR],
m4/termios_h.m4:  gl_TERMIOS_H_REQUIRE_DEFAULTS
m4/termios_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/termios_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/termios_h.m4:AC_DEFUN([gl_TERMIOS_H_REQUIRE_DEFAULTS],
m4/termios_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TCGETSID])
m4/termios_h.m4:  AC_REQUIRE([gl_TERMIOS_H_DEFAULTS])
m4/termios_h.m4:AC_DEFUN([gl_TERMIOS_H_DEFAULTS],
m4/thrd.m4:AC_DEFUN([gl_FUNC_THRD_CREATE],
m4/thrd.m4:  AC_REQUIRE([gl_THREADS_H])
m4/thrd.m4:  gl_CHECK_FUNCS_ANDROID([thrd_create], [[#include <threads.h>]])
m4/thrd.m4:  case "$gl_cv_onwards_func_thrd_create" in
m4/thrd.m4:AC_DEFUN([gl_FUNC_THRD_JOIN],
m4/thrd.m4:  AC_REQUIRE([gl_THREADS_H])
m4/thrd.m4:      [gl_cv_func_thrd_join_null_works],
m4/thrd.m4:         [gl_cv_func_thrd_join_null_works=yes],
m4/thrd.m4:         [gl_cv_func_thrd_join_null_works=no],
m4/thrd.m4:            solaris*) gl_cv_func_thrd_join_null_works="guessing no" ;;
m4/thrd.m4:            *)        gl_cv_func_thrd_join_null_works="guessing yes" ;;
m4/thrd.m4:    case "$gl_cv_func_thrd_join_null_works" in
m4/thread.m4:AC_DEFUN([gl_THREAD],
m4/thread.m4:  AC_REQUIRE([gl_THREADLIB])
m4/thread.m4:  if test $gl_threads_api = posix; then
m4/thread.m4:    gl_saved_LIBS="$LIBS"
m4/thread.m4:    gl_CHECK_FUNCS_ANDROID([pthread_atfork], [[#include <pthread.h>]])
m4/thread.m4:    LIBS="$gl_saved_LIBS"
m4/threadlib.m4:AC_DEFUN([gl_ANYTHREADLIB_EARLY],
m4/threadlib.m4:  if test -z "$gl_anythreadlib_early_done"; then
m4/threadlib.m4:    gl_anythreadlib_early_done=done
m4/threadlib.m4:AC_DEFUN([gl_WEAK_SYMBOLS],
m4/threadlib.m4:    [gl_cv_have_weak],
m4/threadlib.m4:         gl_cv_have_weak="guessing no"
m4/threadlib.m4:         gl_cv_have_weak=no
m4/threadlib.m4:           [gl_cv_have_weak=maybe])
m4/threadlib.m4:         if test $gl_cv_have_weak = maybe; then
m4/threadlib.m4:             [gl_cv_have_weak=yes],
m4/threadlib.m4:             [gl_cv_have_weak=no],
m4/threadlib.m4:                [gl_cv_have_weak="guessing yes"],
m4/threadlib.m4:                [gl_cv_have_weak="guessing no"])
m4/threadlib.m4:       *" -static "*) gl_cv_have_weak=no ;;
m4/threadlib.m4:     case "$gl_cv_have_weak" in
m4/threadlib.m4:               || gl_cv_have_weak=no
m4/threadlib.m4:  case "$gl_cv_have_weak" in
m4/threadlib.m4:dnl gl_PTHREADLIB
m4/threadlib.m4:dnl The guts of gl_PTHREADLIB. Needs to be expanded only once.
m4/threadlib.m4:AC_DEFUN([gl_PTHREADLIB_BODY],
m4/threadlib.m4:  AC_REQUIRE([gl_ANYTHREADLIB_EARLY])
m4/threadlib.m4:  if test -z "$gl_pthreadlib_body_done"; then
m4/threadlib.m4:    gl_pthread_api=no
m4/threadlib.m4:    # it groks <pthread.h>. It's added above, in gl_ANYTHREADLIB_EARLY.
m4/threadlib.m4:      [gl_have_pthread_h=yes], [gl_have_pthread_h=no])
m4/threadlib.m4:    if test "$gl_have_pthread_h" = yes; then
m4/threadlib.m4:      for gl_pthread in '' '-pthread'; do
m4/threadlib.m4:        LIBS="$LIBS $gl_pthread"
m4/threadlib.m4:          [gl_pthread_api=yes
m4/threadlib.m4:           LIBPTHREAD=$gl_pthread
m4/threadlib.m4:           LIBPMULTITHREAD=$gl_pthread])
m4/threadlib.m4:        test $gl_pthread_api = yes && break
m4/threadlib.m4:      echo "$as_me:__oline__: gl_pthread_api=$gl_pthread_api" >&AS_MESSAGE_LOG_FD
m4/threadlib.m4:      gl_pthread_in_glibc=no
m4/threadlib.m4:            [gl_pthread_in_glibc=yes],
m4/threadlib.m4:      echo "$as_me:__oline__: gl_pthread_in_glibc=$gl_pthread_in_glibc" >&AS_MESSAGE_LOG_FD
m4/threadlib.m4:      if test $gl_pthread_api = yes && test -z "$LIBPTHREAD"; then
m4/threadlib.m4:          [if test $gl_pthread_in_glibc = yes; then
m4/threadlib.m4:             [if test $gl_pthread_in_glibc = yes; then
m4/threadlib.m4:      elif test $gl_pthread_api != yes; then
m4/threadlib.m4:          [gl_pthread_api=yes
m4/threadlib.m4:        if test $gl_pthread_api != yes; then
m4/threadlib.m4:            [gl_pthread_api=yes
m4/threadlib.m4:    AC_MSG_RESULT([$gl_pthread_api])
m4/threadlib.m4:    if test $gl_pthread_api = yes; then
m4/threadlib.m4:    gl_pthreadlib_body_done=done
m4/threadlib.m4:AC_DEFUN([gl_PTHREADLIB],
m4/threadlib.m4:  AC_REQUIRE([gl_ANYTHREADLIB_EARLY])
m4/threadlib.m4:  gl_PTHREADLIB_BODY
m4/threadlib.m4:dnl gl_STDTHREADLIB
m4/threadlib.m4:dnl The guts of gl_STDTHREADLIB. Needs to be expanded only once.
m4/threadlib.m4:AC_DEFUN([gl_STDTHREADLIB_BODY],
m4/threadlib.m4:  AC_REQUIRE([gl_ANYTHREADLIB_EARLY])
m4/threadlib.m4:  if test -z "$gl_stdthreadlib_body_done"; then
m4/threadlib.m4:        gl_PTHREADLIB_BODY
m4/threadlib.m4:          gl_CHECK_FUNCS_ANDROID([thrd_create], [[#include <threads.h>]])
m4/threadlib.m4:    gl_stdthreadlib_body_done=done
m4/threadlib.m4:AC_DEFUN([gl_STDTHREADLIB],
m4/threadlib.m4:  AC_REQUIRE([gl_ANYTHREADLIB_EARLY])
m4/threadlib.m4:  gl_STDTHREADLIB_BODY
m4/threadlib.m4:dnl gl_THREADLIB
m4/threadlib.m4:dnl If the configure.ac contains a definition of the gl_THREADLIB_DEFAULT_NO
m4/threadlib.m4:dnl (it must be placed before the invocation of gl_THREADLIB_EARLY!), then the
m4/threadlib.m4:AC_DEFUN([gl_THREADLIB_EARLY],
m4/threadlib.m4:  AC_REQUIRE([gl_THREADLIB_EARLY_BODY])
m4/threadlib.m4:dnl The guts of gl_THREADLIB_EARLY. Needs to be expanded only once.
m4/threadlib.m4:AC_DEFUN([gl_THREADLIB_EARLY_BODY],
m4/threadlib.m4:  AC_BEFORE([$0], [gl_FUNC_GLIBC_UNLOCKED_IO])dnl
m4/threadlib.m4:  AC_BEFORE([$0], [gl_ARGP])dnl
m4/threadlib.m4:  m4_ifdef([gl_THREADLIB_DEFAULT_NO],
m4/threadlib.m4:    [m4_divert_text([DEFAULTS], [gl_use_threads_default=no])],
m4/threadlib.m4:    [m4_divert_text([DEFAULTS], [gl_use_threads_default=])])
m4/threadlib.m4:  dnl gl_use_winpthreads_default defaults to 'no', because in mingw 10, like
m4/threadlib.m4:  m4_divert_text([DEFAULTS], [gl_use_winpthreads_default=no])
m4/threadlib.m4:AS_HELP_STRING([[--enable-threads={isoc|posix|isoc+posix|windows}]], [specify multithreading API])m4_ifdef([gl_THREADLIB_DEFAULT_NO], [], [
m4/threadlib.m4:    [gl_use_threads=$enableval],
m4/threadlib.m4:    [if test -n "$gl_use_threads_default"; then
m4/threadlib.m4:       gl_use_threads="$gl_use_threads_default"
m4/threadlib.m4:         osf*) gl_use_threads=no ;;
m4/threadlib.m4:                 1.[0-5].*) gl_use_threads=no ;;
m4/threadlib.m4:                 *)         gl_use_threads=yes ;;
m4/threadlib.m4:         dnl Obey gl_AVOID_WINPTHREAD on mingw.
m4/threadlib.m4:               case "$gl_use_winpthreads_default" in
m4/threadlib.m4:                 yes) gl_use_threads=posix ;;
m4/threadlib.m4:                 no)  gl_use_threads=windows ;;
m4/threadlib.m4:                 *)   gl_use_threads=yes ;;
m4/threadlib.m4:         *)    gl_use_threads=yes ;;
m4/threadlib.m4:  if test "$gl_use_threads" = yes \
m4/threadlib.m4:     || test "$gl_use_threads" = isoc \
m4/threadlib.m4:     || test "$gl_use_threads" = posix \
m4/threadlib.m4:     || test "$gl_use_threads" = isoc+posix; then
m4/threadlib.m4:    gl_ANYTHREADLIB_EARLY
m4/threadlib.m4:dnl The guts of gl_THREADLIB. Needs to be expanded only once.
m4/threadlib.m4:AC_DEFUN([gl_THREADLIB_BODY],
m4/threadlib.m4:  AC_REQUIRE([gl_THREADLIB_EARLY_BODY])
m4/threadlib.m4:  gl_threads_api=none
m4/threadlib.m4:  if test "$gl_use_threads" != no; then
m4/threadlib.m4:    gl_WEAK_SYMBOLS
m4/threadlib.m4:    if case "$gl_cv_have_weak" in *yes) true;; *) false;; esac; then
m4/threadlib.m4:    if test "$gl_use_threads" = isoc || test "$gl_use_threads" = isoc+posix; then
m4/threadlib.m4:      gl_have_isoc_threads="$ac_cv_header_threads_h"
m4/threadlib.m4:    if test "$gl_use_threads" = yes \
m4/threadlib.m4:       || test "$gl_use_threads" = posix \
m4/threadlib.m4:       || test "$gl_use_threads" = isoc+posix; then
m4/threadlib.m4:      gl_PTHREADLIB_BODY
m4/threadlib.m4:      if test $gl_pthread_api = yes; then
m4/threadlib.m4:        if test "$gl_use_threads" = isoc+posix && test "$gl_have_isoc_threads" = yes; then
m4/threadlib.m4:          gl_threads_api='isoc+posix'
m4/threadlib.m4:          gl_threads_api=posix
m4/threadlib.m4:            if case "$gl_cv_have_weak" in *yes) true;; *) false;; esac; then
m4/threadlib.m4:    if test $gl_threads_api = none; then
m4/threadlib.m4:      if test "$gl_use_threads" = isoc && test "$gl_have_isoc_threads" = yes; then
m4/threadlib.m4:        gl_STDTHREADLIB_BODY
m4/threadlib.m4:        gl_threads_api=isoc
m4/threadlib.m4:    if test $gl_threads_api = none; then
m4/threadlib.m4:      case "$gl_use_threads" in
m4/threadlib.m4:            gl_threads_api=windows
m4/threadlib.m4:    dnl "$gl_use_threads" is "no".
m4/threadlib.m4:  AC_MSG_RESULT([$gl_threads_api])
m4/threadlib.m4:AC_DEFUN([gl_THREADLIB],
m4/threadlib.m4:  AC_REQUIRE([gl_THREADLIB_EARLY])
m4/threadlib.m4:  AC_REQUIRE([gl_THREADLIB_BODY])
m4/threadlib.m4:dnl gl_DISABLE_THREADS
m4/threadlib.m4:dnl Sets the gl_THREADLIB default so that threads are not used by default.
m4/threadlib.m4:AC_DEFUN([gl_DISABLE_THREADS], [
m4/threadlib.m4:  m4_divert_text([INIT_PREPARE], [gl_use_threads_default=no])
m4/threadlib.m4:dnl gl_AVOID_WINPTHREAD
m4/threadlib.m4:dnl Sets the gl_THREADLIB default so that on mingw, a dependency to the
m4/threadlib.m4:AC_DEFUN([gl_AVOID_WINPTHREAD], [
m4/threadlib.m4:  m4_divert_text([INIT_PREPARE], [gl_use_winpthreads_default=no])
m4/threads_h.m4:AC_DEFUN_ONCE([gl_THREADS_H],
m4/threads_h.m4:  AC_REQUIRE([gl_THREADS_H_DEFAULTS])
m4/threads_h.m4:  AC_REQUIRE([gl_STDTHREADLIB])
m4/threads_h.m4:  gl_CHECK_NEXT_HEADERS([threads.h])
m4/threads_h.m4:      [gl_cv_thrd_start_t_correct],
m4/threads_h.m4:         [gl_cv_thrd_start_t_correct=yes],
m4/threads_h.m4:         [gl_cv_thrd_start_t_correct=no])
m4/threads_h.m4:    if test $gl_cv_thrd_start_t_correct != yes; then
m4/threads_h.m4:        [gl_cv_func_thrd_join_works],
m4/threads_h.m4:           [gl_cv_func_thrd_join_works=yes],
m4/threads_h.m4:           [gl_cv_func_thrd_join_works=no],
m4/threads_h.m4:              aix*) gl_cv_func_thrd_join_works="guessing no" ;;
m4/threads_h.m4:              *)    gl_cv_func_thrd_join_works="guessing yes" ;;
m4/threads_h.m4:      case "$gl_cv_func_thrd_join_works" in
m4/threads_h.m4:  AH_VERBATIM([thread_local], gl_THREAD_LOCAL_DEFINITION)
m4/threads_h.m4:    [gl_cv_thread_local_works],
m4/threads_h.m4:       gl_cv_thread_local_works="guessing no"
m4/threads_h.m4:         [AC_LANG_PROGRAM([gl_THREAD_LOCAL_DEFINITION[
m4/threads_h.m4:            gl_cv_thread_local_works=yes
m4/threads_h.m4:            gl_cv_thread_local_works="guessing yes"
m4/threads_h.m4:            gl_cv_thread_local_works=no
m4/threads_h.m4:            gl_cv_thread_local_works="guessing no"
m4/threads_h.m4:  case "$gl_cv_thread_local_works" in
m4/threads_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <threads.h>
m4/threads_h.m4:AC_DEFUN([gl_THREAD_LOCAL_DEFINITION],
m4/threads_h.m4:# gl_THREADS_MODULE_INDICATOR([modulename])
m4/threads_h.m4:AC_DEFUN([gl_THREADS_MODULE_INDICATOR],
m4/threads_h.m4:  gl_THREADS_H_REQUIRE_DEFAULTS
m4/threads_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/threads_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/threads_h.m4:AC_DEFUN([gl_THREADS_H_REQUIRE_DEFAULTS],
m4/threads_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CALL_ONCE])
m4/threads_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CND])
m4/threads_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MTX])
m4/threads_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_THRD])
m4/threads_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TSS])
m4/threads_h.m4:  AC_REQUIRE([gl_THREADS_H_DEFAULTS])
m4/threads_h.m4:AC_DEFUN([gl_THREADS_H_DEFAULTS],
m4/time.m4:AC_DEFUN([gl_FUNC_TIME],
m4/time.m4:    [gl_cv_func_time_works],
m4/time.m4:           [gl_cv_func_time_works="guessing no"],
m4/time.m4:           [gl_cv_func_time_works="guessing yes"])
m4/time.m4:       freebsd*)          gl_cv_func_time_works="guessing no";;
m4/time.m4:       aix*)              gl_cv_func_time_works="guessing no";;
m4/time.m4:       mingw* | windows*) gl_cv_func_time_works="guessing no";;
m4/time.m4:       *)                 gl_cv_func_time_works="guessing yes";;
m4/time.m4:  case "$gl_cv_func_time_works" in
m4/time.m4:AC_DEFUN([gl_PREREQ_TIME],
m4/timegm.m4:AC_DEFUN([gl_FUNC_TIMEGM],
m4/timegm.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/timegm.m4:  AC_REQUIRE([gl_FUNC_MKTIME_WORKS])
m4/timegm.m4:  gl_CHECK_FUNCS_ANDROID([timegm], [[#include <time.h>]])
m4/timegm.m4:    if test "$gl_cv_func_working_mktime" != yes; then
m4/timegm.m4:    case "$gl_cv_onwards_func_timegm" in
m4/timegm.m4:AC_DEFUN([gl_PREREQ_TIMEGM], [
m4/timer_time.m4:AC_DEFUN([gl_TIMER_TIME],
m4/timer_time.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/timer_time.m4:  m4_ifdef([gl_][PTHREADLIB], [AC_REQUIRE([gl_][PTHREADLIB])])
m4/timer_time.m4:    gl_saved_libs=$LIBS
m4/timer_time.m4:    m4_ifdef([gl_][PTHREADLIB],
m4/timer_time.m4:    LIBS=$gl_saved_libs
m4/times.m4:AC_DEFUN([gl_FUNC_TIMES],
m4/times.m4:  AC_REQUIRE([gl_SYS_TIMES_H_DEFAULTS])
m4/timespec.m4:AC_DEFUN([gl_TIMESPEC], [:])
m4/timespec_get.m4:AC_DEFUN([gl_FUNC_TIMESPEC_GET],
m4/timespec_get.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/timespec_get.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/timespec_get.m4:  AC_REQUIRE([gl_CHECK_FUNC_TIMESPEC_GET])
m4/timespec_get.m4:  if test $gl_cv_func_timespec_get != yes; then
m4/timespec_get.m4:    case "$gl_cv_onwards_func_timespec_get" in
m4/timespec_getres.m4:AC_DEFUN([gl_FUNC_TIMESPEC_GETRES],
m4/timespec_getres.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/timespec_getres.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/timespec_getres.m4:  gl_CHECK_FUNCS_ANDROID([timespec_getres], [[#include <time.h>]])
m4/timespec_getres.m4:    case "$gl_cv_onwards_func_timespec_getres" in
m4/time_h.m4:AC_DEFUN_ONCE([gl_TIME_H],
m4/time_h.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/time_h.m4:  gl_NEXT_HEADERS([time.h])
m4/time_h.m4:  AC_REQUIRE([gl_CHECK_TYPE_STRUCT_TIMESPEC])
m4/time_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/time_h.m4:    [gl_cv_time_h_has_TIME_UTC],
m4/time_h.m4:       [gl_cv_time_h_has_TIME_UTC=yes],
m4/time_h.m4:       [gl_cv_time_h_has_TIME_UTC=no])])
m4/time_h.m4:  if test $gl_cv_time_h_has_TIME_UTC = yes; then
m4/time_h.m4:AC_DEFUN([gl_CHECK_TYPE_STRUCT_TIMESPEC],
m4/time_h.m4:    [gl_cv_sys_struct_timespec_in_time_h],
m4/time_h.m4:       [gl_cv_sys_struct_timespec_in_time_h=yes],
m4/time_h.m4:       [gl_cv_sys_struct_timespec_in_time_h=no])])
m4/time_h.m4:  if test $gl_cv_sys_struct_timespec_in_time_h = yes; then
m4/time_h.m4:      [gl_cv_sys_struct_timespec_in_sys_time_h],
m4/time_h.m4:         [gl_cv_sys_struct_timespec_in_sys_time_h=yes],
m4/time_h.m4:         [gl_cv_sys_struct_timespec_in_sys_time_h=no])])
m4/time_h.m4:    if test $gl_cv_sys_struct_timespec_in_sys_time_h = yes; then
m4/time_h.m4:        [gl_cv_sys_struct_timespec_in_pthread_h],
m4/time_h.m4:           [gl_cv_sys_struct_timespec_in_pthread_h=yes],
m4/time_h.m4:           [gl_cv_sys_struct_timespec_in_pthread_h=no])])
m4/time_h.m4:      if test $gl_cv_sys_struct_timespec_in_pthread_h = yes; then
m4/time_h.m4:          [gl_cv_sys_struct_timespec_in_unistd_h],
m4/time_h.m4:             [gl_cv_sys_struct_timespec_in_unistd_h=yes],
m4/time_h.m4:             [gl_cv_sys_struct_timespec_in_unistd_h=no])])
m4/time_h.m4:        if test $gl_cv_sys_struct_timespec_in_unistd_h = yes; then
m4/time_h.m4:# gl_TIME_MODULE_INDICATOR([modulename])
m4/time_h.m4:AC_DEFUN([gl_TIME_MODULE_INDICATOR],
m4/time_h.m4:  gl_TIME_H_REQUIRE_DEFAULTS
m4/time_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/time_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/time_h.m4:AC_DEFUN([gl_TIME_H_REQUIRE_DEFAULTS],
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CTIME])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MKTIME])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOCALTIME])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_NANOSLEEP])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRFTIME])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_STRPTIME])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TIME])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TIMEGM])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TIMESPEC_GET])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TIMESPEC_GETRES])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TIME_R])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TIME_RZ])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TZNAME])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TZSET])
m4/time_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_TZSET], [1])
m4/time_h.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/time_h.m4:AC_DEFUN([gl_TIME_H_DEFAULTS],
m4/time_r.m4:AC_DEFUN([gl_TIME_R],
m4/time_r.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/time_r.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/time_r.m4:      [gl_cv_time_r_posix],
m4/time_r.m4:         [gl_cv_time_r_posix=yes],
m4/time_r.m4:         [gl_cv_time_r_posix=no])
m4/time_r.m4:    if test $gl_cv_time_r_posix != yes; then
m4/time_r.m4:      [gl_cv_func_localtime_r_inline],
m4/time_r.m4:         [gl_cv_func_localtime_r_inline=yes],
m4/time_r.m4:         [gl_cv_func_localtime_r_inline=no])
m4/time_r.m4:    if test $gl_cv_func_localtime_r_inline = yes; then
m4/time_r.m4:AC_DEFUN([gl_PREREQ_TIME_R], [
m4/time_rz.m4:AC_DEFUN([gl_TIME_RZ],
m4/time_rz.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/time_rz.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/time_rz.m4:    [gl_cv_func_localtime_works],
m4/time_rz.m4:    [gl_cv_func_localtime_works=yes
m4/time_rz.m4:           gl_cv_func_localtime_works=no],
m4/time_rz.m4:       [gl_cv_func_localtime_works="guessing yes"])])
m4/time_rz.m4:  if test "$gl_cv_func_localtime_works" = no; then
m4/tls.m4:AC_DEFUN([gl_TLS],
m4/tls.m4:  AC_REQUIRE([gl_THREADLIB])
m4/tmpfile.m4:AC_DEFUN([gl_FUNC_TMPFILE], [
m4/tmpfile.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/tmpfile.m4:    [gl_cv_func_tmpfile_works],
m4/tmpfile.m4:       [gl_cv_func_tmpfile_works=no],
m4/tmpfile.m4:          [gl_cv_func_tmpfile_works=yes],
m4/tmpfile.m4:          [gl_cv_func_tmpfile_works=no],
m4/tmpfile.m4:             linux*-android*) gl_cv_func_tmpfile_works="guessing no" ;;
m4/tmpfile.m4:             *)               gl_cv_func_tmpfile_works="guessing yes" ;;
m4/tmpfile.m4:  case "$gl_cv_func_tmpfile_works" in
m4/tmpfile.m4:AC_DEFUN([gl_PREREQ_TMPFILE], [:])
m4/tm_gmtoff.m4:AC_DEFUN([gl_TM_GMTOFF],
m4/totalorder.m4:AC_DEFUN([gl_FUNC_TOTALORDERF],
m4/totalorder.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/totalorder.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/totalorder.m4:    [gl_cv_func_totalorderf_incompatible],
m4/totalorder.m4:       [gl_cv_func_totalorderf_incompatible=no],
m4/totalorder.m4:       [gl_cv_func_totalorderf_incompatible=yes])
m4/totalorder.m4:  if test $gl_cv_func_totalorderf_incompatible = yes; then
m4/totalorder.m4:    gl_MATHFUNC([totalorderf], [int], [(float const *, float const *)])
m4/totalorder.m4:    if test $gl_cv_func_totalorderf_no_libm != yes \
m4/totalorder.m4:       && test $gl_cv_func_totalorderf_in_libm != yes; then
m4/totalorder.m4:    gl_NAN_MIPS
m4/totalorder.m4:AC_DEFUN([gl_FUNC_TOTALORDER],
m4/totalorder.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/totalorder.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/totalorder.m4:    [gl_cv_func_totalorder_incompatible],
m4/totalorder.m4:       [gl_cv_func_totalorder_incompatible=no],
m4/totalorder.m4:       [gl_cv_func_totalorder_incompatible=yes])
m4/totalorder.m4:  if test $gl_cv_func_totalorder_incompatible = yes; then
m4/totalorder.m4:    gl_MATHFUNC([totalorder], [int], [(double const *, double const *)])
m4/totalorder.m4:    if test $gl_cv_func_totalorder_no_libm != yes \
m4/totalorder.m4:       && test $gl_cv_func_totalorder_in_libm != yes; then
m4/totalorder.m4:    gl_NAN_MIPS
m4/totalorder.m4:AC_DEFUN([gl_FUNC_TOTALORDERL],
m4/totalorder.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/totalorder.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/totalorder.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/totalorder.m4:    [gl_cv_func_totalorderl_incompatible],
m4/totalorder.m4:       [gl_cv_func_totalorderl_incompatible=no],
m4/totalorder.m4:       [gl_cv_func_totalorderl_incompatible=yes])
m4/totalorder.m4:  if test $gl_cv_func_totalorderl_incompatible = yes; then
m4/totalorder.m4:    gl_MATHFUNC([totalorderl], [int],
m4/totalorder.m4:    if test $gl_cv_func_totalorderl_no_libm != yes \
m4/totalorder.m4:       && test $gl_cv_func_totalorderl_in_libm != yes; then
m4/totalorder.m4:      AC_REQUIRE([gl_FUNC_TOTALORDER])
m4/totalorder.m4:    gl_LONG_DOUBLE_SIGN_LOCATION
m4/totalorder.m4:    gl_NAN_MIPS
m4/totalordermag.m4:AC_DEFUN([gl_FUNC_TOTALORDERMAGF],
m4/totalordermag.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/totalordermag.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/totalordermag.m4:    [gl_cv_func_totalordermagf_incompatible],
m4/totalordermag.m4:       [gl_cv_func_totalordermagf_incompatible=no],
m4/totalordermag.m4:       [gl_cv_func_totalordermagf_incompatible=yes])
m4/totalordermag.m4:  if test $gl_cv_func_totalordermagf_incompatible = yes; then
m4/totalordermag.m4:    gl_MATHFUNC([totalordermagf], [int], [(float const *, float const *)])
m4/totalordermag.m4:    if test $gl_cv_func_totalordermagf_no_libm != yes \
m4/totalordermag.m4:       && test $gl_cv_func_totalordermagf_in_libm != yes; then
m4/totalordermag.m4:    gl_FLOAT_SIGN_LOCATION
m4/totalordermag.m4:    gl_NAN_MIPS
m4/totalordermag.m4:AC_DEFUN([gl_FUNC_TOTALORDERMAG],
m4/totalordermag.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/totalordermag.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/totalordermag.m4:    [gl_cv_func_totalordermag_incompatible],
m4/totalordermag.m4:       [gl_cv_func_totalordermag_incompatible=no],
m4/totalordermag.m4:       [gl_cv_func_totalordermag_incompatible=yes])
m4/totalordermag.m4:  if test $gl_cv_func_totalordermag_incompatible = yes; then
m4/totalordermag.m4:    gl_MATHFUNC([totalordermag], [int], [(double const *, double const *)])
m4/totalordermag.m4:    if test $gl_cv_func_totalordermag_no_libm != yes \
m4/totalordermag.m4:       && test $gl_cv_func_totalordermag_in_libm != yes; then
m4/totalordermag.m4:    gl_DOUBLE_SIGN_LOCATION
m4/totalordermag.m4:    gl_NAN_MIPS
m4/totalordermag.m4:AC_DEFUN([gl_FUNC_TOTALORDERMAGL],
m4/totalordermag.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/totalordermag.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/totalordermag.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/totalordermag.m4:    [gl_cv_func_totalordermagl_incompatible],
m4/totalordermag.m4:       [gl_cv_func_totalordermagl_incompatible=no],
m4/totalordermag.m4:       [gl_cv_func_totalordermagl_incompatible=yes])
m4/totalordermag.m4:  if test $gl_cv_func_totalordermagl_incompatible = yes; then
m4/totalordermag.m4:    gl_MATHFUNC([totalordermagl], [int],
m4/totalordermag.m4:    if test $gl_cv_func_totalordermagl_no_libm != yes \
m4/totalordermag.m4:       && test $gl_cv_func_totalordermagl_in_libm != yes; then
m4/totalordermag.m4:      AC_REQUIRE([gl_FUNC_TOTALORDERMAG])
m4/totalordermag.m4:    gl_LONG_DOUBLE_SIGN_LOCATION
m4/totalordermag.m4:    gl_NAN_MIPS
m4/towctrans.m4:AC_DEFUN([gl_FUNC_TOWCTRANS],
m4/towctrans.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/towctrans.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/towctrans.m4:  AC_REQUIRE([gl_FUNC_WCTRANS])
m4/trunc-ieee.m4:dnl module description), so that gl_FUNC_TRUNC can test whether 'aclocal' has
m4/trunc-ieee.m4:AC_DEFUN([gl_FUNC_TRUNC_IEEE],
m4/trunc-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_trunc_required=ieee])
m4/trunc-ieee.m4:  AC_REQUIRE([gl_FUNC_TRUNC])
m4/trunc.m4:AC_DEFUN([gl_FUNC_TRUNC],
m4/trunc.m4:  m4_divert_text([DEFAULTS], [gl_trunc_required=plain])
m4/trunc.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/trunc.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/trunc.m4:    m4_ifdef([gl_FUNC_TRUNC_IEEE], [
m4/trunc.m4:      if test $gl_trunc_required = ieee && test $REPLACE_TRUNC = 0; then
m4/trunc.m4:          [gl_cv_func_trunc_ieee],
m4/trunc.m4:]gl_DOUBLE_MINUS_ZERO_CODE[
m4/trunc.m4:]gl_DOUBLE_SIGNBIT_CODE[
m4/trunc.m4:              [gl_cv_func_trunc_ieee=yes],
m4/trunc.m4:              [gl_cv_func_trunc_ieee=no],
m4/trunc.m4:                 *-gnu* | gnu*)      gl_cv_func_trunc_ieee="guessing yes" ;;
m4/trunc.m4:                 *-musl* | midipix*) gl_cv_func_trunc_ieee="guessing yes" ;;
m4/trunc.m4:                 mingw* | windows*)  gl_cv_func_trunc_ieee="guessing yes" ;;
m4/trunc.m4:                 *)                  gl_cv_func_trunc_ieee="$gl_cross_guess_normal" ;;
m4/trunc.m4:        case "$gl_cv_func_trunc_ieee" in
m4/truncate.m4:AC_DEFUN([gl_FUNC_TRUNCATE],
m4/truncate.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/truncate.m4:  gl_CHECK_FUNCS_ANDROID([truncate], [[#include <unistd.h>]])
m4/truncate.m4:    m4_ifdef([gl_LARGEFILE], [
m4/truncate.m4:        [gl_cv_func_truncate_works],
m4/truncate.m4:           [gl_cv_func_truncate_works=yes],
m4/truncate.m4:           [gl_cv_func_truncate_works=no],
m4/truncate.m4:              linux* | midipix*) gl_cv_func_truncate_works="guessing yes" ;;
m4/truncate.m4:              *-gnu* | gnu*)     gl_cv_func_truncate_works="guessing yes" ;;
m4/truncate.m4:              aix*)              gl_cv_func_truncate_works="guessing no" ;;
m4/truncate.m4:              *)                 gl_cv_func_truncate_works="$gl_cross_guess_normal" ;;
m4/truncate.m4:      case "$gl_cv_func_truncate_works" in
m4/truncate.m4:    case "$gl_cv_onwards_func_truncate" in
m4/truncate.m4:AC_DEFUN([gl_PREREQ_TRUNCATE], [:])
m4/truncf-ieee.m4:dnl module description), so that gl_FUNC_TRUNCF can test whether 'aclocal' has
m4/truncf-ieee.m4:AC_DEFUN([gl_FUNC_TRUNCF_IEEE],
m4/truncf-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_truncf_required=ieee])
m4/truncf-ieee.m4:  AC_REQUIRE([gl_FUNC_TRUNCF])
m4/truncf.m4:AC_DEFUN([gl_FUNC_TRUNCF],
m4/truncf.m4:  m4_divert_text([DEFAULTS], [gl_truncf_required=plain])
m4/truncf.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/truncf.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/truncf.m4:    m4_ifdef([gl_FUNC_TRUNCF_IEEE], [
m4/truncf.m4:      if test $gl_truncf_required = ieee && test $REPLACE_TRUNCF = 0; then
m4/truncf.m4:          [gl_cv_func_truncf_ieee],
m4/truncf.m4:]gl_FLOAT_MINUS_ZERO_CODE[
m4/truncf.m4:]gl_FLOAT_SIGNBIT_CODE[
m4/truncf.m4:              [gl_cv_func_truncf_ieee=yes],
m4/truncf.m4:              [gl_cv_func_truncf_ieee=no],
m4/truncf.m4:                 *-gnu* | gnu*)      gl_cv_func_truncf_ieee="guessing yes" ;;
m4/truncf.m4:                 *-musl* | midipix*) gl_cv_func_truncf_ieee="guessing yes" ;;
m4/truncf.m4:                 mingw* | windows*)  gl_cv_func_truncf_ieee="guessing yes" ;;
m4/truncf.m4:                 *)                  gl_cv_func_truncf_ieee="$gl_cross_guess_normal" ;;
m4/truncf.m4:        case "$gl_cv_func_truncf_ieee" in
m4/truncl-ieee.m4:dnl module description), so that gl_FUNC_TRUNCL can test whether 'aclocal' has
m4/truncl-ieee.m4:AC_DEFUN([gl_FUNC_TRUNCL_IEEE],
m4/truncl-ieee.m4:  m4_divert_text([INIT_PREPARE], [gl_truncl_required=ieee])
m4/truncl-ieee.m4:  AC_REQUIRE([gl_FUNC_TRUNCL])
m4/truncl.m4:AC_DEFUN([gl_FUNC_TRUNCL],
m4/truncl.m4:  m4_divert_text([DEFAULTS], [gl_truncl_required=plain])
m4/truncl.m4:  AC_REQUIRE([gl_MATH_H_DEFAULTS])
m4/truncl.m4:  AC_REQUIRE([gl_LONG_DOUBLE_VS_DOUBLE])
m4/truncl.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/truncl.m4:    AC_CACHE_CHECK([whether truncl works], [gl_cv_func_truncl_works],
m4/truncl.m4:          [gl_cv_func_truncl_works=yes],
m4/truncl.m4:          [gl_cv_func_truncl_works=no],
m4/truncl.m4:             osf4*)             gl_cv_func_truncl_works="guessing no" ;;
m4/truncl.m4:             mingw* | windows*) gl_cv_func_truncl_works="guessing yes" ;;
m4/truncl.m4:             *)                 gl_cv_func_truncl_works="guessing yes" ;;
m4/truncl.m4:    case "$gl_cv_func_truncl_works" in
m4/truncl.m4:    m4_ifdef([gl_FUNC_TRUNCL_IEEE], [
m4/truncl.m4:      if test $gl_truncl_required = ieee && test $REPLACE_TRUNCL = 0; then
m4/truncl.m4:          [gl_cv_func_truncl_ieee],
m4/truncl.m4:]gl_LONG_DOUBLE_MINUS_ZERO_CODE[
m4/truncl.m4:]gl_LONG_DOUBLE_SIGNBIT_CODE[
m4/truncl.m4:              [gl_cv_func_truncl_ieee=yes],
m4/truncl.m4:              [gl_cv_func_truncl_ieee=no],
m4/truncl.m4:                 *-gnu* | gnu*)      gl_cv_func_truncl_ieee="guessing yes" ;;
m4/truncl.m4:                 *-musl* | midipix*) gl_cv_func_truncl_ieee="guessing yes" ;;
m4/truncl.m4:                 mingw* | windows*)  gl_cv_func_truncl_ieee="guessing yes" ;;
m4/truncl.m4:                 *)                  gl_cv_func_truncl_ieee="$gl_cross_guess_normal" ;;
m4/truncl.m4:        case "$gl_cv_func_truncl_ieee" in
m4/truncl.m4:      AC_REQUIRE([gl_FUNC_TRUNC])
m4/tsearch.m4:AC_DEFUN([gl_FUNC_TSEARCH],
m4/tsearch.m4:  AC_REQUIRE([gl_SEARCH_H_DEFAULTS])
m4/tsearch.m4:  gl_CHECK_FUNCS_ANDROID([tsearch], [[#include <search.h>]])
m4/tsearch.m4:  gl_CHECK_FUNCS_ANDROID([twalk], [[#include <search.h>]])
m4/tsearch.m4:    AC_CACHE_CHECK([whether tdelete works], [gl_cv_func_tdelete_works],
m4/tsearch.m4:}]])], [gl_cv_func_tdelete_works=yes], [gl_cv_func_tdelete_works=no],
m4/tsearch.m4:               openbsd*)            gl_cv_func_tdelete_works="guessing no" ;;
m4/tsearch.m4:               mingw* | windows*)   gl_cv_func_tdelete_works="guessing yes" ;;
m4/tsearch.m4:               *)                   gl_cv_func_tdelete_works="guessing yes" ;;
m4/tsearch.m4:    case "$gl_cv_func_tdelete_works" in
m4/tsearch.m4:    case "$gl_cv_onwards_func_tsearch" in
m4/tsearch.m4:    case "$gl_cv_onwards_func_twalk" in
m4/tsearch.m4:AC_DEFUN([gl_PREREQ_TSEARCH], [
m4/tss.m4:AC_DEFUN([gl_FUNC_TSS_CREATE],
m4/tss.m4:  AC_REQUIRE([gl_THREADS_H])
m4/tss.m4:  gl_CHECK_FUNCS_ANDROID([tss_create], [[#include <threads.h>]])
m4/tss.m4:  case "$gl_cv_onwards_func_tss_create" in
m4/ttyname_r.m4:AC_DEFUN([gl_FUNC_TTYNAME_R],
m4/ttyname_r.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/ttyname_r.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/ttyname_r.m4:  gl_CHECK_FUNCS_ANDROID([ttyname_r], [[#include <unistd.h>]])
m4/ttyname_r.m4:    case "$gl_cv_onwards_func_ttyname_r" in
m4/ttyname_r.m4:    dnl On Mac OS X 10.4 (and Solaris 10 without gl_USE_SYSTEM_EXTENSIONS)
m4/ttyname_r.m4:      [gl_cv_func_ttyname_r_posix],
m4/ttyname_r.m4:         [gl_cv_func_ttyname_r_posix=no],
m4/ttyname_r.m4:         [gl_cv_func_ttyname_r_posix=yes])
m4/ttyname_r.m4:    if test $gl_cv_func_ttyname_r_posix = no; then
m4/ttyname_r.m4:            [gl_cv_func_ttyname_r_not_stub],
m4/ttyname_r.m4:               [gl_cv_func_ttyname_r_not_stub=yes],
m4/ttyname_r.m4:               [gl_cv_func_ttyname_r_not_stub=no],
m4/ttyname_r.m4:                gl_cv_func_ttyname_r_not_stub="guessing no"
m4/ttyname_r.m4:          case "$gl_cv_func_ttyname_r_not_stub" in
m4/ttyname_r.m4:          [gl_cv_func_ttyname_r_works],
m4/ttyname_r.m4:              solaris*) gl_cv_func_ttyname_r_works="guessing no" ;;
m4/ttyname_r.m4:              osf*)     gl_cv_func_ttyname_r_works="guessing no" ;;
m4/ttyname_r.m4:              *)        gl_cv_func_ttyname_r_works="guessing yes" ;;
m4/ttyname_r.m4:              [gl_cv_func_ttyname_r_works=yes],
m4/ttyname_r.m4:                 17 | 18) gl_cv_func_ttyname_r_works=no ;;
m4/ttyname_r.m4:        case "$gl_cv_func_ttyname_r_works" in
m4/ttyname_r.m4:AC_DEFUN([gl_PREREQ_TTYNAME_R], [
m4/tzname.m4:dnl gl_TZNAME tests how the time zone can be obtained.
m4/tzname.m4:AC_DEFUN([gl_TZNAME],
m4/tzname.m4:      [gl_cv_var_tzname],
m4/tzname.m4:         [gl_cv_var_tzname=yes],
m4/tzname.m4:         [gl_cv_var_tzname=no])
m4/tzname.m4:    if test $gl_cv_var_tzname = yes; then
m4/tzset.m4:AC_DEFUN([gl_FUNC_TZSET],
m4/tzset.m4:  AC_REQUIRE([gl_TIME_H_DEFAULTS])
m4/uchar_h.m4:AC_DEFUN_ONCE([gl_UCHAR_H],
m4/uchar_h.m4:  AC_REQUIRE([gl_UCHAR_H_DEFAULTS])
m4/uchar_h.m4:  gl_CHECK_NEXT_HEADERS([uchar.h])
m4/uchar_h.m4:  gl_TYPE_CHAR8_T
m4/uchar_h.m4:  gl_TYPE_CHAR16_T
m4/uchar_h.m4:  gl_TYPE_CHAR32_T
m4/uchar_h.m4:  m4_ifdef([gl_ANSI_CXX], [AC_REQUIRE([gl_ANSI_CXX])])
m4/uchar_h.m4:        [gl_cv_cxx_has_uchar_types],
m4/uchar_h.m4:         gl_command="$CXX $CXXFLAGS $CPPFLAGS -c conftest.cpp"
m4/uchar_h.m4:         if AC_TRY_EVAL([gl_command]); then
m4/uchar_h.m4:           gl_cv_cxx_has_uchar_types=yes
m4/uchar_h.m4:           gl_cv_cxx_has_uchar_types=no
m4/uchar_h.m4:      if test $gl_cv_cxx_has_uchar_types = yes; then
m4/uchar_h.m4:        [gl_cv_cxx_has_char8_type],
m4/uchar_h.m4:         gl_command="$CXX $CXXFLAGS $CPPFLAGS -c conftest.cpp"
m4/uchar_h.m4:         if AC_TRY_EVAL([gl_command]); then
m4/uchar_h.m4:           gl_cv_cxx_has_char8_type=yes
m4/uchar_h.m4:           gl_cv_cxx_has_char8_type=no
m4/uchar_h.m4:      if test $gl_cv_cxx_has_char8_type = yes; then
m4/uchar_h.m4:  gl_STDINT_BITSIZEOF([wchar_t], [gl_STDINT_INCLUDES])
m4/uchar_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/uchar_h.m4:AC_DEFUN_ONCE([gl_TYPE_CHAR8_T],
m4/uchar_h.m4:    [gl_cv_type_char8_t_works],
m4/uchar_h.m4:       [gl_cv_type_char8_t_works=yes],
m4/uchar_h.m4:       [gl_cv_type_char8_t_works=no])
m4/uchar_h.m4:  if test $gl_cv_type_char8_t_works = no; then
m4/uchar_h.m4:AC_DEFUN_ONCE([gl_TYPE_CHAR16_T],
m4/uchar_h.m4:    [gl_cv_type_char16_t_works],
m4/uchar_h.m4:       [gl_cv_type_char16_t_works=yes],
m4/uchar_h.m4:       [gl_cv_type_char16_t_works=no])
m4/uchar_h.m4:  if test $gl_cv_type_char16_t_works = no; then
m4/uchar_h.m4:AC_DEFUN_ONCE([gl_TYPE_CHAR32_T],
m4/uchar_h.m4:    [gl_cv_type_char32_t_works],
m4/uchar_h.m4:       [gl_cv_type_char32_t_works=yes],
m4/uchar_h.m4:       [gl_cv_type_char32_t_works=no])
m4/uchar_h.m4:  if test $gl_cv_type_char32_t_works = no; then
m4/uchar_h.m4:# gl_UCHAR_MODULE_INDICATOR([modulename])
m4/uchar_h.m4:AC_DEFUN([gl_UCHAR_MODULE_INDICATOR],
m4/uchar_h.m4:  gl_UCHAR_H_REQUIRE_DEFAULTS
m4/uchar_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/uchar_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/uchar_h.m4:AC_DEFUN([gl_UCHAR_H_REQUIRE_DEFAULTS],
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_BTOC32])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISALNUM])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISALPHA])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISBLANK])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISCNTRL])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISDIGIT])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISGRAPH])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISLOWER])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISPRINT])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISPUNCT])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISSPACE])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISUPPER])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32ISXDIGIT])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32TOLOWER])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32TOUPPER])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32WIDTH])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32RTOMB])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32SNRTOMBS])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32SRTOMBS])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32STOMBS])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32SWIDTH])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32TOB])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32_APPLY_MAPPING])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32_APPLY_TYPE_TEST])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32_GET_MAPPING])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_C32_GET_TYPE_TEST])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBRTOC16])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBRTOC32])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSNRTOC32S])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSRTOC32S])
m4/uchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSTOC32S])
m4/uchar_h.m4:  AC_REQUIRE([gl_UCHAR_H_DEFAULTS])
m4/uchar_h.m4:AC_DEFUN([gl_UCHAR_H_DEFAULTS],
m4/uname.m4:AC_DEFUN([gl_FUNC_UNAME],
m4/uname.m4:  AC_REQUIRE([gl_SYS_UTSNAME_H_DEFAULTS])
m4/uname.m4:AC_DEFUN([gl_PREREQ_UNAME], [
m4/ungetc.m4:AC_DEFUN_ONCE([gl_FUNC_UNGETC_WORKS],
m4/ungetc.m4:    [gl_cv_func_ungetc_works],
m4/ungetc.m4:        [gl_cv_func_ungetc_works=yes], [gl_cv_func_ungetc_works=no],
m4/ungetc.m4:           *-gnu* | gnu*)      gl_cv_func_ungetc_works="guessing yes" ;;
m4/ungetc.m4:           *-musl* | midipix*) gl_cv_func_ungetc_works="guessing yes" ;;
m4/ungetc.m4:           *-android*)         gl_cv_func_ungetc_works="guessing yes" ;;
m4/ungetc.m4:           mingw* | windows*)  gl_cv_func_ungetc_works="guessing yes" ;;
m4/ungetc.m4:           *)                  gl_cv_func_ungetc_works="$gl_cross_guess_normal" ;;
m4/ungetc.m4:  gl_ftello_broken_after_ungetc=no
m4/ungetc.m4:  case "$gl_cv_func_ungetc_works" in
m4/ungetc.m4:        darwin*) gl_ftello_broken_after_ungetc=yes ;;
m4/unicase_h.m4:AC_DEFUN_ONCE([gl_UNICASE_H],
m4/unicase_h.m4:  AC_REQUIRE([gl_UNICASE_H_DEFAULTS])
m4/unicase_h.m4:# gl_UNICASE_MODULE_INDICATOR([modulename])
m4/unicase_h.m4:AC_DEFUN([gl_UNICASE_MODULE_INDICATOR],
m4/unicase_h.m4:  gl_UNICASE_H_REQUIRE_DEFAULTS
m4/unicase_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/unicase_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/unicase_h.m4:AC_DEFUN([gl_UNICASE_H_REQUIRE_DEFAULTS],
m4/unicase_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICASE_EMPTY_PREFIX_CONTEXT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unicase_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICASE_EMPTY_SUFFIX_CONTEXT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unicase_h.m4:  AC_REQUIRE([gl_UNICASE_H_DEFAULTS])
m4/unicase_h.m4:AC_DEFUN([gl_UNICASE_H_DEFAULTS],
m4/unicodeio.m4:AC_DEFUN([gl_UNICODEIO],
m4/unicodeio.m4:  gl_MUSL_LIBC
m4/unictype_h.m4:AC_DEFUN_ONCE([gl_UNICTYPE_H],
m4/unictype_h.m4:  AC_REQUIRE([gl_UNICTYPE_H_DEFAULTS])
m4/unictype_h.m4:# gl_UNICTYPE_MODULE_INDICATOR([modulename])
m4/unictype_h.m4:AC_DEFUN([gl_UNICTYPE_MODULE_INDICATOR],
m4/unictype_h.m4:  gl_UNICTYPE_H_REQUIRE_DEFAULTS
m4/unictype_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/unictype_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/unictype_h.m4:AC_DEFUN([gl_UNICTYPE_H_REQUIRE_DEFAULTS],
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_L_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_LC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_LU_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_LL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_LT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_LM_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_LO_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_M_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_MN_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_MC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_ME_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_N_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_ND_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_NL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_NO_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_P_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_PC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_PD_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_PS_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_PE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_PI_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_PF_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_PO_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_S_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_SM_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_SC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_SK_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_SO_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_Z_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_ZS_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_ZL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_ZP_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_C_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_CC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_CF_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_CS_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_CO_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_CATEGORY_CN_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_WHITE_SPACE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ALPHABETIC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_ALPHABETIC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_NOT_A_CHARACTER_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_DEFAULT_IGNORABLE_CODE_POINT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_DEFAULT_IGNORABLE_CODE_POINT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_DEPRECATED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_LOGICAL_ORDER_EXCEPTION_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_VARIATION_SELECTOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_PRIVATE_USE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_UNASSIGNED_CODE_VALUE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_UPPERCASE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_UPPERCASE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_LOWERCASE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_LOWERCASE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_TITLECASE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CASED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CASE_IGNORABLE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CHANGES_WHEN_LOWERCASED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CHANGES_WHEN_UPPERCASED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CHANGES_WHEN_TITLECASED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CHANGES_WHEN_CASEFOLDED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CHANGES_WHEN_CASEMAPPED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_SOFT_DOTTED_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ID_START_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_ID_START_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ID_CONTINUE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_ID_CONTINUE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_XID_START_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_XID_CONTINUE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ID_COMPAT_MATH_START_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ID_COMPAT_MATH_CONTINUE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_PATTERN_WHITE_SPACE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_PATTERN_SYNTAX_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_JOIN_CONTROL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_GRAPHEME_BASE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_GRAPHEME_EXTEND_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_GRAPHEME_EXTEND_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_GRAPHEME_LINK_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_CONTROL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_LEFT_TO_RIGHT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_HEBREW_RIGHT_TO_LEFT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_ARABIC_RIGHT_TO_LEFT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_EUROPEAN_DIGIT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_EUR_NUM_SEPARATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_EUR_NUM_TERMINATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_ARABIC_DIGIT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_COMMON_SEPARATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_BLOCK_SEPARATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_SEGMENT_SEPARATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_WHITESPACE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_NON_SPACING_MARK_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_BOUNDARY_NEUTRAL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_PDF_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_EMBEDDING_OR_OVERRIDE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_BIDI_OTHER_NEUTRAL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_HEX_DIGIT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ASCII_HEX_DIGIT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_IDEOGRAPHIC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_UNIFIED_IDEOGRAPH_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_RADICAL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_IDS_UNARY_OPERATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_IDS_BINARY_OPERATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_IDS_TRINARY_OPERATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_EMOJI_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_EMOJI_PRESENTATION_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_EMOJI_MODIFIER_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_EMOJI_MODIFIER_BASE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_EMOJI_COMPONENT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_EXTENDED_PICTOGRAPHIC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ZERO_WIDTH_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_SPACE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_NON_BREAK_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_ISO_CONTROL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_FORMAT_CONTROL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_PREPENDED_CONCATENATION_MARK_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_DASH_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_HYPHEN_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_PUNCTUATION_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_LINE_SEPARATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_PARAGRAPH_SEPARATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_QUOTATION_MARK_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_SENTENCE_TERMINAL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_TERMINAL_PUNCTUATION_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_CURRENCY_SYMBOL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_MATH_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_OTHER_MATH_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_PAIRED_PUNCTUATION_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_LEFT_OF_PAIR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_COMBINING_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_COMPOSITE_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_DECIMAL_DIGIT_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_NUMERIC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_DIACRITIC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_EXTENDER_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_IGNORABLE_CONTROL_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNICTYPE_PROPERTY_REGIONAL_INDICATOR_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unictype_h.m4:  AC_REQUIRE([gl_UNICTYPE_H_DEFAULTS])
m4/unictype_h.m4:AC_DEFUN([gl_UNICTYPE_H_DEFAULTS],
m4/unimetadata_h.m4:AC_DEFUN_ONCE([gl_UNIMETADATA_H],
m4/unimetadata_h.m4:  AC_REQUIRE([gl_UNIMETADATA_H_DEFAULTS])
m4/unimetadata_h.m4:# gl_UNIMETADATA_MODULE_INDICATOR([modulename])
m4/unimetadata_h.m4:AC_DEFUN([gl_UNIMETADATA_MODULE_INDICATOR],
m4/unimetadata_h.m4:  gl_UNIMETADATA_H_REQUIRE_DEFAULTS
m4/unimetadata_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/unimetadata_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/unimetadata_h.m4:AC_DEFUN([gl_UNIMETADATA_H_REQUIRE_DEFAULTS],
m4/unimetadata_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNIMETADATA_UNICODE_VERSION_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/unimetadata_h.m4:  AC_REQUIRE([gl_UNIMETADATA_H_DEFAULTS])
m4/unimetadata_h.m4:AC_DEFUN([gl_UNIMETADATA_H_DEFAULTS],
m4/uninorm_h.m4:AC_DEFUN_ONCE([gl_UNINORM_H],
m4/uninorm_h.m4:  AC_REQUIRE([gl_UNINORM_H_DEFAULTS])
m4/uninorm_h.m4:# gl_UNINORM_MODULE_INDICATOR([modulename])
m4/uninorm_h.m4:AC_DEFUN([gl_UNINORM_MODULE_INDICATOR],
m4/uninorm_h.m4:  gl_UNINORM_H_REQUIRE_DEFAULTS
m4/uninorm_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/uninorm_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/uninorm_h.m4:AC_DEFUN([gl_UNINORM_H_REQUIRE_DEFAULTS],
m4/uninorm_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNINORM_NFD_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/uninorm_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNINORM_NFC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/uninorm_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNINORM_NFKD_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/uninorm_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNINORM_NFKC_DLL_VARIABLE], ['LIBUNISTRING_DLL_VARIABLE'])
m4/uninorm_h.m4:  AC_REQUIRE([gl_UNINORM_H_DEFAULTS])
m4/uninorm_h.m4:AC_DEFUN([gl_UNINORM_H_DEFAULTS],
m4/unistd-safer.m4:AC_DEFUN([gl_UNISTD_SAFER],
m4/unistd_h.m4:AC_DEFUN_ONCE([gl_UNISTD_H],
m4/unistd_h.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/unistd_h.m4:  gl_CHECK_NEXT_HEADERS([unistd.h])
m4/unistd_h.m4:  AC_REQUIRE([gl_TYPE_OFF_T])
m4/unistd_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/unistd_h.m4:# gl_UNISTD_MODULE_INDICATOR([modulename])
m4/unistd_h.m4:AC_DEFUN([gl_UNISTD_MODULE_INDICATOR],
m4/unistd_h.m4:  gl_UNISTD_H_REQUIRE_DEFAULTS
m4/unistd_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/unistd_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/unistd_h.m4:AC_DEFUN([gl_UNISTD_H_REQUIRE_DEFAULTS],
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ACCESS])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CHDIR])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CHOWN])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_CLOSE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_COPY_FILE_RANGE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_DUP])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_DUP2])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_DUP3])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ENVIRON])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EUIDACCESS])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXECL])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXECLE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXECLP])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXECV])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXECVE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXECVP])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_EXECVPE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FACCESSAT])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FCHDIR])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FCHOWNAT])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FDATASYNC])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FSYNC])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_FTRUNCATE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETCWD])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETDOMAINNAME])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETDTABLESIZE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETENTROPY])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETGROUPS])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETHOSTNAME])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETLOGIN])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETLOGIN_R])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETOPT_POSIX])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPAGESIZE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPASS])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETPASS_GNU])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GETUSERSHELL])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_GROUP_MEMBER])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISATTY])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LCHOWN])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LINK])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LINKAT])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LSEEK])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PIPE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PIPE2])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PREAD])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_PWRITE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_READ])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_READLINK])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_READLINKAT])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_RMDIR])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SETHOSTNAME])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SLEEP])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SYMLINK])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_SYMLINKAT])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TRUNCATE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TTYNAME_R])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNISTD_H_GETOPT])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNISTD_H_NONBLOCKING])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNISTD_H_SIGPIPE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNLINK])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UNLINKAT])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_USLEEP])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WRITE])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_ACCESS], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_CHDIR], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_CLOSE], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_DUP], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_DUP2], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_EXECL], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_EXECLE], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_EXECLP], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_EXECV], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_EXECVE], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_EXECVP], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_EXECVPE], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_GETCWD], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_GETPID], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_ISATTY], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_LSEEK], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_READ], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_RMDIR], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_SWAB], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_UNLINK], [1])
m4/unistd_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_WRITE], [1])
m4/unistd_h.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/unistd_h.m4:AC_DEFUN([gl_UNISTD_H_DEFAULTS],
m4/unlink-busy.m4:AC_DEFUN([gl_FUNC_UNLINK_BUSY_TEXT],
m4/unlink-busy.m4:    [gl_cv_func_unlink_busy_text],
m4/unlink-busy.m4:        [gl_cv_func_unlink_busy_text=yes],
m4/unlink-busy.m4:        [gl_cv_func_unlink_busy_text=no],
m4/unlink-busy.m4:           mingw* | windows*) gl_cv_func_unlink_busy_text="guessing no" ;;
m4/unlink-busy.m4:           *)                 gl_cv_func_unlink_busy_text="guessing no" ;;
m4/unlink-busy.m4:  case "$gl_cv_func_unlink_busy_text" in
m4/unlink.m4:AC_DEFUN([gl_FUNC_UNLINK],
m4/unlink.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/unlink.m4:    [gl_cv_func_unlink_honors_slashes],
m4/unlink.m4:      [gl_cv_func_unlink_honors_slashes=yes],
m4/unlink.m4:      [gl_cv_func_unlink_honors_slashes=no],
m4/unlink.m4:         linux-* | linux)   gl_cv_func_unlink_honors_slashes="guessing yes" ;;
m4/unlink.m4:         midipix*)          gl_cv_func_unlink_honors_slashes="guessing yes" ;;
m4/unlink.m4:         *-gnu*)            gl_cv_func_unlink_honors_slashes="guessing yes" ;;
m4/unlink.m4:         mingw* | windows*) gl_cv_func_unlink_honors_slashes="guessing no" ;;
m4/unlink.m4:         *)                 gl_cv_func_unlink_honors_slashes="$gl_cross_guess_normal" ;;
m4/unlink.m4:  case "$gl_cv_func_unlink_honors_slashes" in
m4/unlink.m4:    [gl_cv_func_unlink_parent_fails],
m4/unlink.m4:             [gl_cv_func_unlink_parent_fails=yes],
m4/unlink.m4:             [gl_cv_func_unlink_parent_fails=no],
m4/unlink.m4:              gl_cv_func_unlink_parent_fails="$gl_cross_guess_normal"
m4/unlink.m4:           gl_cv_func_unlink_parent_fails="guessing no"
m4/unlink.m4:         gl_cv_func_unlink_parent_fails="guessing yes"
m4/unlink.m4:  case "$gl_cv_func_unlink_parent_fails" in
m4/unlinkat.m4:AC_DEFUN([gl_FUNC_UNLINKAT],
m4/unlinkat.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/unlinkat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/unlinkat.m4:  AC_REQUIRE([gl_FUNC_UNLINK])
m4/unlinkat.m4:  AC_REQUIRE([gl_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
m4/unlinkat.m4:    case "$gl_cv_func_lstat_dereferences_slashed_symlink" in
m4/unlinkdir.m4:AC_DEFUN([gl_UNLINKDIR],
m4/unlocked-io.m4:AC_DEFUN([gl_FUNC_GLIBC_UNLOCKED_IO],
m4/unlocked-io.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/unlockpt.m4:AC_DEFUN([gl_FUNC_UNLOCKPT],
m4/unlockpt.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/unlockpt.m4:AC_DEFUN([gl_PREREQ_UNLOCKPT], [
m4/uptime.m4:AC_DEFUN([gl_SYS_PROC_UPTIME],
m4/uptime.m4:  AC_CACHE_CHECK([for /proc/uptime], [gl_cv_have_proc_uptime],
m4/uptime.m4:  [gl_cv_have_proc_uptime=no
m4/uptime.m4:      && gl_cv_have_proc_uptime=yes])
m4/uptime.m4:  if test $gl_cv_have_proc_uptime = yes; then
m4/userspec.m4:AC_DEFUN([gl_USERSPEC],
m4/usleep.m4:AC_DEFUN([gl_FUNC_USLEEP],
m4/usleep.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/usleep.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/usleep.m4:      [gl_cv_func_usleep_works],
m4/usleep.m4:        [gl_cv_func_usleep_works=yes], [gl_cv_func_usleep_works=no],
m4/usleep.m4:           *-gnu* | gnu*)     gl_cv_func_usleep_works="guessing yes" ;;
m4/usleep.m4:           *-musl*)           gl_cv_func_usleep_works="guessing yes" ;;
m4/usleep.m4:           midipix*)          gl_cv_func_usleep_works="guessing yes" ;;
m4/usleep.m4:           mingw* | windows*) gl_cv_func_usleep_works="guessing no" ;;
m4/usleep.m4:           *)                 gl_cv_func_usleep_works="$gl_cross_guess_normal" ;;
m4/usleep.m4:    case "$gl_cv_func_usleep_works" in
m4/utime.m4:AC_DEFUN([gl_FUNC_UTIME],
m4/utime.m4:  AC_REQUIRE([gl_UTIME_H_DEFAULTS])
m4/utime.m4:          [gl_cv_func_utime_file_slash],
m4/utime.m4:             [gl_cv_func_utime_file_slash=yes],
m4/utime.m4:             [gl_cv_func_utime_file_slash=no],
m4/utime.m4:                linux* | midipix*) gl_cv_func_utime_file_slash="guessing yes" ;;
m4/utime.m4:                *-gnu* | gnu*)     gl_cv_func_utime_file_slash="guessing yes" ;;
m4/utime.m4:                darwin*)           gl_cv_func_utime_file_slash="guessing no" ;;
m4/utime.m4:                  *)               gl_cv_func_utime_file_slash="$gl_cross_guess_normal" ;;
m4/utime.m4:        case $gl_cv_func_stat_file_slash in
m4/utime.m4:AC_DEFUN([gl_PREREQ_UTIME], [:])
m4/utimecmp.m4:AC_DEFUN([gl_UTIMECMP],
m4/utimecmp.m4:  AC_REQUIRE([gl_FUNC_UTIMES])
m4/utimens.m4:AC_DEFUN([gl_UTIMENS],
m4/utimens.m4:  AC_REQUIRE([gl_FUNC_UTIMES])
m4/utimens.m4:  AC_REQUIRE([gl_CHECK_TYPE_STRUCT_TIMESPEC])
m4/utimens.m4:  gl_CHECK_FUNCS_ANDROID([futimes], [[#include <sys/time.h>]])
m4/utimens.m4:  gl_CHECK_FUNCS_ANDROID([futimesat], [[#include <sys/time.h>]])
m4/utimens.m4:  gl_CHECK_FUNCS_ANDROID([lutimes], [[#include <sys/time.h>]])
m4/utimens.m4:  gl_CHECK_FUNCS_ANDROID([futimens], [[#include <sys/stat.h>]])
m4/utimens.m4:  gl_CHECK_FUNCS_ANDROID([utimensat], [[#include <sys/stat.h>]])
m4/utimens.m4:      [gl_cv_func_futimesat_works],
m4/utimens.m4:        [gl_cv_func_futimesat_works=yes],
m4/utimens.m4:        [gl_cv_func_futimesat_works=no],
m4/utimens.m4:           linux* | midipix*) gl_cv_func_futimesat_works="guessing yes" ;;
m4/utimens.m4:           *-gnu*)            gl_cv_func_futimesat_works="guessing yes" ;;
m4/utimens.m4:           *)                 gl_cv_func_futimesat_works="$gl_cross_guess_normal" ;;
m4/utimens.m4:    case "$gl_cv_func_futimesat_works" in
m4/utimensat.m4:AC_DEFUN([gl_FUNC_UTIMENSAT],
m4/utimensat.m4:  AC_REQUIRE([gl_SYS_STAT_H_DEFAULTS])
m4/utimensat.m4:  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])
m4/utimensat.m4:  gl_CHECK_FUNCS_ANDROID([utimensat], [[#include <sys/stat.h>]])
m4/utimensat.m4:    case "$gl_cv_onwards_func_utimensat" in
m4/utimensat.m4:      [gl_cv_func_utimensat_works],
m4/utimensat.m4:         [gl_cv_func_utimensat_works=yes],
m4/utimensat.m4:            2) gl_cv_func_utimensat_works='nearly' ;;
m4/utimensat.m4:            *) gl_cv_func_utimensat_works=no ;;
m4/utimensat.m4:              gl_cv_func_utimensat_works="guessing yes" ;;
m4/utimensat.m4:              gl_cv_func_utimensat_works="guessing yes" ;;
m4/utimensat.m4:              gl_cv_func_utimensat_works="guessing nearly" ;;
m4/utimensat.m4:              gl_cv_func_utimensat_works="$gl_cross_guess_normal" ;;
m4/utimensat.m4:    case "$gl_cv_func_utimensat_works" in
m4/utimes.m4:AC_DEFUN([gl_FUNC_UTIMES],
m4/utimes.m4:                 [gl_cv_func_working_utimes],
m4/utimes.m4:       [gl_cv_func_working_utimes=yes],
m4/utimes.m4:       [gl_cv_func_working_utimes=no],
m4/utimes.m4:          *-musl*)           gl_cv_func_working_utimes="guessing yes" ;;
m4/utimes.m4:          mingw* | windows*) gl_cv_func_working_utimes="guessing no" ;;
m4/utimes.m4:          *)                 gl_cv_func_working_utimes="$gl_cross_guess_normal" ;;
m4/utimes.m4:  case "$gl_cv_func_working_utimes" in
m4/utime_h.m4:AC_DEFUN_ONCE([gl_UTIME_H],
m4/utime_h.m4:  AC_REQUIRE([gl_UTIME_H_DEFAULTS])
m4/utime_h.m4:  m4_ifdef([gl_ANSI_CXX], [AC_REQUIRE([gl_ANSI_CXX])])
m4/utime_h.m4:  gl_CHECK_NEXT_HEADERS([utime.h])
m4/utime_h.m4:  gl_WARN_ON_USE_PREPARE([[#include <utime.h>
m4/utime_h.m4:# gl_UTIME_MODULE_INDICATOR([modulename])
m4/utime_h.m4:AC_DEFUN([gl_UTIME_MODULE_INDICATOR],
m4/utime_h.m4:  gl_UTIME_H_REQUIRE_DEFAULTS
m4/utime_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/utime_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/utime_h.m4:AC_DEFUN([gl_UTIME_H_REQUIRE_DEFAULTS],
m4/utime_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_UTIME])
m4/utime_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_UTIME], [1])
m4/utime_h.m4:  AC_REQUIRE([gl_UTIME_H_DEFAULTS])
m4/utime_h.m4:AC_DEFUN([gl_UTIME_H_DEFAULTS],
m4/utmp_h.m4:AC_DEFUN_ONCE([gl_UTMP_H],
m4/utmp_h.m4:  AC_REQUIRE([gl_UTMP_H_DEFAULTS])
m4/utmp_h.m4:  gl_CHECK_NEXT_HEADERS([utmp.h])
m4/utmp_h.m4:  gl_PTY_CHECK_UTIL_H
m4/utmp_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/utmp_h.m4:# gl_UTMP_MODULE_INDICATOR([modulename])
m4/utmp_h.m4:AC_DEFUN([gl_UTMP_MODULE_INDICATOR],
m4/utmp_h.m4:  gl_UTMP_H_REQUIRE_DEFAULTS
m4/utmp_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/utmp_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/utmp_h.m4:AC_DEFUN([gl_UTMP_H_REQUIRE_DEFAULTS],
m4/utmp_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_LOGIN_TTY])
m4/utmp_h.m4:  AC_REQUIRE([gl_UTMP_H_DEFAULTS])
m4/utmp_h.m4:AC_DEFUN([gl_UTMP_H_DEFAULTS],
m4/utmp_h.m4:  AC_REQUIRE([gl_PTY_H_DEFAULTS])
m4/utmp_h.m4:  AC_REQUIRE([gl_TERMIOS_H_DEFAULTS])
m4/va-args.m4:AC_DEFUN([gl_VA_ARGS],
m4/va-args.m4:    [gl_cv_c_va_args],
m4/va-args.m4:      [gl_cv_c_va_args=yes], [gl_cv_c_va_args=no])
m4/va-args.m4:  if test $gl_cv_c_va_args = yes; then
m4/valgrind-helper.m4:AC_DEFUN_ONCE([gl_VALGRIND_HELPER],
m4/valgrind-tests.m4:# gl_VALGRIND_TESTS()
m4/valgrind-tests.m4:# by calling gl_VALGRIND_TESTS_DEFAULT_NO in configure.ac.
m4/valgrind-tests.m4:AC_DEFUN([gl_VALGRIND_TESTS_DEFAULT_NO],
m4/valgrind-tests.m4:  gl_valgrind_tests_default=no
m4/valgrind-tests.m4:AC_DEFUN_ONCE([gl_VALGRIND_TESTS],
m4/valgrind-tests.m4:    [opt_valgrind_tests=$enableval], [opt_valgrind_tests=${gl_valgrind_tests_default:-yes}])
m4/valgrind-tests.m4:        [gl_cv_opt_valgrind_tests],
m4/valgrind-tests.m4:               [gl_cv_opt_valgrind_tests="$DEFAULT_VALGRINDFLAGS $VALGRINDFLAGS"],
m4/valgrind-tests.m4:               [gl_cv_opt_valgrind_tests=no])
m4/valgrind-tests.m4:      if test "$gl_cv_opt_valgrind_tests" != no; then
m4/valgrind-tests.m4:        VALGRIND="$VALGRIND $gl_cv_opt_valgrind_tests"
m4/valgrind-tests.m4:        [gl_cv_prog_valgrind_works],
m4/valgrind-tests.m4:           [$VALGRIND $gl_cv_opt_valgrind_tests ./conftest$ac_exeext 2>/dev/null
m4/valgrind-tests.m4:              gl_cv_prog_valgrind_works=yes
m4/valgrind-tests.m4:              gl_cv_prog_valgrind_works=no
m4/valgrind-tests.m4:           [gl_cv_prog_valgrind_works=no])
m4/valgrind-tests.m4:    if test "$gl_cv_prog_valgrind_works" != yes; then
m4/vasnprintf-gnu.m4:AC_DEFUN([gl_FUNC_VASNPRINTF_GNU],
m4/vasnprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VASNPRINTF_IS_POSIX])
m4/vasnprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vasnprintf-gnu.m4:  gl_cv_func_vasnprintf_gnu=no
m4/vasnprintf-gnu.m4:  if test $gl_cv_func_vasnprintf_posix = yes; then
m4/vasnprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vasnprintf-gnu.m4:        gl_cv_func_vasnprintf_gnu=yes
m4/vasnprintf-gnu.m4:  if test $gl_cv_func_vasnprintf_gnu = no; then
m4/vasnprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vasnprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/vasnprintf-posix.m4:AC_DEFUN([gl_FUNC_VASNPRINTF_POSIX],
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VASNPRINTF_IS_POSIX])
m4/vasnprintf-posix.m4:  if test $gl_cv_func_vasnprintf_posix = no; then
m4/vasnprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vasnprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/vasnprintf-posix.m4:dnl Result is gl_cv_func_vasnprintf_posix.
m4/vasnprintf-posix.m4:AC_DEFUN_ONCE([gl_FUNC_VASNPRINTF_IS_POSIX],
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/vasnprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/vasnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/vasnprintf-posix.m4:  gl_cv_func_vasnprintf_posix=no
m4/vasnprintf-posix.m4:  case "$gl_cv_func_printf_sizes_c99" in
m4/vasnprintf-posix.m4:      case "$gl_cv_func_printf_sizes_c23" in
m4/vasnprintf-posix.m4:          case "$gl_cv_func_printf_long_double" in
m4/vasnprintf-posix.m4:              case "$gl_cv_func_printf_infinite" in
m4/vasnprintf-posix.m4:                  case "$gl_cv_func_printf_infinite_long_double" in
m4/vasnprintf-posix.m4:                      case "$gl_cv_func_printf_directive_a" in
m4/vasnprintf-posix.m4:                          case "$gl_cv_func_printf_directive_b" in
m4/vasnprintf-posix.m4:                              case "$gl_cv_func_printf_directive_f" in
m4/vasnprintf-posix.m4:                                  case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/vasnprintf-posix.m4:                                      case "$gl_cv_func_printf_directive_ls" in
m4/vasnprintf-posix.m4:                                          case "$gl_cv_func_printf_directive_lc" in
m4/vasnprintf-posix.m4:                                              case "$gl_cv_func_printf_positions" in
m4/vasnprintf-posix.m4:                                                  case "$gl_cv_func_printf_flag_grouping" in
m4/vasnprintf-posix.m4:                                                      case "$gl_cv_func_printf_flag_leftadjust" in
m4/vasnprintf-posix.m4:                                                          case "$gl_cv_func_printf_flag_zero" in
m4/vasnprintf-posix.m4:                                                              case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/vasnprintf-posix.m4:                                                                  case "$gl_cv_func_printf_precision" in
m4/vasnprintf-posix.m4:                                                                      case "$gl_cv_func_printf_enomem" in
m4/vasnprintf-posix.m4:                                                                            gl_cv_func_vasnprintf_posix=yes
m4/vasnprintf.m4:AC_DEFUN([gl_FUNC_VASNPRINTF],
m4/vasnprintf.m4:      [gl_cv_func_vasnprintf_works],
m4/vasnprintf.m4:         [gl_cv_func_vasnprintf_works=yes],
m4/vasnprintf.m4:         [gl_cv_func_vasnprintf_works=no],
m4/vasnprintf.m4:            cygwin*) gl_cv_func_vasnprintf_works="guessing no";;
m4/vasnprintf.m4:            *)       gl_cv_func_vasnprintf_works="$gl_cross_guess_normal";;
m4/vasnprintf.m4:     || case "$gl_cv_func_vasnprintf_works" in
m4/vasnprintf.m4:    gl_REPLACE_VASNPRINTF
m4/vasnprintf.m4:AC_DEFUN([gl_REPLACE_VASNPRINTF],
m4/vasnprintf.m4:  gl_PREREQ_PRINTF_ARGS
m4/vasnprintf.m4:  gl_PREREQ_PRINTF_PARSE
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF
m4/vasnprintf.m4:  gl_PREREQ_ASNPRINTF
m4/vasnprintf.m4:AC_DEFUN([gl_FUNC_VASNWPRINTF],
m4/vasnprintf.m4:  gl_PREREQ_PRINTF_ARGS
m4/vasnprintf.m4:  gl_PREREQ_PRINTF_PARSE
m4/vasnprintf.m4:  gl_PREREQ_VASNWPRINTF
m4/vasnprintf.m4:  gl_PREREQ_ASNPRINTF
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_PRINTF_ARGS],
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_PRINTF_PARSE],
m4/vasnprintf.m4:  AC_REQUIRE([gl_FEATURES_H])
m4/vasnprintf.m4:AC_DEFUN_ONCE([gl_PREREQ_VASNPRINTF],
m4/vasnprintf.m4:  AC_REQUIRE([gl_SNPRINTF_RETVAL_C99])
m4/vasnprintf.m4:  case "$gl_cv_func_snprintf_retval_c99" in
m4/vasnprintf.m4:  AC_REQUIRE([gl_SNPRINTF_TRUNCATION_C99])
m4/vasnprintf.m4:  case "$gl_cv_func_snprintf_truncation_c99" in
m4/vasnprintf.m4:  gl_PREREQ_VASNXPRINTF
m4/vasnprintf.m4:AC_DEFUN_ONCE([gl_PREREQ_VASNWPRINTF],
m4/vasnprintf.m4:  gl_SWPRINTF_WORKS
m4/vasnprintf.m4:  case "$gl_cv_func_swprintf_works" in
m4/vasnprintf.m4:  gl_MBRTOWC_C_LOCALE
m4/vasnprintf.m4:  case "$gl_cv_func_mbrtowc_C_locale_sans_EILSEQ" in
m4/vasnprintf.m4:        [gl_cv_func_swprintf_C_locale_sans_EILSEQ],
m4/vasnprintf.m4:            [gl_cv_func_swprintf_C_locale_sans_EILSEQ=yes],
m4/vasnprintf.m4:            [gl_cv_func_swprintf_C_locale_sans_EILSEQ=no],
m4/vasnprintf.m4:               *-gnu* | gnu*)      gl_cv_func_swprintf_C_locale_sans_EILSEQ="guessing yes";;
m4/vasnprintf.m4:               *-musl* | midipix*) gl_cv_func_swprintf_C_locale_sans_EILSEQ="guessing no";;
m4/vasnprintf.m4:               *)                  gl_cv_func_swprintf_C_locale_sans_EILSEQ="$gl_cross_guess_normal";;
m4/vasnprintf.m4:  if case "$gl_cv_func_mbrtowc_C_locale_sans_EILSEQ" in
m4/vasnprintf.m4:     || case "$gl_cv_func_swprintf_C_locale_sans_EILSEQ" in
m4/vasnprintf.m4:  gl_SWPRINTF_DIRECTIVE_LA
m4/vasnprintf.m4:  case "$gl_cv_func_swprintf_directive_la" in
m4/vasnprintf.m4:  gl_SWPRINTF_DIRECTIVE_LC
m4/vasnprintf.m4:  case "$gl_cv_func_swprintf_directive_lc" in
m4/vasnprintf.m4:  gl_MUSL_LIBC
m4/vasnprintf.m4:  gl_PREREQ_VASNXPRINTF
m4/vasnprintf.m4:AC_DEFUN_ONCE([gl_PREREQ_VASNXPRINTF],
m4/vasnprintf.m4:  AC_REQUIRE([gl_DOUBLE_EXPONENT_LOCATION])
m4/vasnprintf.m4:AC_DEFUN_ONCE([gl_PREREQ_VASNPRINTF_LONG_DOUBLE],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_long_double" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_INFINITE_DOUBLE],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_infinite" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_INFINITE_LONG_DOUBLE],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/vasnprintf.m4:  AC_REQUIRE([gl_PREREQ_VASNPRINTF_LONG_DOUBLE])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_long_double" in
m4/vasnprintf.m4:      case "$gl_cv_func_printf_infinite_long_double" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_DIRECTIVE_A],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_directive_a" in
m4/vasnprintf.m4:      gl_CHECK_FUNCS_ANDROID([nl_langinfo], [[#include <langinfo.h>]])
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_DIRECTIVE_B],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_directive_b" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_DIRECTIVE_F],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_directive_f" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_DIRECTIVE_LS],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_directive_ls" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_DIRECTIVE_LC],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_directive_lc" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_FLAG_GROUPING],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_flag_grouping" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_FLAG_LEFTADJUST],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_flag_leftadjust" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_FLAG_ZERO],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_flag_zero" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_FLAG_ALT_PRECISION_ZERO],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_PRECISION],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_precision" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_ENOMEM],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_enomem" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PREREQ_VASNPRINTF])
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_LONG_DOUBLE
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_INFINITE_DOUBLE
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_INFINITE_LONG_DOUBLE
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_DIRECTIVE_A
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_DIRECTIVE_B
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_DIRECTIVE_F
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_DIRECTIVE_LS
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_DIRECTIVE_LC
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_FLAG_GROUPING
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_FLAG_LEFTADJUST
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_FLAG_ZERO
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_FLAG_ALT_PRECISION_ZERO
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_PRECISION
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_ENOMEM
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_DIRECTIVE_UPPERCASE_B],
m4/vasnprintf.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vasnprintf.m4:  case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS],
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vasnprintf.m4:  gl_PREREQ_VASNPRINTF_DIRECTIVE_UPPERCASE_B
m4/vasnprintf.m4:AC_DEFUN([gl_PREREQ_ASNPRINTF],
m4/vasnwprintf-gnu.m4:AC_DEFUN([gl_FUNC_VASNWPRINTF_GNU],
m4/vasnwprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VASNWPRINTF_IS_POSIX])
m4/vasnwprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vasnwprintf-gnu.m4:  gl_cv_func_vasnwprintf_gnu=no
m4/vasnwprintf-gnu.m4:  if test $gl_cv_func_vasnwprintf_posix = yes; then
m4/vasnwprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vasnwprintf-gnu.m4:        gl_cv_func_vasnwprintf_gnu=yes
m4/vasnwprintf-gnu.m4:  if test $gl_cv_func_vasnwprintf_gnu = no; then
m4/vasnwprintf-gnu.m4:    dnl Note: This invokes gl_PREREQ_VASNPRINTF_DIRECTIVE_LC although not needed
m4/vasnwprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vasnwprintf-gnu.m4:    gl_FUNC_VASNWPRINTF
m4/vasnwprintf-posix.m4:AC_DEFUN([gl_FUNC_VASNWPRINTF_POSIX],
m4/vasnwprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VASNWPRINTF_IS_POSIX])
m4/vasnwprintf-posix.m4:  if test $gl_cv_func_vasnwprintf_posix = no; then
m4/vasnwprintf-posix.m4:    dnl Note: This invokes gl_PREREQ_VASNPRINTF_DIRECTIVE_LC although not needed
m4/vasnwprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vasnwprintf-posix.m4:    gl_FUNC_VASNWPRINTF
m4/vasnwprintf-posix.m4:dnl Result is gl_cv_func_vasnwprintf_posix.
m4/vasnwprintf-posix.m4:AC_DEFUN([gl_FUNC_VASNWPRINTF_IS_POSIX],
m4/vasnwprintf-posix.m4:  gl_cv_func_vasnwprintf_posix=no
m4/vasprintf-gnu.m4:AC_DEFUN([gl_FUNC_VASPRINTF_GNU],
m4/vasprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VASPRINTF_IS_POSIX])
m4/vasprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vasprintf-gnu.m4:  gl_cv_func_vasprintf_gnu=no
m4/vasprintf-gnu.m4:  if test $gl_cv_func_vasprintf_posix = yes; then
m4/vasprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vasprintf-gnu.m4:        gl_cv_func_vasprintf_gnu=yes
m4/vasprintf-gnu.m4:  if test $gl_cv_func_vasprintf_gnu = no; then
m4/vasprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vasprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/vasprintf-gnu.m4:    gl_REPLACE_VASPRINTF
m4/vasprintf-posix.m4:AC_DEFUN([gl_FUNC_VASPRINTF_POSIX],
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VASPRINTF_IS_POSIX])
m4/vasprintf-posix.m4:  if test $gl_cv_func_vasprintf_posix = no; then
m4/vasprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vasprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/vasprintf-posix.m4:    gl_REPLACE_VASPRINTF
m4/vasprintf-posix.m4:dnl Result is gl_cv_func_vasprintf_posix.
m4/vasprintf-posix.m4:AC_DEFUN([gl_FUNC_VASPRINTF_IS_POSIX],
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/vasprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/vasprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/vasprintf-posix.m4:  gl_cv_func_vasprintf_posix=no
m4/vasprintf-posix.m4:  case "$gl_cv_func_printf_sizes_c99" in
m4/vasprintf-posix.m4:      case "$gl_cv_func_printf_sizes_c23" in
m4/vasprintf-posix.m4:          case "$gl_cv_func_printf_long_double" in
m4/vasprintf-posix.m4:              case "$gl_cv_func_printf_infinite" in
m4/vasprintf-posix.m4:                  case "$gl_cv_func_printf_infinite_long_double" in
m4/vasprintf-posix.m4:                      case "$gl_cv_func_printf_directive_a" in
m4/vasprintf-posix.m4:                          case "$gl_cv_func_printf_directive_b" in
m4/vasprintf-posix.m4:                              case "$gl_cv_func_printf_directive_f" in
m4/vasprintf-posix.m4:                                  case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/vasprintf-posix.m4:                                      case "$gl_cv_func_printf_directive_ls" in
m4/vasprintf-posix.m4:                                          case "$gl_cv_func_printf_directive_lc" in
m4/vasprintf-posix.m4:                                              case "$gl_cv_func_printf_positions" in
m4/vasprintf-posix.m4:                                                  case "$gl_cv_func_printf_flag_grouping" in
m4/vasprintf-posix.m4:                                                      case "$gl_cv_func_printf_flag_leftadjust" in
m4/vasprintf-posix.m4:                                                          case "$gl_cv_func_printf_flag_zero" in
m4/vasprintf-posix.m4:                                                              case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/vasprintf-posix.m4:                                                                  case "$gl_cv_func_printf_precision" in
m4/vasprintf-posix.m4:                                                                      case "$gl_cv_func_printf_enomem" in
m4/vasprintf-posix.m4:                                                                            gl_cv_func_vasprintf_posix=yes
m4/vasprintf.m4:AC_DEFUN([gl_FUNC_VASPRINTF],
m4/vasprintf.m4:    gl_REPLACE_VASPRINTF
m4/vasprintf.m4:AC_DEFUN([gl_REPLACE_VASPRINTF],
m4/vasprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vasprintf.m4:  gl_PREREQ_VASPRINTF_H
m4/vasprintf.m4:  gl_PREREQ_VASPRINTF
m4/vasprintf.m4:  gl_PREREQ_ASPRINTF
m4/vasprintf.m4:AC_DEFUN([gl_PREREQ_VASPRINTF_H],
m4/vasprintf.m4:AC_DEFUN([gl_PREREQ_VASPRINTF],
m4/vasprintf.m4:AC_DEFUN([gl_PREREQ_ASPRINTF],
m4/vdprintf-gnu.m4:AC_DEFUN([gl_FUNC_VDPRINTF_GNU],
m4/vdprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VDPRINTF_IS_POSIX])
m4/vdprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vdprintf-gnu.m4:  gl_cv_func_vdprintf_gnu=no
m4/vdprintf-gnu.m4:  if test $gl_cv_func_vdprintf_posix = yes; then
m4/vdprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vdprintf-gnu.m4:        gl_cv_func_vdprintf_gnu=yes
m4/vdprintf-gnu.m4:  if test $gl_cv_func_vdprintf_gnu = no; then
m4/vdprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vdprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/vdprintf-gnu.m4:    gl_REPLACE_VDPRINTF
m4/vdprintf-posix.m4:AC_DEFUN([gl_FUNC_VDPRINTF_POSIX],
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VDPRINTF_IS_POSIX])
m4/vdprintf-posix.m4:  if test $gl_cv_func_vdprintf_posix = no; then
m4/vdprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vdprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/vdprintf-posix.m4:    gl_REPLACE_VDPRINTF
m4/vdprintf-posix.m4:dnl Result is gl_cv_func_vdprintf_posix.
m4/vdprintf-posix.m4:AC_DEFUN([gl_FUNC_VDPRINTF_IS_POSIX],
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/vdprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/vdprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/vdprintf-posix.m4:  gl_cv_func_vdprintf_posix=no
m4/vdprintf-posix.m4:  gl_CHECK_FUNCS_ANDROID([vdprintf], [[#include <stdio.h>]])
m4/vdprintf-posix.m4:    case "$gl_cv_func_printf_sizes_c99" in
m4/vdprintf-posix.m4:        case "$gl_cv_func_printf_sizes_c23" in
m4/vdprintf-posix.m4:            case "$gl_cv_func_printf_long_double" in
m4/vdprintf-posix.m4:                case "$gl_cv_func_printf_infinite" in
m4/vdprintf-posix.m4:                    case "$gl_cv_func_printf_infinite_long_double" in
m4/vdprintf-posix.m4:                        case "$gl_cv_func_printf_directive_a" in
m4/vdprintf-posix.m4:                            case "$gl_cv_func_printf_directive_b" in
m4/vdprintf-posix.m4:                                case "$gl_cv_func_printf_directive_f" in
m4/vdprintf-posix.m4:                                    case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/vdprintf-posix.m4:                                        case "$gl_cv_func_printf_directive_ls" in
m4/vdprintf-posix.m4:                                            case "$gl_cv_func_printf_directive_lc" in
m4/vdprintf-posix.m4:                                                case "$gl_cv_func_printf_positions" in
m4/vdprintf-posix.m4:                                                    case "$gl_cv_func_printf_flag_grouping" in
m4/vdprintf-posix.m4:                                                        case "$gl_cv_func_printf_flag_leftadjust" in
m4/vdprintf-posix.m4:                                                            case "$gl_cv_func_printf_flag_zero" in
m4/vdprintf-posix.m4:                                                                case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/vdprintf-posix.m4:                                                                    case "$gl_cv_func_printf_precision" in
m4/vdprintf-posix.m4:                                                                        case "$gl_cv_func_printf_enomem" in
m4/vdprintf-posix.m4:                                                                            gl_cv_func_vdprintf_posix=yes
m4/vdprintf.m4:AC_DEFUN([gl_FUNC_VDPRINTF],
m4/vdprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vdprintf.m4:  gl_CHECK_FUNCS_ANDROID([vdprintf], [[#include <stdio.h>]])
m4/vdprintf.m4:    gl_REPLACE_VDPRINTF
m4/vdprintf.m4:AC_DEFUN([gl_REPLACE_VDPRINTF],
m4/vdprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vdprintf.m4:     || case "$gl_cv_onwards_func_vdprintf" in \
m4/vdprintf.m4:  gl_PREREQ_VDPRINTF
m4/vdprintf.m4:AC_DEFUN([gl_PREREQ_VDPRINTF], [:])
m4/version-etc.m4:m4_define([gl_VERSION_ETC_FLAG],
m4/version-etc.m4:AC_DEFUN([gl_VERSION_ETC],
m4/version-etc.m4:  gl_VERSION_ETC_FLAG([packager],
m4/version-etc.m4:  gl_VERSION_ETC_FLAG([packager-version],
m4/version-etc.m4:  gl_VERSION_ETC_FLAG([packager-bug-reports],
m4/vfprintf-gnu.m4:AC_DEFUN([gl_FUNC_VFPRINTF_GNU],
m4/vfprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VFPRINTF_IS_POSIX])
m4/vfprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vfprintf-gnu.m4:  gl_cv_func_vfprintf_gnu=no
m4/vfprintf-gnu.m4:  if test $gl_cv_func_vfprintf_posix = yes; then
m4/vfprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vfprintf-gnu.m4:        gl_cv_func_vfprintf_gnu=yes
m4/vfprintf-gnu.m4:  if test $gl_cv_func_vfprintf_gnu = no; then
m4/vfprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vfprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/vfprintf-gnu.m4:    gl_REPLACE_VFPRINTF
m4/vfprintf-posix.m4:AC_DEFUN([gl_FUNC_VFPRINTF_POSIX],
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VFPRINTF_IS_POSIX])
m4/vfprintf-posix.m4:  if test $gl_cv_func_vfprintf_posix = no; then
m4/vfprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vfprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/vfprintf-posix.m4:    gl_REPLACE_VFPRINTF
m4/vfprintf-posix.m4:dnl Result is gl_cv_func_vfprintf_posix.
m4/vfprintf-posix.m4:AC_DEFUN([gl_FUNC_VFPRINTF_IS_POSIX],
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/vfprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/vfprintf-posix.m4:  gl_cv_func_vfprintf_posix=no
m4/vfprintf-posix.m4:  case "$gl_cv_func_printf_sizes_c99" in
m4/vfprintf-posix.m4:      case "$gl_cv_func_printf_sizes_c23" in
m4/vfprintf-posix.m4:          case "$gl_cv_func_printf_long_double" in
m4/vfprintf-posix.m4:              case "$gl_cv_func_printf_infinite" in
m4/vfprintf-posix.m4:                  case "$gl_cv_func_printf_infinite_long_double" in
m4/vfprintf-posix.m4:                      case "$gl_cv_func_printf_directive_a" in
m4/vfprintf-posix.m4:                          case "$gl_cv_func_printf_directive_b" in
m4/vfprintf-posix.m4:                              case "$gl_cv_func_printf_directive_f" in
m4/vfprintf-posix.m4:                                  case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/vfprintf-posix.m4:                                      case "$gl_cv_func_printf_directive_ls" in
m4/vfprintf-posix.m4:                                          case "$gl_cv_func_printf_directive_lc" in
m4/vfprintf-posix.m4:                                              case "$gl_cv_func_printf_positions" in
m4/vfprintf-posix.m4:                                                  case "$gl_cv_func_printf_flag_grouping" in
m4/vfprintf-posix.m4:                                                      case "$gl_cv_func_printf_flag_leftadjust" in
m4/vfprintf-posix.m4:                                                          case "$gl_cv_func_printf_flag_zero" in
m4/vfprintf-posix.m4:                                                              case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/vfprintf-posix.m4:                                                                  case "$gl_cv_func_printf_precision" in
m4/vfprintf-posix.m4:                                                                      case "$gl_cv_func_printf_enomem" in
m4/vfprintf-posix.m4:                                                                          gl_cv_func_vfprintf_posix=yes
m4/vfprintf-posix.m4:AC_DEFUN([gl_REPLACE_VFPRINTF],
m4/vfprintf-posix.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vfprintf-posix.m4:  gl_PREREQ_VFPRINTF
m4/vfprintf-posix.m4:AC_DEFUN([gl_PREREQ_VFPRINTF], [:])
m4/visibility.m4:AC_DEFUN([gl_VISIBILITY],
m4/visibility.m4:      [gl_cv_cc_vis_werror],
m4/visibility.m4:      [gl_saved_CFLAGS="$CFLAGS"
m4/visibility.m4:         [gl_cv_cc_vis_werror=yes],
m4/visibility.m4:         [gl_cv_cc_vis_werror=no])
m4/visibility.m4:       CFLAGS="$gl_saved_CFLAGS"
m4/visibility.m4:      [gl_cv_cc_visibility],
m4/visibility.m4:      [gl_saved_CFLAGS="$CFLAGS"
m4/visibility.m4:       if test $gl_cv_cc_vis_werror = yes; then
m4/visibility.m4:         [gl_cv_cc_visibility=yes],
m4/visibility.m4:         [gl_cv_cc_visibility=no])
m4/visibility.m4:       CFLAGS="$gl_saved_CFLAGS"
m4/visibility.m4:    if test $gl_cv_cc_visibility = yes; then
m4/vprintf-gnu.m4:AC_DEFUN([gl_FUNC_VPRINTF_GNU],
m4/vprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VPRINTF_IS_POSIX])
m4/vprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vprintf-gnu.m4:  gl_cv_func_vprintf_gnu=no
m4/vprintf-gnu.m4:  if test $gl_cv_func_vprintf_posix = yes; then
m4/vprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vprintf-gnu.m4:        gl_cv_func_vprintf_gnu=yes
m4/vprintf-gnu.m4:  if test $gl_cv_func_vprintf_gnu = no; then
m4/vprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/vprintf-gnu.m4:    gl_REPLACE_VPRINTF
m4/vprintf-posix.m4:AC_DEFUN([gl_FUNC_VPRINTF_POSIX],
m4/vprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VPRINTF_IS_POSIX])
m4/vprintf-posix.m4:  if test $gl_cv_func_vprintf_posix = no; then
m4/vprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/vprintf-posix.m4:    gl_REPLACE_VPRINTF
m4/vprintf-posix.m4:dnl Result is gl_cv_func_vprintf_posix.
m4/vprintf-posix.m4:AC_DEFUN([gl_FUNC_VPRINTF_IS_POSIX],
m4/vprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VFPRINTF_IS_POSIX])
m4/vprintf-posix.m4:  gl_cv_func_vprintf_posix="$gl_cv_func_vfprintf_posix"
m4/vprintf-posix.m4:AC_DEFUN([gl_REPLACE_VPRINTF],
m4/vprintf-posix.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vprintf-posix.m4:  gl_PREREQ_VPRINTF
m4/vprintf-posix.m4:AC_DEFUN([gl_PREREQ_VPRINTF], [:])
m4/vsnprintf-gnu.m4:AC_DEFUN([gl_FUNC_VSNPRINTF_GNU],
m4/vsnprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VSNPRINTF_IS_POSIX])
m4/vsnprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vsnprintf-gnu.m4:  gl_cv_func_vsnprintf_gnu=no
m4/vsnprintf-gnu.m4:  if test $gl_cv_func_vsnprintf_posix = yes; then
m4/vsnprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vsnprintf-gnu.m4:        gl_cv_func_vsnprintf_gnu=yes
m4/vsnprintf-gnu.m4:  if test $gl_cv_func_vsnprintf_gnu = no; then
m4/vsnprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vsnprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/vsnprintf-gnu.m4:    gl_REPLACE_VSNPRINTF
m4/vsnprintf-posix.m4:AC_DEFUN([gl_FUNC_VSNPRINTF_POSIX],
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VSNPRINTF_IS_POSIX])
m4/vsnprintf-posix.m4:  if test $gl_cv_func_vsnprintf_posix = no; then
m4/vsnprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vsnprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/vsnprintf-posix.m4:    gl_REPLACE_VSNPRINTF
m4/vsnprintf-posix.m4:dnl Result is gl_cv_func_vsnprintf_posix.
m4/vsnprintf-posix.m4:AC_DEFUN([gl_FUNC_VSNPRINTF_IS_POSIX],
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/vsnprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/vsnprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/vsnprintf-posix.m4:  gl_cv_func_vsnprintf_posix=no
m4/vsnprintf-posix.m4:    gl_SNPRINTF_TRUNCATION_C99
m4/vsnprintf-posix.m4:    gl_SNPRINTF_RETVAL_C99
m4/vsnprintf-posix.m4:    gl_SNPRINTF_DIRECTIVE_N
m4/vsnprintf-posix.m4:    gl_SNPRINTF_SIZE1
m4/vsnprintf-posix.m4:    gl_VSNPRINTF_ZEROSIZE_C99
m4/vsnprintf-posix.m4:    case "$gl_cv_func_printf_sizes_c99" in
m4/vsnprintf-posix.m4:        case "$gl_cv_func_printf_sizes_c23" in
m4/vsnprintf-posix.m4:            case "$gl_cv_func_printf_long_double" in
m4/vsnprintf-posix.m4:                case "$gl_cv_func_printf_infinite" in
m4/vsnprintf-posix.m4:                    case "$gl_cv_func_printf_infinite_long_double" in
m4/vsnprintf-posix.m4:                        case "$gl_cv_func_printf_directive_a" in
m4/vsnprintf-posix.m4:                            case "$gl_cv_func_printf_directive_b" in
m4/vsnprintf-posix.m4:                                case "$gl_cv_func_printf_directive_f" in
m4/vsnprintf-posix.m4:                                    case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/vsnprintf-posix.m4:                                        case "$gl_cv_func_printf_directive_ls" in
m4/vsnprintf-posix.m4:                                            case "$gl_cv_func_printf_directive_lc" in
m4/vsnprintf-posix.m4:                                                case "$gl_cv_func_printf_positions" in
m4/vsnprintf-posix.m4:                                                    case "$gl_cv_func_printf_flag_grouping" in
m4/vsnprintf-posix.m4:                                                        case "$gl_cv_func_printf_flag_leftadjust" in
m4/vsnprintf-posix.m4:                                                            case "$gl_cv_func_printf_flag_zero" in
m4/vsnprintf-posix.m4:                                                                case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/vsnprintf-posix.m4:                                                                    case "$gl_cv_func_printf_precision" in
m4/vsnprintf-posix.m4:                                                                        case "$gl_cv_func_printf_enomem" in
m4/vsnprintf-posix.m4:                                                                            case "$gl_cv_func_snprintf_truncation_c99" in
m4/vsnprintf-posix.m4:                                                                                case "$gl_cv_func_snprintf_retval_c99" in
m4/vsnprintf-posix.m4:                                                                                    case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_snprintf_directive_n"],["yes"]) in
m4/vsnprintf-posix.m4:                                                                                        case "$gl_cv_func_snprintf_size1" in
m4/vsnprintf-posix.m4:                                                                                            case "$gl_cv_func_vsnprintf_zerosize_c99" in
m4/vsnprintf-posix.m4:                                                                                                gl_cv_func_vsnprintf_posix=yes
m4/vsnprintf.m4:AC_DEFUN([gl_FUNC_VSNPRINTF],
m4/vsnprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vsnprintf.m4:  gl_cv_func_vsnprintf_usable=no
m4/vsnprintf.m4:    gl_SNPRINTF_SIZE1
m4/vsnprintf.m4:    case "$gl_cv_func_snprintf_size1" in
m4/vsnprintf.m4:        gl_SNPRINTF_RETVAL_C99
m4/vsnprintf.m4:        case "$gl_cv_func_snprintf_retval_c99" in
m4/vsnprintf.m4:            gl_PRINTF_POSITIONS
m4/vsnprintf.m4:            case "$gl_cv_func_printf_positions" in
m4/vsnprintf.m4:                gl_cv_func_vsnprintf_usable=yes
m4/vsnprintf.m4:  if test $gl_cv_func_vsnprintf_usable = no; then
m4/vsnprintf.m4:    gl_REPLACE_VSNPRINTF
m4/vsnprintf.m4:AC_DEFUN([gl_REPLACE_VSNPRINTF],
m4/vsnprintf.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vsnprintf.m4:  gl_PREREQ_VSNPRINTF
m4/vsnprintf.m4:AC_DEFUN([gl_PREREQ_VSNPRINTF], [:])
m4/vsprintf-gnu.m4:AC_DEFUN([gl_FUNC_VSPRINTF_GNU],
m4/vsprintf-gnu.m4:  AC_REQUIRE([gl_FUNC_VSPRINTF_IS_POSIX])
m4/vsprintf-gnu.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_UPPERCASE_B])
m4/vsprintf-gnu.m4:  gl_cv_func_vsprintf_gnu=no
m4/vsprintf-gnu.m4:  if test $gl_cv_func_vsprintf_posix = yes; then
m4/vsprintf-gnu.m4:    case "$gl_cv_func_printf_directive_uppercase_b" in
m4/vsprintf-gnu.m4:        gl_cv_func_vsprintf_gnu=yes
m4/vsprintf-gnu.m4:  if test $gl_cv_func_vsprintf_gnu = no; then
m4/vsprintf-gnu.m4:    gl_PREREQ_VASNPRINTF_WITH_GNU_EXTRAS
m4/vsprintf-gnu.m4:    gl_REPLACE_VASNPRINTF
m4/vsprintf-gnu.m4:    gl_REPLACE_VSPRINTF
m4/vsprintf-posix.m4:AC_DEFUN([gl_FUNC_VSPRINTF_POSIX],
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_FUNC_VSPRINTF_IS_POSIX])
m4/vsprintf-posix.m4:  if test $gl_cv_func_vsprintf_posix = no; then
m4/vsprintf-posix.m4:    gl_PREREQ_VASNPRINTF_WITH_POSIX_EXTRAS
m4/vsprintf-posix.m4:    gl_REPLACE_VASNPRINTF
m4/vsprintf-posix.m4:    gl_REPLACE_VSPRINTF
m4/vsprintf-posix.m4:dnl Result is gl_cv_func_vsprintf_posix.
m4/vsprintf-posix.m4:AC_DEFUN([gl_FUNC_VSPRINTF_IS_POSIX],
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C99])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_SIZES_C23])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_LONG_DOUBLE])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_INFINITE_LONG_DOUBLE])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_A])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_B])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_F])
m4/vsprintf-posix.m4:  m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],[AC_REQUIRE([gl_PRINTF_DIRECTIVE_N])])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LS])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_DIRECTIVE_LC])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_POSITIONS])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_GROUPING])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_LEFTADJUST])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ZERO])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_FLAG_ALT_PRECISION_ZERO])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_PRECISION])
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_PRINTF_ENOMEM])
m4/vsprintf-posix.m4:  gl_cv_func_vsprintf_posix=no
m4/vsprintf-posix.m4:  case "$gl_cv_func_printf_sizes_c99" in
m4/vsprintf-posix.m4:      case "$gl_cv_func_printf_sizes_c23" in
m4/vsprintf-posix.m4:          case "$gl_cv_func_printf_long_double" in
m4/vsprintf-posix.m4:              case "$gl_cv_func_printf_infinite" in
m4/vsprintf-posix.m4:                  case "$gl_cv_func_printf_infinite_long_double" in
m4/vsprintf-posix.m4:                      case "$gl_cv_func_printf_directive_a" in
m4/vsprintf-posix.m4:                          case "$gl_cv_func_printf_directive_b" in
m4/vsprintf-posix.m4:                              case "$gl_cv_func_printf_directive_f" in
m4/vsprintf-posix.m4:                                  case m4_ifdef([gl_PRINTF_SUPPORT_N_DIRECTIVE],["$gl_cv_func_printf_directive_n"],["yes"]) in
m4/vsprintf-posix.m4:                                      case "$gl_cv_func_printf_directive_ls" in
m4/vsprintf-posix.m4:                                          case "$gl_cv_func_printf_directive_lc" in
m4/vsprintf-posix.m4:                                              case "$gl_cv_func_printf_positions" in
m4/vsprintf-posix.m4:                                                  case "$gl_cv_func_printf_flag_grouping" in
m4/vsprintf-posix.m4:                                                      case "$gl_cv_func_printf_flag_leftadjust" in
m4/vsprintf-posix.m4:                                                          case "$gl_cv_func_printf_flag_zero" in
m4/vsprintf-posix.m4:                                                              case "$gl_cv_func_printf_flag_alt_precision_zero" in
m4/vsprintf-posix.m4:                                                                  case "$gl_cv_func_printf_precision" in
m4/vsprintf-posix.m4:                                                                      case "$gl_cv_func_printf_enomem" in
m4/vsprintf-posix.m4:                                                                          gl_cv_func_vsprintf_posix=yes
m4/vsprintf-posix.m4:AC_DEFUN([gl_REPLACE_VSPRINTF],
m4/vsprintf-posix.m4:  AC_REQUIRE([gl_STDIO_H_DEFAULTS])
m4/vsprintf-posix.m4:  gl_PREREQ_VSPRINTF
m4/vsprintf-posix.m4:AC_DEFUN([gl_PREREQ_VSPRINTF], [:])
m4/wait-process.m4:AC_DEFUN([gl_WAIT_PROCESS],
m4/waitpid.m4:AC_DEFUN([gl_FUNC_WAITPID],
m4/warn-on-use.m4:# gl_WARN_ON_USE_PREPARE(INCLUDES, NAMES)
m4/warn-on-use.m4:# needing gl_WARN_ON_USE_PREPARE.
m4/warn-on-use.m4:AC_DEFUN([gl_WARN_ON_USE_PREPARE],
m4/warn-on-use.m4:  m4_ifdef([gl_POSIXCHECK],
m4/warn-on-use.m4:    [m4_foreach_w([gl_decl], [$2],
m4/warn-on-use.m4:       [AH_TEMPLATE([HAVE_RAW_DECL_]AS_TR_CPP(m4_defn([gl_decl])),
m4/warn-on-use.m4:         [Define to 1 if ]m4_defn([gl_decl])[ is declared even after
m4/warn-on-use.m4:     for gl_func in m4_flatten([$2]); do
m4/warn-on-use.m4:       AS_VAR_PUSHDEF([gl_Symbol], [gl_cv_have_raw_decl_$gl_func])dnl
m4/warn-on-use.m4:       AC_CACHE_CHECK([whether $gl_func is declared without a macro],
m4/warn-on-use.m4:         [gl_Symbol],
m4/warn-on-use.m4:[[#undef $gl_func
m4/warn-on-use.m4:  (void) $gl_func;]])],
m4/warn-on-use.m4:           [AS_VAR_SET([gl_Symbol], [yes])], [AS_VAR_SET([gl_Symbol], [no])])])
m4/warn-on-use.m4:       AS_VAR_IF([gl_Symbol], [yes],
m4/warn-on-use.m4:         [AC_DEFINE_UNQUOTED(AS_TR_CPP([HAVE_RAW_DECL_$gl_func]), [1])
m4/warn-on-use.m4:          dnl AC_CHECK_DECL invocation for $gl_func.
m4/warn-on-use.m4:          eval "ac_cv_have_decl_$gl_func=yes"
m4/warn-on-use.m4:       AS_VAR_POPDEF([gl_Symbol])dnl
m4/warnings.m4:# gl_COMPILER_OPTION_IF(OPTION, [IF-SUPPORTED], [IF-NOT-SUPPORTED],
m4/warnings.m4:AC_DEFUN([gl_COMPILER_OPTION_IF],
m4/warnings.m4:AS_VAR_PUSHDEF([gl_Warn], [gl_cv_warn_[]_AC_LANG_ABBREV[]_$1])dnl
m4/warnings.m4:AS_VAR_PUSHDEF([gl_Flags], [_AC_LANG_PREFIX[]FLAGS])dnl
m4/warnings.m4:  [m4_pushdef([gl_Positive], m4_bpatsubst([$1], [^-Wno-], [-W]))],
m4/warnings.m4:  [gl_positive="$1"
m4/warnings.m4:case $gl_positive in
m4/warnings.m4:  -Wno-*) gl_positive=-W`expr "X$gl_positive" : 'X-Wno-\(.*\)'` ;;
m4/warnings.m4:m4_pushdef([gl_Positive], [$gl_positive])])dnl
m4/warnings.m4:AC_CACHE_CHECK([whether _AC_LANG compiler handles $1], [gl_Warn], [
m4/warnings.m4:  gl_saved_compiler_FLAGS="$gl_Flags"
m4/warnings.m4:  AS_VAR_APPEND(m4_defn([gl_Flags]),
m4/warnings.m4:    [" $gl_unknown_warnings_are_errors ]m4_defn([gl_Positive])["])
m4/warnings.m4:                 [AS_VAR_SET([gl_Warn], [yes])],
m4/warnings.m4:                 [AS_VAR_SET([gl_Warn], [no])])
m4/warnings.m4:  gl_Flags="$gl_saved_compiler_FLAGS"
m4/warnings.m4:AS_VAR_IF(gl_Warn, [yes], [$2], [$3])
m4/warnings.m4:m4_popdef([gl_Positive])dnl
m4/warnings.m4:AS_VAR_POPDEF([gl_Flags])dnl
m4/warnings.m4:AS_VAR_POPDEF([gl_Warn])dnl
m4/warnings.m4:# gl_UNKNOWN_WARNINGS_ARE_ERRORS
m4/warnings.m4:AC_DEFUN([gl_UNKNOWN_WARNINGS_ARE_ERRORS],
m4/warnings.m4:AC_DEFUN([gl_UNKNOWN_WARNINGS_ARE_ERRORS(C)],
m4/warnings.m4:  gl_UNKNOWN_WARNINGS_ARE_ERRORS_IMPL
m4/warnings.m4:AC_DEFUN([gl_UNKNOWN_WARNINGS_ARE_ERRORS(C++)],
m4/warnings.m4:  gl_UNKNOWN_WARNINGS_ARE_ERRORS_IMPL
m4/warnings.m4:AC_DEFUN([gl_UNKNOWN_WARNINGS_ARE_ERRORS(Objective C)],
m4/warnings.m4:  gl_UNKNOWN_WARNINGS_ARE_ERRORS_IMPL
m4/warnings.m4:AC_DEFUN([gl_UNKNOWN_WARNINGS_ARE_ERRORS_IMPL],
m4/warnings.m4:[gl_COMPILER_OPTION_IF([-Werror -Wunknown-warning-option],
m4/warnings.m4:   [gl_unknown_warnings_are_errors='-Wunknown-warning-option -Werror'],
m4/warnings.m4:   [gl_unknown_warnings_are_errors=])])
m4/warnings.m4:# gl_WARN_ADD(OPTION, [VARIABLE = WARN_CFLAGS/WARN_CXXFLAGS],
m4/warnings.m4:# Example: gl_WARN_ADD([-Wparentheses]).
m4/warnings.m4:AC_DEFUN([gl_WARN_ADD],
m4/warnings.m4:[AC_REQUIRE([gl_UNKNOWN_WARNINGS_ARE_ERRORS(]_AC_LANG[)])
m4/warnings.m4:gl_COMPILER_OPTION_IF([$1],
m4/warnings.m4:# gl_CC_INHIBIT_WARNINGS
m4/warnings.m4:AC_DEFUN([gl_CC_INHIBIT_WARNINGS],
m4/warnings.m4:    [gl_cv_cc_winhibit],
m4/warnings.m4:       gl_cv_cc_winhibit='-w'
m4/warnings.m4:       gl_cv_cc_winhibit=none
m4/warnings.m4:  case "$gl_cv_cc_winhibit" in
m4/warnings.m4:      GL_CFLAG_INHIBIT_WARNINGS="$gl_cv_cc_winhibit"
m4/warnings.m4:      gl_WARN_ADD([-fno-analyzer], [GL_CFLAG_INHIBIT_WARNINGS])
m4/warnings.m4:# gl_CXX_INHIBIT_WARNINGS
m4/warnings.m4:AC_DEFUN([gl_CXX_INHIBIT_WARNINGS],
m4/warnings.m4:  dnl Requires AC_PROG_CXX or gl_PROG_ANSI_CXX.
m4/warnings.m4:      [gl_cv_cxx_winhibit],
m4/warnings.m4:         gl_cv_cxx_winhibit='-w'
m4/warnings.m4:         gl_cv_cxx_winhibit=none
m4/warnings.m4:    case "$gl_cv_cxx_winhibit" in
m4/warnings.m4:        GL_CXXFLAG_INHIBIT_WARNINGS="$gl_cv_cxx_winhibit"
m4/warnings.m4:        gl_WARN_ADD([-fno-analyzer], [GL_CXXFLAG_INHIBIT_WARNINGS])
m4/wchar_h.m4:AC_DEFUN_ONCE([gl_WCHAR_H],
m4/wchar_h.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wchar_h.m4:  AC_REQUIRE([gl_WCHAR_H_INLINE_OK])
m4/wchar_h.m4:  gl_CHECK_NEXT_HEADERS([wchar.h])
m4/wchar_h.m4:  AC_REQUIRE([gl_FEATURES_H])
m4/wchar_h.m4:  AC_REQUIRE([gl_TYPE_WINT_T_PREREQ])
m4/wchar_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/wchar_h.m4:AC_DEFUN([gl_WCHAR_H_INLINE_OK],
m4/wchar_h.m4:    [gl_cv_header_wchar_h_correct_inline],
m4/wchar_h.m4:    [gl_cv_header_wchar_h_correct_inline=yes
m4/wchar_h.m4:               gl_cv_header_wchar_h_correct_inline=no
m4/wchar_h.m4:  if test $gl_cv_header_wchar_h_correct_inline = no; then
m4/wchar_h.m4:# gl_WCHAR_MODULE_INDICATOR([modulename])
m4/wchar_h.m4:AC_DEFUN([gl_WCHAR_MODULE_INDICATOR],
m4/wchar_h.m4:  gl_WCHAR_H_REQUIRE_DEFAULTS
m4/wchar_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/wchar_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/wchar_h.m4:AC_DEFUN([gl_WCHAR_H_REQUIRE_DEFAULTS],
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_BTOWC])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCTOB])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSINIT])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSZERO])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBRTOWC])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBRLEN])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSRTOWCS])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MBSNRTOWCS])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCRTOMB])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSRTOMBS])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSNRTOMBS])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCWIDTH])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WMEMCHR])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WMEMCMP])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WMEMCPY])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WMEMMOVE])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WMEMPCPY])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WMEMSET])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSLEN])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSNLEN])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSCPY])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCPCPY])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSNCPY])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCPNCPY])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSCAT])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSNCAT])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSCMP])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSNCMP])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSCASECMP])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSNCASECMP])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSCOLL])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSXFRM])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSDUP])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSCHR])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSRCHR])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSCSPN])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSSPN])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSPBRK])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSSTR])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSTOK])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSWIDTH])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCSFTIME])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WGETCWD])
m4/wchar_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_MDA_WCSDUP], [1])
m4/wchar_h.m4:  gl_STDLIB_H_REQUIRE_DEFAULTS
m4/wchar_h.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wchar_h.m4:AC_DEFUN([gl_WCHAR_H_DEFAULTS],
m4/wcpcpy.m4:AC_DEFUN([gl_FUNC_WCPCPY],
m4/wcpcpy.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcpncpy.m4:AC_DEFUN([gl_FUNC_WCPNCPY],
m4/wcpncpy.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcrtomb.m4:AC_DEFUN([gl_FUNC_WCRTOMB],
m4/wcrtomb.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcrtomb.m4:  gl_MBSTATE_T_BROKEN
m4/wcrtomb.m4:        [gl_cv_func_wcrtomb_works],
m4/wcrtomb.m4:           [gl_cv_func_wcrtomb_works=yes],
m4/wcrtomb.m4:           [gl_cv_func_wcrtomb_works=no],
m4/wcrtomb.m4:              linux*-android*) gl_cv_func_wcrtomb_works="guessing no";;
m4/wcrtomb.m4:              *)               gl_cv_func_wcrtomb_works="guessing yes";;
m4/wcrtomb.m4:      case "$gl_cv_func_wcrtomb_works" in
m4/wcrtomb.m4:        [gl_cv_func_wcrtomb_retval],
m4/wcrtomb.m4:              gl_cv_func_wcrtomb_retval="guessing no" ;;
m4/wcrtomb.m4:              gl_cv_func_wcrtomb_retval="guessing yes" ;;
m4/wcrtomb.m4:              [gl_cv_func_wcrtomb_retval=yes],
m4/wcrtomb.m4:              [gl_cv_func_wcrtomb_retval=no],
m4/wcrtomb.m4:      case "$gl_cv_func_wcrtomb_retval" in
m4/wcrtomb.m4:AC_DEFUN([gl_PREREQ_WCRTOMB], [
m4/wcscasecmp.m4:AC_DEFUN([gl_FUNC_WCSCASECMP],
m4/wcscasecmp.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcscat.m4:AC_DEFUN([gl_FUNC_WCSCAT],
m4/wcscat.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcschr.m4:AC_DEFUN([gl_FUNC_WCSCHR],
m4/wcschr.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcscmp.m4:AC_DEFUN([gl_FUNC_WCSCMP],
m4/wcscmp.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcscmp.m4:      [gl_cv_func_wcscmp_works],
m4/wcscmp.m4:         [gl_cv_func_wcscmp_works=yes],
m4/wcscmp.m4:         [gl_cv_func_wcscmp_works=no],
m4/wcscmp.m4:                [gl_cv_func_wcscmp_works="guessing no"],
m4/wcscmp.m4:                [gl_cv_func_wcscmp_works="guessing yes"])
m4/wcscmp.m4:            *-musl* | midipix*) gl_cv_func_wcscmp_works="guessing no" ;;
m4/wcscmp.m4:            *) gl_cv_func_wcscmp_works="$gl_cross_guess_normal" ;;
m4/wcscmp.m4:    case "$gl_cv_func_wcscmp_works" in
m4/wcscoll.m4:AC_DEFUN([gl_FUNC_WCSCOLL],
m4/wcscoll.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcscpy.m4:AC_DEFUN([gl_FUNC_WCSCPY],
m4/wcscpy.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcscspn.m4:AC_DEFUN([gl_FUNC_WCSCSPN],
m4/wcscspn.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsdup.m4:AC_DEFUN([gl_FUNC_WCSDUP],
m4/wcsdup.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsdup.m4:    [gl_cv_func_wcsdup],
m4/wcsdup.m4:       [gl_cv_func_wcsdup=yes],
m4/wcsdup.m4:       [gl_cv_func_wcsdup=no])
m4/wcsdup.m4:  if test $gl_cv_func_wcsdup = no; then
m4/wcsftime.m4:AC_DEFUN([gl_FUNC_WCSFTIME],
m4/wcsftime.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcslen.m4:AC_DEFUN([gl_FUNC_WCSLEN],
m4/wcslen.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsncasecmp.m4:AC_DEFUN([gl_FUNC_WCSNCASECMP],
m4/wcsncasecmp.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsncat.m4:AC_DEFUN([gl_FUNC_WCSNCAT],
m4/wcsncat.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsncmp.m4:AC_DEFUN([gl_FUNC_WCSNCMP],
m4/wcsncmp.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsncmp.m4:      [gl_cv_func_wcsncmp_works],
m4/wcsncmp.m4:         [gl_cv_func_wcsncmp_works=yes],
m4/wcsncmp.m4:         [gl_cv_func_wcsncmp_works=no],
m4/wcsncmp.m4:                [gl_cv_func_wcsncmp_works="guessing no"],
m4/wcsncmp.m4:                [gl_cv_func_wcsncmp_works="guessing yes"])
m4/wcsncmp.m4:            *-musl* | midipix*) gl_cv_func_wcsncmp_works="guessing no" ;;
m4/wcsncmp.m4:            *) gl_cv_func_wcsncmp_works="$gl_cross_guess_normal" ;;
m4/wcsncmp.m4:    case "$gl_cv_func_wcsncmp_works" in
m4/wcsncpy.m4:AC_DEFUN([gl_FUNC_WCSNCPY],
m4/wcsncpy.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsnlen.m4:AC_DEFUN([gl_FUNC_WCSNLEN],
m4/wcsnlen.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsnrtombs.m4:AC_DEFUN([gl_FUNC_WCSNRTOMBS],
m4/wcsnrtombs.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsnrtombs.m4:  gl_MBSTATE_T_BROKEN
m4/wcsnrtombs.m4:  gl_CHECK_FUNCS_ANDROID([wcsnrtombs], [[#include <wchar.h>]])
m4/wcsnrtombs.m4:    case "$gl_cv_onwards_func_wcsnrtombs" in
m4/wcsnrtombs.m4:      gl_WCSNRTOMBS_WORKS_IN_TRADITIONAL_LOCALE
m4/wcsnrtombs.m4:      case "$gl_cv_func_wcsnrtombs_works_in_traditional_locale" in
m4/wcsnrtombs.m4:AC_DEFUN([gl_PREREQ_WCSNRTOMBS], [
m4/wcsnrtombs.m4:dnl Result is gl_cv_func_wcsnrtombs_works_in_traditional_locale.
m4/wcsnrtombs.m4:AC_DEFUN([gl_WCSNRTOMBS_WORKS_IN_TRADITIONAL_LOCALE],
m4/wcsnrtombs.m4:    [gl_cv_func_wcsnrtombs_works_in_traditional_locale],
m4/wcsnrtombs.m4:        solaris*) gl_cv_func_wcsnrtombs_works_in_traditional_locale="guessing no" ;;
m4/wcsnrtombs.m4:        *)        gl_cv_func_wcsnrtombs_works_in_traditional_locale="guessing yes" ;;
m4/wcsnrtombs.m4:          [gl_cv_func_wcsnrtombs_works_in_traditional_locale=yes],
m4/wcsnrtombs.m4:          [gl_cv_func_wcsnrtombs_works_in_traditional_locale=no],
m4/wcspbrk.m4:AC_DEFUN([gl_FUNC_WCSPBRK],
m4/wcspbrk.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsrchr.m4:AC_DEFUN([gl_FUNC_WCSRCHR],
m4/wcsrchr.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsrtombs.m4:AC_DEFUN([gl_FUNC_WCSRTOMBS],
m4/wcsrtombs.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsrtombs.m4:  gl_MBSTATE_T_BROKEN
m4/wcsrtombs.m4:      gl_WCSRTOMBS_TERMINATION
m4/wcsrtombs.m4:      gl_WCSRTOMBS_NULL
m4/wcsrtombs.m4:      case "$gl_cv_func_wcsrtombs_termination" in
m4/wcsrtombs.m4:      case "$gl_cv_func_wcsrtombs_null" in
m4/wcsrtombs.m4:dnl Result is gl_cv_func_wcsrtombs_termination.
m4/wcsrtombs.m4:AC_DEFUN([gl_WCSRTOMBS_TERMINATION],
m4/wcsrtombs.m4:    [gl_cv_func_wcsrtombs_termination],
m4/wcsrtombs.m4:        osf*)              gl_cv_func_wcsrtombs_termination="guessing no" ;;
m4/wcsrtombs.m4:        mingw* | windows*) gl_cv_func_wcsrtombs_termination="guessing yes" ;;
m4/wcsrtombs.m4:        *)                 gl_cv_func_wcsrtombs_termination="guessing yes" ;;
m4/wcsrtombs.m4:          [gl_cv_func_wcsrtombs_termination=yes],
m4/wcsrtombs.m4:          [gl_cv_func_wcsrtombs_termination=no],
m4/wcsrtombs.m4:dnl Result is gl_cv_func_wcsrtombs_null.
m4/wcsrtombs.m4:AC_DEFUN([gl_WCSRTOMBS_NULL],
m4/wcsrtombs.m4:    [gl_cv_func_wcsrtombs_null],
m4/wcsrtombs.m4:          gl_cv_func_wcsrtombs_null="guessing no" ;;
m4/wcsrtombs.m4:          gl_cv_func_wcsrtombs_null="guessing yes" ;;
m4/wcsrtombs.m4:          gl_cv_func_wcsrtombs_null="guessing yes" ;;
m4/wcsrtombs.m4:          [gl_cv_func_wcsrtombs_null=yes],
m4/wcsrtombs.m4:          [gl_cv_func_wcsrtombs_null=no],
m4/wcsrtombs.m4:AC_DEFUN([gl_PREREQ_WCSRTOMBS], [
m4/wcsspn.m4:AC_DEFUN([gl_FUNC_WCSSPN],
m4/wcsspn.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsstr.m4:AC_DEFUN([gl_FUNC_WCSSTR_SIMPLE],
m4/wcsstr.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcsstr.m4:AC_DEFUN([gl_FUNC_WCSSTR],
m4/wcsstr.m4:  AC_REQUIRE([gl_FUNC_WCSSTR_SIMPLE])
m4/wcsstr.m4:      [gl_cv_func_wcsstr_linear],
m4/wcsstr.m4:        [gl_cv_func_wcsstr_linear=yes], [gl_cv_func_wcsstr_linear=no],
m4/wcsstr.m4:        [gl_cv_func_wcsstr_linear="$gl_cross_guess_normal"])
m4/wcsstr.m4:    case "$gl_cv_func_wcsstr_linear" in
m4/wcstok.m4:AC_DEFUN([gl_FUNC_WCSTOK],
m4/wcstok.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcstok.m4:          [gl_cv_func_wcstok_posix_signature],
m4/wcstok.m4:             [gl_cv_func_wcstok_posix_signature=yes],
m4/wcstok.m4:             [gl_cv_func_wcstok_posix_signature=no])
m4/wcstok.m4:        if test $gl_cv_func_wcstok_posix_signature = no; then
m4/wcswidth.m4:AC_DEFUN([gl_FUNC_WCSWIDTH],
m4/wcswidth.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcswidth.m4:  AC_REQUIRE([gl_FUNC_WCWIDTH])
m4/wcsxfrm.m4:AC_DEFUN([gl_FUNC_WCSXFRM],
m4/wcsxfrm.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wctob.m4:AC_DEFUN([gl_FUNC_WCTOB],
m4/wctob.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wctob.m4:      [gl_cv_func_wctob_works],
m4/wctob.m4:            gl_cv_func_wctob_works="guessing no" ;;
m4/wctob.m4:            gl_cv_func_wctob_works="guessing no" ;;
m4/wctob.m4:          *) gl_cv_func_wctob_works="guessing yes" ;;
m4/wctob.m4:              [gl_cv_func_wctob_works=no],
m4/wctob.m4:        if test "$gl_cv_func_wctob_works" != no && test $LOCALE_FR != none; then
m4/wctob.m4:            [gl_cv_func_wctob_works=yes],
m4/wctob.m4:            [gl_cv_func_wctob_works=no],
m4/wctob.m4:    case "$gl_cv_func_wctob_works" in
m4/wctob.m4:AC_DEFUN([gl_PREREQ_WCTOB], [
m4/wctomb.m4:AC_DEFUN([gl_FUNC_WCTOMB],
m4/wctomb.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/wctomb.m4:AC_DEFUN([gl_PREREQ_WCTOMB], [
m4/wctrans.m4:AC_DEFUN_ONCE([gl_FUNC_WCTRANS],
m4/wctrans.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/wctrans.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/wctrans.m4:      [gl_cv_func_wctrans_works],
m4/wctrans.m4:         [gl_cv_func_wctrans_works=yes], [gl_cv_func_wctrans_works=no],
m4/wctrans.m4:            netbsd*) gl_cv_func_wctrans_works="guessing no" ;;
m4/wctrans.m4:            *)       gl_cv_func_wctrans_works="guessing yes" ;;
m4/wctrans.m4:    case "$gl_cv_func_wctrans_works" in
m4/wctype.m4:AC_DEFUN_ONCE([gl_FUNC_WCTYPE],
m4/wctype.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/wctype.m4:  AC_REQUIRE([gl_WCTYPE_H])
m4/wctype.m4:      [gl_cv_func_wctype_works],
m4/wctype.m4:         [gl_cv_func_wctype_works=yes], [gl_cv_func_wctype_works=no],
m4/wctype.m4:            mingw* | windows*) gl_cv_func_wctype_works="guessing no" ;;
m4/wctype.m4:            android*)          gl_cv_func_wctype_works="guessing no" ;;
m4/wctype.m4:            *)                 gl_cv_func_wctype_works="guessing yes" ;;
m4/wctype.m4:    case "$gl_cv_func_wctype_works" in
m4/wctype_h.m4:AC_DEFUN_ONCE([gl_WCTYPE_H],
m4/wctype_h.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/wctype_h.m4:  AC_REQUIRE([gl_TYPE_WINT_T_PREREQ])
m4/wctype_h.m4:  gl_CHECK_NEXT_HEADERS([wctype.h])
m4/wctype_h.m4:      AC_CACHE_CHECK([whether iswcntrl works], [gl_cv_func_iswcntrl_works],
m4/wctype_h.m4:            [gl_cv_func_iswcntrl_works=yes], [gl_cv_func_iswcntrl_works=no],
m4/wctype_h.m4:              [gl_cv_func_iswcntrl_works="guessing yes"],
m4/wctype_h.m4:              [gl_cv_func_iswcntrl_works="guessing no"])
m4/wctype_h.m4:    case "$gl_cv_func_iswcntrl_works" in
m4/wctype_h.m4:  AC_CACHE_CHECK([for wctype_t], [gl_cv_type_wctype_t],
m4/wctype_h.m4:       [gl_cv_type_wctype_t=yes],
m4/wctype_h.m4:       [gl_cv_type_wctype_t=no])
m4/wctype_h.m4:  if test $gl_cv_type_wctype_t = no; then
m4/wctype_h.m4:  AC_CACHE_CHECK([for wctrans_t], [gl_cv_type_wctrans_t],
m4/wctype_h.m4:       [gl_cv_type_wctrans_t=yes],
m4/wctype_h.m4:       [gl_cv_type_wctrans_t=no])
m4/wctype_h.m4:  if test $gl_cv_type_wctrans_t = no; then
m4/wctype_h.m4:  gl_WARN_ON_USE_PREPARE([[
m4/wctype_h.m4:# gl_WCTYPE_MODULE_INDICATOR([modulename])
m4/wctype_h.m4:AC_DEFUN([gl_WCTYPE_MODULE_INDICATOR],
m4/wctype_h.m4:  gl_WCTYPE_H_REQUIRE_DEFAULTS
m4/wctype_h.m4:  gl_MODULE_INDICATOR_SET_VARIABLE([$1])
m4/wctype_h.m4:  gl_MODULE_INDICATOR_FOR_TESTS([$1])
m4/wctype_h.m4:AC_DEFUN([gl_WCTYPE_H_REQUIRE_DEFAULTS],
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISWBLANK])
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISWDIGIT])
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISWPUNCT])
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISWXDIGIT])
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCTYPE])
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_ISWCTYPE])
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_WCTRANS])
m4/wctype_h.m4:    gl_MODULE_INDICATOR_INIT_VARIABLE([GNULIB_TOWCTRANS])
m4/wctype_h.m4:  AC_REQUIRE([gl_WCTYPE_H_DEFAULTS])
m4/wctype_h.m4:AC_DEFUN([gl_WCTYPE_H_DEFAULTS],
m4/wcwidth.m4:AC_DEFUN([gl_FUNC_WCWIDTH],
m4/wcwidth.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wcwidth.m4:      [gl_cv_func_wcwidth_macro],
m4/wcwidth.m4:         [gl_cv_func_wcwidth_macro=yes],
m4/wcwidth.m4:         [gl_cv_func_wcwidth_macro=no])
m4/wcwidth.m4:  if test $ac_cv_func_wcwidth = yes || test $gl_cv_func_wcwidth_macro = yes; then
m4/wcwidth.m4:      [gl_cv_func_wcwidth_works],
m4/wcwidth.m4:          [gl_cv_func_wcwidth_works=yes],
m4/wcwidth.m4:          [gl_cv_func_wcwidth_works=no],
m4/wcwidth.m4:             *-gnu* | gnu*)      gl_cv_func_wcwidth_works="guessing yes";;
m4/wcwidth.m4:             *-musl* | midipix*) gl_cv_func_wcwidth_works="guessing yes";;
m4/wcwidth.m4:             aix[7-9]*)          gl_cv_func_wcwidth_works="guessing yes";;
m4/wcwidth.m4:             *)                  gl_cv_func_wcwidth_works="$gl_cross_guess_normal";;
m4/wcwidth.m4:    case "$gl_cv_func_wcwidth_works" in
m4/wcwidth.m4:AC_DEFUN([gl_PREREQ_WCWIDTH], [
m4/windows-stat-inodes.m4:AC_DEFUN([gl_WINDOWS_STAT_INODES],
m4/windows-stat-timespec.m4:AC_DEFUN([gl_WINDOWS_STAT_TIMESPEC],
m4/wint_t.m4:      [gl_cv_type_wint_t_large_enough],
m4/wint_t.m4:         [gl_cv_type_wint_t_large_enough=yes],
m4/wint_t.m4:         [gl_cv_type_wint_t_large_enough=no])])
m4/wint_t.m4:    if test $gl_cv_type_wint_t_large_enough = no; then
m4/wint_t.m4:AC_DEFUN([gl_TYPE_WINT_T_PREREQ],
m4/wmemchr.m4:AC_DEFUN([gl_FUNC_WMEMCHR],
m4/wmemchr.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wmemchr.m4:  AC_CACHE_CHECK([for wmemchr], [gl_cv_func_wmemchr],
m4/wmemchr.m4:       [gl_cv_func_wmemchr=yes],
m4/wmemchr.m4:       [gl_cv_func_wmemchr=no])
m4/wmemchr.m4:  if test $gl_cv_func_wmemchr = no; then
m4/wmemcmp.m4:AC_DEFUN([gl_FUNC_WMEMCMP],
m4/wmemcmp.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wmemcmp.m4:  AC_CACHE_CHECK([for wmemcmp], [gl_cv_func_wmemcmp],
m4/wmemcmp.m4:       [gl_cv_func_wmemcmp=yes],
m4/wmemcmp.m4:       [gl_cv_func_wmemcmp=no])
m4/wmemcmp.m4:  if test $gl_cv_func_wmemcmp = no; then
m4/wmemcmp.m4:      [gl_cv_func_wmemcmp_works],
m4/wmemcmp.m4:         [gl_cv_func_wmemcmp_works=yes],
m4/wmemcmp.m4:         [gl_cv_func_wmemcmp_works=no],
m4/wmemcmp.m4:                [gl_cv_func_wmemcmp_works="guessing no"],
m4/wmemcmp.m4:                [gl_cv_func_wmemcmp_works="guessing yes"])
m4/wmemcmp.m4:            *-musl* | midipix*) gl_cv_func_wmemcmp_works="guessing no" ;;
m4/wmemcmp.m4:            *) gl_cv_func_wmemcmp_works="$gl_cross_guess_normal" ;;
m4/wmemcmp.m4:    case "$gl_cv_func_wmemcmp_works" in
m4/wmemcpy.m4:AC_DEFUN([gl_FUNC_WMEMCPY],
m4/wmemcpy.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wmemcpy.m4:  AC_CACHE_CHECK([for wmemcpy], [gl_cv_func_wmemcpy],
m4/wmemcpy.m4:       [gl_cv_func_wmemcpy=yes],
m4/wmemcpy.m4:       [gl_cv_func_wmemcpy=no])
m4/wmemcpy.m4:  if test $gl_cv_func_wmemcpy = no; then
m4/wmemmove.m4:AC_DEFUN([gl_FUNC_WMEMMOVE],
m4/wmemmove.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wmemmove.m4:  AC_CACHE_CHECK([for wmemmove], [gl_cv_func_wmemmove],
m4/wmemmove.m4:       [gl_cv_func_wmemmove=yes],
m4/wmemmove.m4:       [gl_cv_func_wmemmove=no])
m4/wmemmove.m4:  if test $gl_cv_func_wmemmove = no; then
m4/wmempcpy.m4:AC_DEFUN([gl_FUNC_WMEMPCPY],
m4/wmempcpy.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wmempcpy.m4:  gl_CHECK_FUNCS_ANDROID([wmempcpy], [[#include <wchar.h>]])
m4/wmempcpy.m4:    case "$gl_cv_onwards_func_wmempcpy" in
m4/wmemset.m4:AC_DEFUN([gl_FUNC_WMEMSET],
m4/wmemset.m4:  AC_REQUIRE([gl_WCHAR_H_DEFAULTS])
m4/wmemset.m4:  AC_CACHE_CHECK([for wmemset], [gl_cv_func_wmemset],
m4/wmemset.m4:       [gl_cv_func_wmemset=yes],
m4/wmemset.m4:       [gl_cv_func_wmemset=no])
m4/wmemset.m4:  if test $gl_cv_func_wmemset = no; then
m4/woe32-dll.m4:AC_DEFUN([gl_WOE32_DLL],
m4/woe32-dll.m4:        [gl_cv_ld_autoimport],
m4/woe32-dll.m4:           [gl_cv_ld_autoimport=no],
m4/woe32-dll.m4:           [gl_save_LDFLAGS="$LDFLAGS"
m4/woe32-dll.m4:            AC_LINK_IFELSE([], [gl_cv_ld_autoimport=yes], [gl_cv_ld_autoimport=no])
m4/woe32-dll.m4:            LDFLAGS="$gl_save_LDFLAGS"
m4/woe32-dll.m4:      if test $gl_cv_ld_autoimport = yes; then
m4/write-any-file.m4:AC_DEFUN([gl_WRITE_ANY_FILE],
m4/write.m4:AC_DEFUN([gl_FUNC_WRITE],
m4/write.m4:  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
m4/write.m4:  m4_ifdef([gl_MSVC_INVAL], [
m4/write.m4:    AC_REQUIRE([gl_MSVC_INVAL])
m4/write.m4:  m4_ifdef([gl_SIGNAL_SIGPIPE], [
m4/write.m4:    gl_SIGNAL_SIGPIPE
m4/write.m4:    if test $gl_cv_header_signal_h_SIGPIPE != yes; then
m4/write.m4:  m4_ifdef([gl_NONBLOCKING_IO], [
m4/write.m4:    gl_NONBLOCKING_IO
m4/write.m4:    if test $gl_cv_have_nonblocking != yes; then
m4/write.m4:AC_DEFUN([gl_PREREQ_WRITE], [:])
m4/xalloc.m4:AC_DEFUN([gl_XALLOC], [:])
m4/xattr.m4:AC_DEFUN([gl_FUNC_XATTR],
m4/xattr.m4:      [gl_cv_xattr_lib],
m4/xattr.m4:      [gl_cv_xattr_lib=no
m4/xattr.m4:         [gl_cv_xattr_lib='none required'],
m4/xattr.m4:          AC_LINK_IFELSE([], [gl_cv_xattr_lib=-lattr])
m4/xattr.m4:    if test "$gl_cv_xattr_lib" = no; then
m4/xattr.m4:    elif test "$gl_cv_xattr_lib" != 'none required'; then
m4/xattr.m4:      LIB_XATTR=$gl_cv_xattr_lib
m4/xgetcwd.m4:AC_DEFUN([gl_XGETCWD],
m4/xnanosleep.m4:AC_DEFUN([gl_XNANOSLEEP],
m4/xsize.m4:AC_DEFUN([gl_XSIZE],
m4/xsize.m4:  AC_REQUIRE([gl_SIZE_MAX])
m4/xstrndup.m4:AC_DEFUN([gl_XSTRNDUP],
m4/xstrndup.m4:  gl_PREREQ_XSTRNDUP
m4/xstrndup.m4:AC_DEFUN([gl_PREREQ_XSTRNDUP], [
m4/xstrtod.m4:AC_DEFUN([gl_XSTRTOD],
m4/xstrtod.m4:AC_DEFUN([gl_XSTRTOLD],
m4/xstrtol.m4:AC_DEFUN([gl_XSTRTOL],
m4/xvasprintf.m4:AC_DEFUN([gl_XVASPRINTF], [
m4/xvasprintf.m4:  gl_OPTIONAL_STRERRORNAME_NP
m4/yesno.m4:AC_DEFUN([gl_YESNO],
m4/yield.m4:AC_DEFUN([gl_YIELD],
m4/yield.m4:  AC_REQUIRE([gl_PTHREADLIB])
m4/yield.m4:  AC_REQUIRE([gl_THREADLIB])
m4/yield.m4:  if test $gl_threads_api = posix; then
m4/zzgnulib.m4:dnl Redefine AC_PROG_CC so that it ends with invocations of gl_COMPILER_CLANG
m4/zzgnulib.m4:dnl and gl_COMPILER_PREPARE_CHECK_DECL.
m4/zzgnulib.m4:gl_COMPILER_CLANG
m4/zzgnulib.m4:gl_COMPILER_PREPARE_CHECK_DECL
m4/zzgnulib.m4:# gl_ZZGNULIB
m4/zzgnulib.m4:AC_DEFUN([gl_ZZGNULIB])
m4/_Exit.m4:AC_DEFUN([gl_FUNC__EXIT],
m4/_Exit.m4:  AC_REQUIRE([gl_STDLIB_H_DEFAULTS])
m4/_Exit.m4:  gl_CHECK_FUNCS_ANDROID([_Exit], [[#include <stdlib.h>]])
m4/_Exit.m4:    case "$gl_cv_onwards_func__Exit" in
m4/_Exit.m4:AC_DEFUN([gl_PREREQ__EXIT], [
m4/__inline.m4:AC_DEFUN([gl___INLINE],
m4/__inline.m4:    [gl_cv_c___inline],
m4/__inline.m4:       [gl_cv_c___inline=yes],
m4/__inline.m4:       [gl_cv_c___inline=no])])
m4/__inline.m4:  if test $gl_cv_c___inline = yes; then
